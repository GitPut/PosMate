{"ast":null,"code":"import{useMemo}from'react';import chroma from'chroma-js';import{useTheme}from\"../base/ThemeContext\";import{useSurfaceScale}from\"./use-surface-scale\";var domain=[0,1,2,3,4,6,8,12,16,24].map(function(n){return n/24*100;});export var useSurfaceColor=function useSurfaceColor(){var _useTheme=useTheme(),colorScheme=_useTheme.colorScheme;var surfaceScale=useSurfaceScale();return useMemo(function(){if(colorScheme==='light')return chroma.scale([surfaceScale(0)]);return chroma.scale([0,0.05,0.07,0.08,0.09,0.11,0.12,0.14,0.15,0.1].map(function(c){return surfaceScale(c);})).domain(domain);},[colorScheme,surfaceScale]);};export var useSurfaceColorValue=function useSurfaceColorValue(elevation){var surfaceScale=useSurfaceColor();return useMemo(function(){return surfaceScale(elevation).hex();},[surfaceScale,elevation]);};","map":{"version":3,"mappings":"AAAA,OAASA,OAAT,KAAwB,OAAxB,CACA,MAAOC,OAAP,KAAmB,WAAnB,CACA,OAAoBC,QAApB,4BACA,OAASC,eAAT,2BAEA,GAAMC,OAAM,CAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAAa,CAAb,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,EAAtB,CAA0B,EAA1B,CAA8B,EAA9B,EAAkCC,GAAlC,CAAuCC,UAAD,QAAQA,EAAC,CAAG,EAAL,CAAW,GAAxD,GAAf,CAEA,MAAO,IAAMC,gBAAe,CAAG,QAAlBA,gBAAe,EAAS,CACnC,cAAwBL,QAAQ,EAAhC,CAAQM,kCACR,GAAMC,aAAY,CAAGN,eAAe,EAApC,CAEA,MAAOH,QAAO,CAAC,UAAM,CACnB,GAAIQ,WAAW,GAAK,OAApB,CAA6B,MAAOP,OAAM,CAACS,KAAP,CAAa,CAACD,YAAY,CAAC,CAAD,CAAb,CAAb,CAAP,CAC7B,MAAOR,OAAM,CACVS,KADI,CACE,CAAC,CAAD,CAAI,IAAJ,CAAU,IAAV,CAAgB,IAAhB,CAAsB,IAAtB,CAA4B,IAA5B,CAAkC,IAAlC,CAAwC,IAAxC,CAA8C,IAA9C,CAAoD,GAApD,EAAyDL,GAAzD,CAA8DM,UAAD,QAAOF,aAAY,CAACE,CAAD,CAAhF,GADF,EAEJP,MAFI,CAEGA,MAFH,CAAP,CAGD,CALa,CAKX,CAACI,WAAD,CAAcC,YAAd,CALW,CAAd,CAMD,CAVM,CAYP,MAAO,IAAMG,qBAAoB,CAAIC,QAAxBD,qBAAoB,CAAIC,SAAD,CAA0B,CAC5D,GAAMJ,aAAY,CAAGF,eAAe,EAApC,CAEA,MAAOP,QAAO,CAAC,iBAAMS,aAAY,CAACI,SAAD,CAAZ,CAAwBC,GAAxB,EAAP,GAAsC,CAACL,YAAD,CAAeI,SAAf,CAAtC,CAAd,CACD,CAJM","names":["useMemo","chroma","useTheme","useSurfaceScale","domain","map","n","useSurfaceColor","colorScheme","surfaceScale","scale","c","useSurfaceColorValue","elevation","hex"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/@react-native-material/core/lib/module/hooks/use-surface-color.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport chroma from 'chroma-js';\nimport { Elevation, useTheme } from '../base/ThemeContext';\nimport { useSurfaceScale } from './use-surface-scale';\n\nconst domain = [0, 1, 2, 3, 4, 6, 8, 12, 16, 24].map((n) => (n / 24) * 100);\n\nexport const useSurfaceColor = () => {\n  const { colorScheme } = useTheme();\n  const surfaceScale = useSurfaceScale();\n\n  return useMemo(() => {\n    if (colorScheme === 'light') return chroma.scale([surfaceScale(0)]);\n    return chroma\n      .scale([0, 0.05, 0.07, 0.08, 0.09, 0.11, 0.12, 0.14, 0.15, 0.1].map((c) => surfaceScale(c)))\n      .domain(domain);\n  }, [colorScheme, surfaceScale]);\n};\n\nexport const useSurfaceColorValue = (elevation: Elevation) => {\n  const surfaceScale = useSurfaceColor();\n\n  return useMemo(() => surfaceScale(elevation).hex(), [surfaceScale, elevation]);\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}