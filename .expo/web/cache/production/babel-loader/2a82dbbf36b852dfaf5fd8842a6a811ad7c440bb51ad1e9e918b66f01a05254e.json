{"ast":null,"code":"import{useEffect,useMemo}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import{useTheme}from\"../base/ThemeContext\";var inputRange=Array.from(Array(25).keys());export var useAnimatedElevation=function useAnimatedElevation(elevation){var animated=useMemo(function(){return new Animated.Value(elevation);},[]);useEffect(function(){if(Platform.OS==='web')return;Animated.timing(animated,{toValue:elevation,duration:200,useNativeDriver:true}).start();},[elevation]);var _useTheme=useTheme(),elevations=_useTheme.elevations;return useMemo(function(){return[Platform.select({android:{elevation:animated},default:{shadowColor:elevations[elevation].shadowColor,shadowOffset:{width:animated.interpolate({inputRange:inputRange,outputRange:Object.values(elevations).map(function(e){var _e$shadowOffset$width,_e$shadowOffset;return(_e$shadowOffset$width=(_e$shadowOffset=e.shadowOffset)===null||_e$shadowOffset===void 0?void 0:_e$shadowOffset.width)!==null&&_e$shadowOffset$width!==void 0?_e$shadowOffset$width:0;})}),height:animated.interpolate({inputRange:inputRange,outputRange:Object.values(elevations).map(function(e){var _e$shadowOffset$heigh,_e$shadowOffset2;return(_e$shadowOffset$heigh=(_e$shadowOffset2=e.shadowOffset)===null||_e$shadowOffset2===void 0?void 0:_e$shadowOffset2.height)!==null&&_e$shadowOffset$heigh!==void 0?_e$shadowOffset$heigh:0;})})},shadowOpacity:animated.interpolate({inputRange:inputRange,outputRange:Object.values(elevations).map(function(e){var _e$shadowOpacity;return(_e$shadowOpacity=e.shadowOpacity)!==null&&_e$shadowOpacity!==void 0?_e$shadowOpacity:0;})}),shadowRadius:animated.interpolate({inputRange:inputRange,outputRange:Object.values(elevations).map(function(e){var _e$shadowRadius;return(_e$shadowRadius=e.shadowRadius)!==null&&_e$shadowRadius!==void 0?_e$shadowRadius:0;})})},web:{boxShadow:elevations[elevation].boxShadow,transition:'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'}}),Platform.select({default:{},web:{}})];},[elevation,elevations]);};","map":{"version":3,"mappings":"AAAA,OAASA,SAAT,CAAoBC,OAApB,KAAmC,OAAnC,2HAEA,OAAoBC,QAApB,4BAEA,GAAMC,WAAU,CAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,EAAD,CAAL,CAAUE,IAAV,EAAX,CAAnB,CAEA,MAAO,IAAMC,qBAAoB,CAAIC,QAAxBD,qBAAoB,CAAIC,SAAD,CAAgD,CAClF,GAAMC,SAAQ,CAAGR,OAAO,CAAC,iBAAM,IAAIS,SAAQ,CAACC,KAAb,CAAmBH,SAAnB,CAAP,GAAsC,EAAtC,CAAxB,CAEAR,SAAS,CAAC,UAAM,CACd,GAAIY,QAAQ,CAACC,EAAT,GAAgB,KAApB,CAA2B,OAC3BH,QAAQ,CAACI,MAAT,CAAgBL,QAAhB,CAA0B,CACxBM,OAAO,CAAEP,SADe,CAExBQ,QAAQ,CAAE,GAFc,CAGxBC,eAAe,CAAE,IAHO,CAA1B,EAIGC,KAJH,GAKD,CAPQ,CAON,CAACV,SAAD,CAPM,CAAT,CASA,cAAuBN,QAAQ,EAA/B,CAAQiB,gCAER,MAAOlB,QAAO,CACZ,iBAAM,CACJW,QAAQ,CAACQ,MAAT,CAAgB,CACdC,OAAO,CAAE,CAAEb,SAAS,CAAEC,QAAb,CADK,CAEda,OAAO,CAAE,CACPC,WAAW,CAAEJ,UAAU,CAACX,SAAD,CAAV,CAAsBe,WAD5B,CAEPC,YAAY,CAAE,CACZC,KAAK,CAAEhB,QAAQ,CAACiB,WAAT,CAAqB,CAC1BvB,UAD0B,CAC1BA,UAD0B,CAE1BwB,WAAW,CAAEC,MAAM,CAACC,MAAP,CAAcV,UAAd,EAA0BW,GAA1B,CAA+BC,UAAD,0FAAOA,CAAC,CAACP,YAAT,0CAAOQ,gBAAgBP,KAAvB,+DAAgC,CAAhC,EAA9B,CAFa,CAArB,CADK,CAKZQ,MAAM,CAAExB,QAAQ,CAACiB,WAAT,CAAqB,CAC3BvB,UAD2B,CAC3BA,UAD2B,CAE3BwB,WAAW,CAAEC,MAAM,CAACC,MAAP,CAAcV,UAAd,EAA0BW,GAA1B,CAA+BC,UAAD,4FAAOA,CAAC,CAACP,YAAT,2CAAOU,iBAAgBD,MAAvB,+DAAiC,CAAjC,EAA9B,CAFc,CAArB,CALI,CAFP,CAYPE,aAAa,CAAE1B,QAAQ,CAACiB,WAAT,CAAqB,CAClCvB,UADkC,CAClCA,UADkC,CAElCwB,WAAW,CAAEC,MAAM,CAACC,MAAP,CAAcV,UAAd,EAA0BW,GAA1B,CAA+BC,UAAD,+CAAOA,CAAC,CAACI,aAAT,qDAA0B,CAA1B,EAA9B,CAFqB,CAArB,CAZR,CAgBPC,YAAY,CAAE3B,QAAQ,CAACiB,WAAT,CAAqB,CACjCvB,UADiC,CACjCA,UADiC,CAEjCwB,WAAW,CAAEC,MAAM,CAACC,MAAP,CAAcV,UAAd,EAA0BW,GAA1B,CAA+BC,UAAD,6CAAOA,CAAC,CAACK,YAAT,mDAAyB,CAAzB,EAA9B,CAFoB,CAArB,CAhBP,CAFK,CAuBdC,GAAG,CAAE,CACHC,SAAS,CAAGnB,UAAU,CAACX,SAAD,CAAX,CAA+B8B,SADvC,CAEHC,UAAU,CACR,4GAHC,CAvBS,CAAhB,CADI,CA8BJ3B,QAAQ,CAACQ,MAAT,CAAgB,CACdE,OAAO,CAAE,EADK,CAEde,GAAG,CAAE,EAFS,CAAhB,CA9BI,CADM,GAoCZ,CAAC7B,SAAD,CAAYW,UAAZ,CApCY,CAAd,CAsCD,CApDM","names":["useEffect","useMemo","useTheme","inputRange","Array","from","keys","useAnimatedElevation","elevation","animated","Animated","Value","Platform","OS","timing","toValue","duration","useNativeDriver","start","elevations","select","android","default","shadowColor","shadowOffset","width","interpolate","outputRange","Object","values","map","e","_e$shadowOffset","height","_e$shadowOffset2","shadowOpacity","shadowRadius","web","boxShadow","transition"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/@react-native-material/core/lib/module/hooks/use-animated-elevation.ts"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { Animated, Platform, StyleProp, ViewStyle } from 'react-native';\nimport { Elevation, useTheme } from '../base/ThemeContext';\n\nconst inputRange = Array.from(Array(25).keys());\n\nexport const useAnimatedElevation = (elevation: Elevation): StyleProp<ViewStyle> => {\n  const animated = useMemo(() => new Animated.Value(elevation), []);\n\n  useEffect(() => {\n    if (Platform.OS === 'web') return;\n    Animated.timing(animated, {\n      toValue: elevation,\n      duration: 200,\n      useNativeDriver: true,\n    }).start();\n  }, [elevation]);\n\n  const { elevations } = useTheme();\n\n  return useMemo(\n    () => [\n      Platform.select({\n        android: { elevation: animated },\n        default: {\n          shadowColor: elevations[elevation].shadowColor,\n          shadowOffset: {\n            width: animated.interpolate({\n              inputRange,\n              outputRange: Object.values(elevations).map((e) => e.shadowOffset?.width ?? 0),\n            }),\n            height: animated.interpolate({\n              inputRange,\n              outputRange: Object.values(elevations).map((e) => e.shadowOffset?.height ?? 0),\n            }),\n          },\n          shadowOpacity: animated.interpolate({\n            inputRange,\n            outputRange: Object.values(elevations).map((e) => e.shadowOpacity ?? 0),\n          }),\n          shadowRadius: animated.interpolate({\n            inputRange,\n            outputRange: Object.values(elevations).map((e) => e.shadowRadius ?? 0),\n          }),\n        },\n        web: {\n          boxShadow: (elevations[elevation] as any).boxShadow,\n          transition:\n            'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n        },\n      }),\n      Platform.select({\n        default: {},\n        web: {},\n      }),\n    ],\n    [elevation, elevations]\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}