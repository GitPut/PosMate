{"ast":null,"code":"export var Extrapolation=function(Extrapolation){Extrapolation[\"IDENTITY\"]=\"identity\";Extrapolation[\"CLAMP\"]=\"clamp\";Extrapolation[\"EXTEND\"]=\"extend\";return Extrapolation;}({});var _worklet_253979066048_init_data={code:\"function getVal(type,coef,val,leftEdgeOutput,rightEdgeOutput,x){const{Extrapolation}=this._closure;switch(type){case Extrapolation.IDENTITY:return x;case Extrapolation.CLAMP:if(coef*val<coef*leftEdgeOutput){return leftEdgeOutput;}return rightEdgeOutput;case Extrapolation.EXTEND:default:return val;}}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\"};var getVal=function(){var _f=function _f(type,coef,val,leftEdgeOutput,rightEdgeOutput,x){switch(type){case Extrapolation.IDENTITY:return x;case Extrapolation.CLAMP:if(coef*val<coef*leftEdgeOutput){return leftEdgeOutput;}return rightEdgeOutput;case Extrapolation.EXTEND:default:return val;}};_f._closure={Extrapolation:Extrapolation};_f.__initData=_worklet_253979066048_init_data;_f.__workletHash=253979066048;return _f;}();var _worklet_7660489596323_init_data={code:\"function isExtrapolate(value){const{Extrapolation}=this._closure;return value===Extrapolation.EXTEND||value===Extrapolation.CLAMP||value===Extrapolation.IDENTITY;}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\"};var isExtrapolate=function(){var _f=function _f(value){return value===Extrapolation.EXTEND||value===Extrapolation.CLAMP||value===Extrapolation.IDENTITY;};_f._closure={Extrapolation:Extrapolation};_f.__initData=_worklet_7660489596323_init_data;_f.__workletHash=7660489596323;return _f;}();var _worklet_7731786116229_init_data={code:\"function validateType(type){const{Extrapolation,isExtrapolate}=this._closure;const extrapolationConfig={extrapolateLeft:Extrapolation.EXTEND,extrapolateRight:Extrapolation.EXTEND};if(!type){return extrapolationConfig;}if(typeof type==='string'){if(!isExtrapolate(type)){throw new Error(\\\"Reanimated: not supported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n        interpolate(value, [inputRange], [outputRange], \\\\\\\"clamp\\\\\\\")\\\");}extrapolationConfig.extrapolateLeft=type;extrapolationConfig.extrapolateRight=type;return extrapolationConfig;}if(type.extrapolateLeft&&!isExtrapolate(type.extrapolateLeft)||type.extrapolateRight&&!isExtrapolate(type.extrapolateRight)){throw new Error(\\\"Reanimated: not supported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n      interpolate(value, [inputRange], [outputRange], {\\\\n        extrapolateLeft: Extrapolation.CLAMP,\\\\n        extrapolateRight: Extrapolation.IDENTITY\\\\n      }})\\\");}Object.assign(extrapolationConfig,type);return extrapolationConfig;}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\"};var validateType=function(){var _f=function _f(type){var extrapolationConfig={extrapolateLeft:Extrapolation.EXTEND,extrapolateRight:Extrapolation.EXTEND};if(!type){return extrapolationConfig;}if(typeof type==='string'){if(!isExtrapolate(type)){throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`);}extrapolationConfig.extrapolateLeft=type;extrapolationConfig.extrapolateRight=type;return extrapolationConfig;}if(type.extrapolateLeft&&!isExtrapolate(type.extrapolateLeft)||type.extrapolateRight&&!isExtrapolate(type.extrapolateRight)){throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`);}Object.assign(extrapolationConfig,type);return extrapolationConfig;};_f._closure={Extrapolation:Extrapolation,isExtrapolate:isExtrapolate};_f.__initData=_worklet_7731786116229_init_data;_f.__workletHash=7731786116229;return _f;}();var _worklet_2865520399363_init_data={code:\"function internalInterpolate(x,narrowedInput,extrapolationConfig){const{getVal}=this._closure;const{leftEdgeInput:leftEdgeInput,rightEdgeInput:rightEdgeInput,leftEdgeOutput:leftEdgeOutput,rightEdgeOutput:rightEdgeOutput}=narrowedInput;if(rightEdgeInput-leftEdgeInput===0)return leftEdgeOutput;const progress=(x-leftEdgeInput)/(rightEdgeInput-leftEdgeInput);const val=leftEdgeOutput+progress*(rightEdgeOutput-leftEdgeOutput);const coef=rightEdgeOutput>=leftEdgeOutput?1:-1;if(coef*val<coef*leftEdgeOutput){return getVal(extrapolationConfig.extrapolateLeft,coef,val,leftEdgeOutput,rightEdgeOutput,x);}else if(coef*val>coef*rightEdgeOutput){return getVal(extrapolationConfig.extrapolateRight,coef,val,leftEdgeOutput,rightEdgeOutput,x);}return val;}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\"};var internalInterpolate=function(){var _f=function _f(x,narrowedInput,extrapolationConfig){var leftEdgeInput=narrowedInput.leftEdgeInput,rightEdgeInput=narrowedInput.rightEdgeInput,leftEdgeOutput=narrowedInput.leftEdgeOutput,rightEdgeOutput=narrowedInput.rightEdgeOutput;if(rightEdgeInput-leftEdgeInput===0)return leftEdgeOutput;var progress=(x-leftEdgeInput)/(rightEdgeInput-leftEdgeInput);var val=leftEdgeOutput+progress*(rightEdgeOutput-leftEdgeOutput);var coef=rightEdgeOutput>=leftEdgeOutput?1:-1;if(coef*val<coef*leftEdgeOutput){return getVal(extrapolationConfig.extrapolateLeft,coef,val,leftEdgeOutput,rightEdgeOutput,x);}else if(coef*val>coef*rightEdgeOutput){return getVal(extrapolationConfig.extrapolateRight,coef,val,leftEdgeOutput,rightEdgeOutput,x);}return val;};_f._closure={getVal:getVal};_f.__initData=_worklet_2865520399363_init_data;_f.__workletHash=2865520399363;return _f;}();var _worklet_7969089497628_init_data={code:\"function interpolate(x,input,output,type){const{validateType,internalInterpolate}=this._closure;if(input.length<2||output.length<2){throw Error('Interpolation input and output should contain at least two values.');}const extrapolationConfig=validateType(type);const length=input.length;const narrowedInput={leftEdgeInput:input[0],rightEdgeInput:input[1],leftEdgeOutput:output[0],rightEdgeOutput:output[1]};if(length>2){if(x>input[length-1]){narrowedInput.leftEdgeInput=input[length-2];narrowedInput.rightEdgeInput=input[length-1];narrowedInput.leftEdgeOutput=output[length-2];narrowedInput.rightEdgeOutput=output[length-1];}else{for(let i=1;i<length;++i){if(x<=input[i]){narrowedInput.leftEdgeInput=input[i-1];narrowedInput.rightEdgeInput=input[i];narrowedInput.leftEdgeOutput=output[i-1];narrowedInput.rightEdgeOutput=output[i];break;}}}}return internalInterpolate(x,narrowedInput,extrapolationConfig);}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\"};export var interpolate=function(){var _f=function _f(x,input,output,type){if(input.length<2||output.length<2){throw Error('Interpolation input and output should contain at least two values.');}var extrapolationConfig=validateType(type);var length=input.length;var narrowedInput={leftEdgeInput:input[0],rightEdgeInput:input[1],leftEdgeOutput:output[0],rightEdgeOutput:output[1]};if(length>2){if(x>input[length-1]){narrowedInput.leftEdgeInput=input[length-2];narrowedInput.rightEdgeInput=input[length-1];narrowedInput.leftEdgeOutput=output[length-2];narrowedInput.rightEdgeOutput=output[length-1];}else{for(var i=1;i<length;++i){if(x<=input[i]){narrowedInput.leftEdgeInput=input[i-1];narrowedInput.rightEdgeInput=input[i];narrowedInput.leftEdgeOutput=output[i-1];narrowedInput.rightEdgeOutput=output[i];break;}}}}return internalInterpolate(x,narrowedInput,extrapolationConfig);};_f._closure={validateType:validateType,internalInterpolate:internalInterpolate};_f.__initData=_worklet_7969089497628_init_data;_f.__workletHash=7969089497628;return _f;}();","map":{"version":3,"mappings":"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","names":["Extrapolation","getVal","type","coef","val","leftEdgeOutput","rightEdgeOutput","x","IDENTITY","CLAMP","EXTEND","isExtrapolate","value","validateType","extrapolationConfig","extrapolateLeft","extrapolateRight","Error","Object","assign","internalInterpolate","narrowedInput","leftEdgeInput","rightEdgeInput","progress","interpolate","input","output","length","i"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.ts"],"sourcesContent":["export enum Extrapolation {\n  IDENTITY = 'identity',\n  CLAMP = 'clamp',\n  EXTEND = 'extend',\n}\n\ninterface InterpolationNarrowedInput {\n  leftEdgeInput: number;\n  rightEdgeInput: number;\n  leftEdgeOutput: number;\n  rightEdgeOutput: number;\n}\n\nexport interface ExtrapolationConfig {\n  extrapolateLeft?: Extrapolation | string;\n  extrapolateRight?: Extrapolation | string;\n}\n\ninterface RequiredExtrapolationConfig {\n  extrapolateLeft: Extrapolation;\n  extrapolateRight: Extrapolation;\n}\n\nexport type ExtrapolationType =\n  | ExtrapolationConfig\n  | Extrapolation\n  | string\n  | undefined;\n\nfunction getVal(\n  type: Extrapolation,\n  coef: number,\n  val: number,\n  leftEdgeOutput: number,\n  rightEdgeOutput: number,\n  x: number\n): number {\n  'worklet';\n\n  switch (type) {\n    case Extrapolation.IDENTITY:\n      return x;\n    case Extrapolation.CLAMP:\n      if (coef * val < coef * leftEdgeOutput) {\n        return leftEdgeOutput;\n      }\n      return rightEdgeOutput;\n    case Extrapolation.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value: string): value is Extrapolation {\n  'worklet';\n\n  return (\n    value === Extrapolation.EXTEND ||\n    value === Extrapolation.CLAMP ||\n    value === Extrapolation.IDENTITY\n  );\n}\n\n// validates extrapolations type\n// if type is correct, converts it to ExtrapolationConfig\nfunction validateType(type: ExtrapolationType): RequiredExtrapolationConfig {\n  'worklet';\n  // initialize extrapolationConfig with default extrapolation\n  const extrapolationConfig: RequiredExtrapolationConfig = {\n    extrapolateLeft: Extrapolation.EXTEND,\n    extrapolateRight: Extrapolation.EXTEND,\n  };\n\n  if (!type) {\n    return extrapolationConfig;\n  }\n\n  if (typeof type === 'string') {\n    if (!isExtrapolate(type)) {\n      throw new Error(\n        `Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`\n      );\n    }\n    extrapolationConfig.extrapolateLeft = type;\n    extrapolationConfig.extrapolateRight = type;\n    return extrapolationConfig;\n  }\n\n  // otherwise type is extrapolation config object\n  if (\n    (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft)) ||\n    (type.extrapolateRight && !isExtrapolate(type.extrapolateRight))\n  ) {\n    throw new Error(\n      `Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`\n    );\n  }\n\n  Object.assign(extrapolationConfig, type);\n  return extrapolationConfig;\n}\n\nfunction internalInterpolate(\n  x: number,\n  narrowedInput: InterpolationNarrowedInput,\n  extrapolationConfig: RequiredExtrapolationConfig\n) {\n  'worklet';\n  const { leftEdgeInput, rightEdgeInput, leftEdgeOutput, rightEdgeOutput } =\n    narrowedInput;\n  if (rightEdgeInput - leftEdgeInput === 0) return leftEdgeOutput;\n  const progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n  const val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n  const coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n\n  if (coef * val < coef * leftEdgeOutput) {\n    return getVal(\n      extrapolationConfig.extrapolateLeft,\n      coef,\n      val,\n      leftEdgeOutput,\n      rightEdgeOutput,\n      x\n    );\n  } else if (coef * val > coef * rightEdgeOutput) {\n    return getVal(\n      extrapolationConfig.extrapolateRight,\n      coef,\n      val,\n      leftEdgeOutput,\n      rightEdgeOutput,\n      x\n    );\n  }\n\n  return val;\n}\n\n// TODO: support default values in worklets:\n// e.g. function interpolate(x, input, output, type = Extrapolatation.CLAMP)\nexport function interpolate(\n  x: number,\n  input: readonly number[],\n  output: readonly number[],\n  type?: ExtrapolationType\n): number {\n  'worklet';\n  if (input.length < 2 || output.length < 2) {\n    throw Error(\n      'Interpolation input and output should contain at least two values.'\n    );\n  }\n\n  const extrapolationConfig = validateType(type);\n  const length = input.length;\n  const narrowedInput: InterpolationNarrowedInput = {\n    leftEdgeInput: input[0],\n    rightEdgeInput: input[1],\n    leftEdgeOutput: output[0],\n    rightEdgeOutput: output[1],\n  };\n  if (length > 2) {\n    if (x > input[length - 1]) {\n      narrowedInput.leftEdgeInput = input[length - 2];\n      narrowedInput.rightEdgeInput = input[length - 1];\n      narrowedInput.leftEdgeOutput = output[length - 2];\n      narrowedInput.rightEdgeOutput = output[length - 1];\n    } else {\n      for (let i = 1; i < length; ++i) {\n        if (x <= input[i]) {\n          narrowedInput.leftEdgeInput = input[i - 1];\n          narrowedInput.rightEdgeInput = input[i];\n          narrowedInput.leftEdgeOutput = output[i - 1];\n          narrowedInput.rightEdgeOutput = output[i];\n          break;\n        }\n      }\n    }\n  }\n\n  return internalInterpolate(x, narrowedInput, extrapolationConfig);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}