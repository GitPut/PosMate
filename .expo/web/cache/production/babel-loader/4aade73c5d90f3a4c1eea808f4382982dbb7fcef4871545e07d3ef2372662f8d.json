{"ast":null,"code":"import'expo/build/Expo.fx';import*as React from'react';import AppRegistry from\"react-native-web/dist/exports/AppRegistry\";import Platform from\"react-native-web/dist/exports/Platform\";import{createRoot}from\"./createRoot\";export default function registerRootComponent(component){var qualifiedComponent=component;if(process.env.NODE_ENV!=='production'){var _require=require(\"./withDevTools\"),withDevTools=_require.withDevTools;qualifiedComponent=withDevTools(component);}if(Platform.OS!=='web'){AppRegistry.registerComponent('main',function(){return qualifiedComponent;});}else if(typeof document!=='undefined'){var tag=document.getElementById('root');if(!tag){tag=document.getElementById('main');if(process.env.NODE_ENV!=='production'){if(tag){console.warn('Mounting the root React component to an HTML element with id \"main\" is deprecated. Use id \"root\" instead.');}}}if(!tag){throw new Error('Required HTML element with id \"root\" was not found in the document HTML. This is required for mounting the root React component.');}var rootTag=createRoot(tag);rootTag.render(React.createElement(qualifiedComponent));}}","map":{"version":3,"mappings":"AAAA,MAAO,oBAAoB,CAE3B,MAAO,GAAKA,MAAK,KAAM,OAAO,CAAC,gIAG/B,OAASC,UAAU,oBAanB,cAAc,SAAUC,sBAAqB,CAC3CC,SAAiC,EAEjC,GAAIC,mBAAkB,CAAGD,SAAS,CAElC,GAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACzC,aAAyBC,OAAO,kBAAqD,CAA7EC,YAAY,UAAZA,YAAY,CACpBL,kBAAkB,CAAGK,YAAY,CAACN,SAAS,CAAC,EAG9C,GAAIO,QAAQ,CAACC,EAAE,GAAK,KAAK,CAAE,CACzBC,WAAW,CAACC,iBAAiB,CAAC,MAAM,CAAE,iBAAMT,mBAAkB,GAAC,EAChE,IAAM,IAEL,MAAOU,SAAQ,GAAK,WAAW,CAC/B,CACA,GAAIC,IAAG,CAAGD,QAAQ,CAACE,cAAc,CAAC,MAAM,CAAC,CAEzC,GAAI,CAACD,GAAG,CAAE,CACRA,GAAG,CAAGD,QAAQ,CAACE,cAAc,CAAC,MAAM,CAAC,CACrC,GAAIX,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CAEzC,GAAIQ,GAAG,CAAE,CACPE,OAAO,CAACC,IAAI,CACV,2GAA2G,CAC5G,IAKP,GAAI,CAACH,GAAG,CAAE,CACR,KAAM,IAAII,MAAK,CACb,kIAAkI,CACnI,EAGH,GAAMC,QAAO,CAAGnB,UAAU,CAACc,GAAG,CAAC,CAC/BK,OAAO,CAACC,MAAM,CAACrB,KAAK,CAACsB,aAAa,CAAClB,kBAAkB,CAAC,CAAC,EAE3D","names":["React","createRoot","registerRootComponent","component","qualifiedComponent","process","env","NODE_ENV","require","withDevTools","Platform","OS","AppRegistry","registerComponent","document","tag","getElementById","console","warn","Error","rootTag","render","createElement"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/expo/src/launch/registerRootComponent.tsx"],"sourcesContent":["import 'expo/build/Expo.fx';\n\nimport * as React from 'react';\nimport { AppRegistry, Platform } from 'react-native';\n\nimport { createRoot } from './createRoot';\n\ntype InitialProps = {\n  exp: {\n    notification?: any;\n    manifestString?: string;\n    [key: string]: any;\n  };\n  shell?: boolean;\n  shellManifestUrl?: string;\n  [key: string]: any;\n};\n\nexport default function registerRootComponent<P extends InitialProps>(\n  component: React.ComponentType<P>\n): void {\n  let qualifiedComponent = component;\n\n  if (process.env.NODE_ENV !== 'production') {\n    const { withDevTools } = require('./withDevTools') as typeof import('./withDevTools');\n    qualifiedComponent = withDevTools(component);\n  }\n\n  if (Platform.OS !== 'web') {\n    AppRegistry.registerComponent('main', () => qualifiedComponent);\n  } else if (\n    // Skip querying the DOM if we're in a Node.js environment.\n    typeof document !== 'undefined'\n  ) {\n    let tag = document.getElementById('root');\n\n    if (!tag) {\n      tag = document.getElementById('main');\n      if (process.env.NODE_ENV !== 'production') {\n        // This block will be removed in production\n        if (tag) {\n          console.warn(\n            'Mounting the root React component to an HTML element with id \"main\" is deprecated. Use id \"root\" instead.'\n          );\n        }\n      }\n    }\n\n    if (!tag) {\n      throw new Error(\n        'Required HTML element with id \"root\" was not found in the document HTML. This is required for mounting the root React component.'\n      );\n    }\n\n    const rootTag = createRoot(tag);\n    rootTag.render(React.createElement(qualifiedComponent));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}