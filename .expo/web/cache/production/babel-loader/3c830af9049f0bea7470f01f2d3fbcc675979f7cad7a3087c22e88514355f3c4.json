{"ast":null,"code":"import{useRef}from'react';import{useSharedValue}from\"./useSharedValue\";import{getTag}from\"../NativeMethods\";import{getShadowNodeWrapperFromHostInstance}from\"../fabricUtils\";import{makeShareableCloneRecursive,registerShareableMapping}from\"../shareables\";function getShareableShadowNodeFromComponent(component){return getShadowNodeWrapperFromHostInstance(component);}function getComponentOrScrollableRef(component){if(global._IS_FABRIC&&component.getNativeScrollRef){return component.getNativeScrollRef();}else if(!global._IS_FABRIC&&component.getScrollableNode){return component.getScrollableNode();}return component;}var getTagValueFunction=global._IS_FABRIC?getShareableShadowNodeFromComponent:getTag;var _worklet_14499715267282_init_data={code:\"function anonymous(){const{tag}=this._closure;return function(){return tag.value;};}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedRef.js\"};export function useAnimatedRef(){var tag=useSharedValue(-1);var ref=useRef();if(!ref.current){var fun=function fun(component){if(component){tag.value=getTagValueFunction(getComponentOrScrollableRef(component));fun.current=component;}return tag.value;};fun.current=null;var remoteRef=makeShareableCloneRecursive({__init:function(){var _f=function _f(){return function(){return tag.value;};};_f._closure={tag:tag};_f.__initData=_worklet_14499715267282_init_data;_f.__workletHash=14499715267282;return _f;}()});registerShareableMapping(fun,remoteRef);ref.current=fun;}return ref.current;}","map":{"version":3,"mappings":"AAAA,OAAoBA,MAAM,KAAQ,OAAO,CACzC,OAASC,cAAc,wBAGvB,OAASC,MAAM,wBACf,OAASC,oCAAoC,sBAC7C,OACEC,2BAA2B,CAC3BC,wBAAwB,qBAQ1B,QAASC,oCAAmCA,CAC1CC,SAAuB,CACJ,CACnB,MAAOJ,qCAAoC,CAACI,SAAS,CAAC,CACxD,CAEA,QAASC,4BAA2BA,CAACD,SAAuB,CAAgB,CAC1E,GAAIE,MAAM,CAACC,UAAU,EAAIH,SAAS,CAACI,kBAAkB,CAAE,CACrD,MAAOJ,UAAS,CAACI,kBAAkB,EAAE,CACvC,CAAC,IAAM,IAAI,CAACF,MAAM,CAACC,UAAU,EAAIH,SAAS,CAACK,iBAAiB,CAAE,CAC5D,MAAOL,UAAS,CAACK,iBAAiB,EAAE,CACtC,CACA,MAAOL,UAAS,CAClB,CAEA,GAAMM,oBAAmB,CAAGJ,MAAM,CAACC,UAAU,CACzCJ,mCAAmC,CACnCJ,MAAM,sQAEV,MAAO,SAASY,eAAcA,EAAiD,CAC7E,GAAMC,IAAG,CAAGd,cAAc,CAAoC,CAAC,CAAC,CAAC,CACjE,GAAMe,IAAG,CAAGhB,MAAM,EAAwB,CAE1C,GAAI,CAACgB,GAAG,CAACC,OAAO,CAAE,CAChB,GAAMC,IAAyB,CAA2BX,QAApDW,IAAyB,CAA2BX,SAAS,CAAK,CAEtE,GAAIA,SAAS,CAAE,CACbQ,GAAG,CAACI,KAAK,CAAGN,mBAAmB,CAACL,2BAA2B,CAACD,SAAS,CAAC,CAAC,CACvEW,GAAG,CAACD,OAAO,CAAGV,SAAS,CACzB,CACA,MAAOQ,IAAG,CAACI,KAAK,CAClB,CAAE,CAEFD,GAAG,CAACD,OAAO,CAAG,IAAI,CAElB,GAAMG,UAAS,CAAGhB,2BAA2B,CAAC,CAC5CiB,MAAM,gCAAQ,CAEZ,MAAO,kBAAMN,IAAG,CAACI,KAAK,GACxB,mBAtDGlB,kGAuDL,CAAC,CAAC,CACFI,wBAAwB,CAACa,GAAG,CAAEE,SAAS,CAAC,CACxCJ,GAAG,CAACC,OAAO,CAAGC,GAAG,CACnB,CAEA,MAAOF,IAAG,CAACC,OAAO,CACpB","names":["useRef","useSharedValue","getTag","getShadowNodeWrapperFromHostInstance","makeShareableCloneRecursive","registerShareableMapping","getShareableShadowNodeFromComponent","component","getComponentOrScrollableRef","global","_IS_FABRIC","getNativeScrollRef","getScrollableNode","getTagValueFunction","useAnimatedRef","tag","ref","current","fun","value","remoteRef","__init"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedRef.ts"],"sourcesContent":["import { Component, useRef } from 'react';\nimport { useSharedValue } from './useSharedValue';\nimport { RefObjectFunction } from './commonTypes';\nimport { ShadowNodeWrapper } from '../commonTypes';\nimport { getTag } from '../NativeMethods';\nimport { getShadowNodeWrapperFromHostInstance } from '../fabricUtils';\nimport {\n  makeShareableCloneRecursive,\n  registerShareableMapping,\n} from '../shareables';\n\ninterface ComponentRef extends Component {\n  getNativeScrollRef?: () => ComponentRef;\n  getScrollableNode?: () => ComponentRef;\n}\n\nfunction getShareableShadowNodeFromComponent(\n  component: ComponentRef\n): ShadowNodeWrapper {\n  return getShadowNodeWrapperFromHostInstance(component);\n}\n\nfunction getComponentOrScrollableRef(component: ComponentRef): ComponentRef {\n  if (global._IS_FABRIC && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!global._IS_FABRIC && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\n\nconst getTagValueFunction = global._IS_FABRIC\n  ? getShareableShadowNodeFromComponent\n  : getTag;\n\nexport function useAnimatedRef<T extends ComponentRef>(): RefObjectFunction<T> {\n  const tag = useSharedValue<number | ShadowNodeWrapper | null>(-1);\n  const ref = useRef<RefObjectFunction<T>>();\n\n  if (!ref.current) {\n    const fun: RefObjectFunction<T> = <RefObjectFunction<T>>((component) => {\n      // enters when ref is set by attaching to a component\n      if (component) {\n        tag.value = getTagValueFunction(getComponentOrScrollableRef(component));\n        fun.current = component;\n      }\n      return tag.value;\n    });\n\n    fun.current = null;\n\n    const remoteRef = makeShareableCloneRecursive({\n      __init: () => {\n        'worklet';\n        return () => tag.value;\n      },\n    });\n    registerShareableMapping(fun, remoteRef);\n    ref.current = fun;\n  }\n\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}