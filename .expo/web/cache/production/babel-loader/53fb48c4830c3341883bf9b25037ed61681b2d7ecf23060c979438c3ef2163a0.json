{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{createContext,useContext,useEffect,useMemo,useState}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";export var PortalContext=createContext(null);export var usePortalContext=function usePortalContext(){var portal=useContext(PortalContext);if(!portal){throw new Error('usePortalContext must be used within a PortalContext');}return portal;};export var PortalProvider=function PortalProvider(_ref){var children=_ref.children;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),portals=_useState2[0],setPortals=_useState2[1];return React.createElement(PortalContext.Provider,{value:{portals:portals,setPortals:setPortals}},children);};export var Outlet=function Outlet(){var _usePortalContext=usePortalContext(),portals=_usePortalContext.portals;return React.createElement(React.Fragment,null,portals.map(function(_ref2){var key=_ref2.key,children=_ref2.children;return React.createElement(View,{key:key,pointerEvents:\"box-none\",style:StyleSheet.absoluteFill},children);}));};export var Portal=function Portal(_ref3){var key=_ref3.key,children=_ref3.children;var _usePortalContext2=usePortalContext(),setPortals=_usePortalContext2.setPortals;var _key=useMemo(function(){return key!==null&&key!==void 0?key:`${Date.now()+Math.random()}`;},[key]);useEffect(function(){setPortals(function(portals){return[].concat(_toConsumableArray(portals),[{key:_key,children:children}]);});return function(){setPortals(function(portals){return portals.filter(function(p){return p.key!==_key;});});};},[_key,setPortals,children]);return null;};","map":{"version":3,"mappings":"0IAAA,MAAOA,MAAP,EAAgBC,aAAhB,CAAyDC,UAAzD,CAAqEC,SAArE,CAAgFC,OAAhF,CAAyFC,QAAzF,KAAyG,OAAzG,uHAGA,MAAO,IAAMC,cAAa,CAAGL,aAAa,CAGhC,IAHgC,CAAnC,CAKP,MAAO,IAAMM,iBAAgB,CAAG,QAAnBA,iBAAgB,EAAS,CACpC,GAAMC,OAAM,CAAGN,UAAU,CAACI,aAAD,CAAzB,CACA,GAAI,CAACE,MAAL,CAAa,CACX,KAAM,IAAIC,MAAJ,CAAU,sDAAV,CAAN,CACD,CACD,MAAOD,OAAP,CACD,CANM,CAQP,MAAO,IAAME,eAAwB,CAAG,QAA3BA,eAAwB,CAAGC,KAAkB,IAAfC,UAAeD,KAAfC,SACzC,cAA8BP,QAAQ,CAAgB,EAAhB,CAAtC,wCAAOQ,OAAD,eAAUC,UAAV,eAEN,MAAOd,qBAACM,aAAD,CAAeS,QAAf,EAAwBC,KAAK,CAAE,CAAEH,OAAF,CAAEA,OAAF,CAAWC,qBAAX,CAA/B,EAAyDF,QAAzD,CAAP,CACD,CAJM,CAMP,MAAO,IAAMK,OAAgB,CAAG,QAAnBA,OAAgB,EAAS,CACpC,sBAAoBV,gBAAgB,EAApC,CAAQM,kCAER,MACEb,qBAACA,KAAD,CAAOkB,QAAP,MACGL,OAAO,CAACM,GAAR,CAAY,mBAAGC,IAAF,CAADC,MAAGD,GAAF,CAAOR,SAARS,MAAQT,SAAR,MACXZ,qBAACsB,IAAD,EAAMF,GAAG,CAAEA,GAAX,CAAgBG,aAAa,CAAC,UAA9B,CAAyCC,KAAK,CAAEC,UAAU,CAACC,YAA3D,EACGd,QADH,CADW,EAAZ,CADH,CADF,CASD,CAZM,CAoBP,MAAO,IAAMe,OAA6B,CAAG,QAAhCA,OAA6B,CAAGC,MAAuB,IAApBR,IAAF,CAAsBQ,MAApBR,GAAF,CAAOR,SAAegB,MAAfhB,SACnD,uBAAuBL,gBAAgB,EAAvC,CAAQO,yCAER,GAAMe,KAAI,CAAGzB,OAAO,CAAC,iBAAMgB,IAAN,SAAMA,GAAN,UAAMA,GAAN,CAAc,GAAEU,IAAI,CAACC,GAAL,GAAaC,IAAI,CAACC,MAAL,EAAc,EAA5C,GAA+C,CAACb,GAAD,CAA/C,CAApB,CAEAjB,SAAS,CAAC,UAAM,CACdW,UAAU,CAAED,gBAAD,qCAAiBA,OAAJ,GAAa,CAAEO,GAAG,CAAES,IAAP,CAAajB,iBAAb,CAAb,IAAd,CAAV,CAEA,MAAO,WAAM,CACXE,UAAU,CAAED,gBAAD,QAAaA,QAAO,CAACqB,MAAR,CAAgBC,UAAD,QAAOA,EAAC,CAACf,GAAF,GAAUS,IAAhC,GAAd,GAAV,CACD,CAFD,CAGD,CANQ,CAMN,CAACA,IAAD,CAAOf,UAAP,CAAmBF,QAAnB,CANM,CAAT,CAQA,MAAO,KAAP,CACD,CAdM","names":["React","createContext","useContext","useEffect","useMemo","useState","PortalContext","usePortalContext","portal","Error","PortalProvider","_ref","children","portals","setPortals","Provider","value","Outlet","Fragment","map","key","_ref2","View","pointerEvents","style","StyleSheet","absoluteFill","Portal","_ref3","_key","Date","now","Math","random","filter","p"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/@react-native-material/core/lib/module/base/PortalContext.tsx"],"sourcesContent":["import React, { createContext, Dispatch, SetStateAction, useContext, useEffect, useMemo, useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nexport const PortalContext = createContext<{\n  portals: PortalProps[];\n  setPortals: Dispatch<SetStateAction<PortalProps[]>>;\n} | null>(null);\n\nexport const usePortalContext = () => {\n  const portal = useContext(PortalContext);\n  if (!portal) {\n    throw new Error('usePortalContext must be used within a PortalContext');\n  }\n  return portal;\n};\n\nexport const PortalProvider: React.FC = ({ children }) => {\n  const [portals, setPortals] = useState<PortalProps[]>([]);\n\n  return <PortalContext.Provider value={{ portals, setPortals }}>{children}</PortalContext.Provider>;\n};\n\nexport const Outlet: React.FC = () => {\n  const { portals } = usePortalContext();\n\n  return (\n    <React.Fragment>\n      {portals.map(({ key, children }) => (\n        <View key={key} pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n          {children}\n        </View>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport interface PortalProps {\n  key?: React.Key;\n\n  children?: React.ReactNode;\n}\n\nexport const Portal: React.FC<PortalProps> = ({ key, children }) => {\n  const { setPortals } = usePortalContext();\n\n  const _key = useMemo(() => key ?? `${Date.now() + Math.random()}`, [key]);\n\n  useEffect(() => {\n    setPortals((portals) => [...portals, { key: _key, children }]);\n\n    return () => {\n      setPortals((portals) => portals.filter((p) => p.key !== _key));\n    };\n  }, [_key, setPortals, children]);\n\n  return null;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}