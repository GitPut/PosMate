{"ast":null,"code":"import{useNavigation,useRoute}from'@react-navigation/core';import*as React from'react';function getScrollableNode(ref){if(ref.current==null){return null;}if('scrollToTop'in ref.current||'scrollTo'in ref.current||'scrollToOffset'in ref.current||'scrollResponderScrollTo'in ref.current){return ref.current;}else if('getScrollResponder'in ref.current){return ref.current.getScrollResponder();}else if('getNode'in ref.current){return ref.current.getNode();}else{return ref.current;}}export default function useScrollToTop(ref){var navigation=useNavigation();var route=useRoute();React.useEffect(function(){var tabNavigations=[];var currentNavigation=navigation;while(currentNavigation){if(currentNavigation.getState().type==='tab'){tabNavigations.push(currentNavigation);}currentNavigation=currentNavigation.getParent();}if(tabNavigations.length===0){return;}var unsubscribers=tabNavigations.map(function(tab){return tab.addListener('tabPress',function(e){var isFocused=navigation.isFocused();var isFirst=tabNavigations.includes(navigation)||navigation.getState().routes[0].key===route.key;requestAnimationFrame(function(){var scrollable=getScrollableNode(ref);if(isFocused&&isFirst&&scrollable&&!e.defaultPrevented){if('scrollToTop'in scrollable){scrollable.scrollToTop();}else if('scrollTo'in scrollable){scrollable.scrollTo({y:0,animated:true});}else if('scrollToOffset'in scrollable){scrollable.scrollToOffset({offset:0,animated:true});}else if('scrollResponderScrollTo'in scrollable){scrollable.scrollResponderScrollTo({y:0,animated:true});}}});});});return function(){unsubscribers.forEach(function(unsubscribe){return unsubscribe();});};},[navigation,ref,route.key]);}","map":{"version":3,"mappings":"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","names":["useNavigation","useRoute","React","getScrollableNode","ref","current","getScrollResponder","getNode","useScrollToTop","navigation","route","useEffect","tabNavigations","currentNavigation","getState","type","push","getParent","length","unsubscribers","map","tab","addListener","e","isFocused","isFirst","includes","routes","key","requestAnimationFrame","scrollable","defaultPrevented","scrollToTop","scrollTo","y","animated","scrollToOffset","offset","scrollResponderScrollTo","forEach","unsubscribe"],"sources":["useScrollToTop.tsx"],"sourcesContent":["import { EventArg, NavigationProp, useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\ntype ScrollOptions = { x?: number; y?: number; animated?: boolean };\n\ntype ScrollableView =\n  | { scrollToTop(): void }\n  | { scrollTo(options: ScrollOptions): void }\n  | { scrollToOffset(options: { offset?: number; animated?: boolean }): void }\n  | { scrollResponderScrollTo(options: ScrollOptions): void };\n\ntype ScrollableWrapper =\n  | { getScrollResponder(): React.ReactNode }\n  | { getNode(): ScrollableView }\n  | ScrollableView;\n\nfunction getScrollableNode(ref: React.RefObject<ScrollableWrapper>) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if (\n    'scrollToTop' in ref.current ||\n    'scrollTo' in ref.current ||\n    'scrollToOffset' in ref.current ||\n    'scrollResponderScrollTo' in ref.current\n  ) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(\n  ref: React.RefObject<ScrollableWrapper>\n) {\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  React.useEffect(() => {\n    let tabNavigations: NavigationProp<ReactNavigation.RootParamList>[] = [];\n    let currentNavigation = navigation;\n\n    // If the screen is nested inside multiple tab navigators, we should scroll to top for any of them\n    // So we need to find all the parent tab navigators and add the listeners there\n    while (currentNavigation) {\n      if (currentNavigation.getState().type === 'tab') {\n        tabNavigations.push(currentNavigation);\n      }\n\n      currentNavigation = currentNavigation.getParent();\n    }\n\n    if (tabNavigations.length === 0) {\n      return;\n    }\n\n    const unsubscribers = tabNavigations.map((tab) => {\n      return tab.addListener(\n        // We don't wanna import tab types here to avoid extra deps\n        // in addition, there are multiple tab implementations\n        // @ts-expect-error\n        'tabPress',\n        (e: EventArg<'tabPress', true>) => {\n          // We should scroll to top only when the screen is focused\n          const isFocused = navigation.isFocused();\n\n          // In a nested stack navigator, tab press resets the stack to first screen\n          // So we should scroll to top only when we are on first screen\n          const isFirst =\n            tabNavigations.includes(navigation) ||\n            navigation.getState().routes[0].key === route.key;\n\n          // Run the operation in the next frame so we're sure all listeners have been run\n          // This is necessary to know if preventDefault() has been called\n          requestAnimationFrame(() => {\n            const scrollable = getScrollableNode(ref) as ScrollableWrapper;\n\n            if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n              if ('scrollToTop' in scrollable) {\n                scrollable.scrollToTop();\n              } else if ('scrollTo' in scrollable) {\n                scrollable.scrollTo({ y: 0, animated: true });\n              } else if ('scrollToOffset' in scrollable) {\n                scrollable.scrollToOffset({ offset: 0, animated: true });\n              } else if ('scrollResponderScrollTo' in scrollable) {\n                scrollable.scrollResponderScrollTo({ y: 0, animated: true });\n              }\n            }\n          });\n        }\n      );\n    });\n\n    return () => {\n      unsubscribers.forEach((unsubscribe) => unsubscribe());\n    };\n  }, [navigation, ref, route.key]);\n}\n"]},"metadata":{},"sourceType":"module"}