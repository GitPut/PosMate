{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"icon\",\"color\",\"style\",\"contentContainerStyle\",\"pressEffect\",\"pressEffectColor\",\"onPress\",\"onPressIn\",\"onPressOut\",\"onLongPress\",\"onBlur\",\"onFocus\",\"onMouseEnter\",\"onMouseLeave\",\"delayLongPress\",\"disabled\",\"hitSlop\",\"pressRetentionOffset\",\"android_disableSound\",\"android_ripple\",\"testOnly_pressed\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Pressable from\"./Pressable\";import{usePaletteColor}from\"./hooks/use-palette-color\";var styles=StyleSheet.create({container:{width:48,height:48,borderRadius:48/2,overflow:'hidden'},contentContainer:{justifyContent:'center',alignItems:'center'}});var IconButton=function IconButton(_ref){var icon=_ref.icon,_ref$color=_ref.color,color=_ref$color===void 0?'on-background':_ref$color,style=_ref.style,contentContainerStyle=_ref.contentContainerStyle,pressEffect=_ref.pressEffect,pressEffectColor=_ref.pressEffectColor,onPress=_ref.onPress,onPressIn=_ref.onPressIn,onPressOut=_ref.onPressOut,onLongPress=_ref.onLongPress,onBlur=_ref.onBlur,onFocus=_ref.onFocus,onMouseEnter=_ref.onMouseEnter,onMouseLeave=_ref.onMouseLeave,delayLongPress=_ref.delayLongPress,disabled=_ref.disabled,hitSlop=_ref.hitSlop,pressRetentionOffset=_ref.pressRetentionOffset,android_disableSound=_ref.android_disableSound,android_ripple=_ref.android_ripple,testOnly_pressed=_ref.testOnly_pressed,rest=_objectWithoutProperties(_ref,_excluded);var palette=usePaletteColor(color);return React.createElement(View,_extends({style:[styles.container,style]},rest),React.createElement(Pressable,{style:[StyleSheet.absoluteFill,styles.contentContainer,contentContainerStyle],pressEffect:pressEffect,pressEffectColor:pressEffectColor!==null&&pressEffectColor!==void 0?pressEffectColor:palette.main,onPress:onPress,onPressIn:onPressIn,onPressOut:onPressOut,onLongPress:onLongPress,onBlur:onBlur,onFocus:onFocus,onMouseEnter:onMouseEnter,onMouseLeave:onMouseLeave,delayLongPress:delayLongPress,disabled:disabled,hitSlop:hitSlop,pressRetentionOffset:pressRetentionOffset,android_disableSound:android_disableSound,android_ripple:android_ripple,testOnly_pressed:testOnly_pressed},icon?typeof icon==='function'?icon({color:palette.main,size:24}):icon:null));};export default IconButton;","map":{"version":3,"mappings":"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","names":["React","Pressable","usePaletteColor","styles","StyleSheet","create","container","width","height","borderRadius","overflow","contentContainer","justifyContent","alignItems","IconButton","_ref","icon","color","style","contentContainerStyle","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","palette","View","absoluteFill","main","size"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/@react-native-material/core/lib/module/IconButton.tsx"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\nimport Pressable, { PressableProps } from './Pressable';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\n\nexport interface IconButtonProps extends Omit<ViewProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The element to render as the icon.\n   */\n  icon?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The color of the icon and the press effect.\n   *\n   * @default \"on-background\"\n   */\n  color?: Color;\n\n  /**\n   * The style of the icon's container view.\n   */\n  contentContainerStyle?: PressableProps['style'];\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 48,\n    height: 48,\n    borderRadius: 48 / 2,\n    overflow: 'hidden',\n  },\n  contentContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nconst IconButton: React.FC<IconButtonProps> = ({\n  icon,\n  color = 'on-background',\n  style,\n  contentContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const palette = usePaletteColor(color);\n  return (\n    <View style={[styles.container, style]} {...rest}>\n      <Pressable\n        style={[StyleSheet.absoluteFill, styles.contentContainer, contentContainerStyle]}\n        pressEffect={pressEffect}\n        pressEffectColor={pressEffectColor ?? palette.main}\n        onPress={onPress}\n        onPressIn={onPressIn}\n        onPressOut={onPressOut}\n        onLongPress={onLongPress}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        delayLongPress={delayLongPress}\n        disabled={disabled}\n        hitSlop={hitSlop}\n        pressRetentionOffset={pressRetentionOffset}\n        android_disableSound={android_disableSound}\n        android_ripple={android_ripple}\n        testOnly_pressed={testOnly_pressed}\n      >\n        {icon ? (typeof icon === 'function' ? icon({ color: palette.main, size: 24 }) : icon) : null}\n      </Pressable>\n    </View>\n  );\n};\n\nexport default IconButton;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}