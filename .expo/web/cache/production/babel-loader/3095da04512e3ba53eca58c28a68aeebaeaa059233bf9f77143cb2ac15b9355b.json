{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useEffect,useMemo,useState}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Easing from\"react-native-web/dist/exports/Easing\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import{Portal}from\"./base/PortalContext\";import Surface from\"./Surface\";var Dialog=function Dialog(_ref){var _ref$visible=_ref.visible,visible=_ref$visible===void 0?false:_ref$visible,onDismiss=_ref.onDismiss,children=_ref.children;var _useState=useState(visible),_useState2=_slicedToArray(_useState,2),portalVisible=_useState2[0],setPortalVisible=_useState2[1];var animatedValue=useMemo(function(){return new Animated.Value(visible?1:0);},[]);useEffect(function(){if(visible)setPortalVisible(true);Animated.timing(animatedValue,{toValue:visible?1:0,duration:225,easing:Easing.out(Easing.cubic),useNativeDriver:Platform.OS!=='android'}).start(function(){if(!visible)setPortalVisible(false);});},[visible]);if(!portalVisible)return null;return React.createElement(Portal,null,React.createElement(TouchableWithoutFeedback,{onPress:onDismiss},React.createElement(Animated.View,{style:[StyleSheet.absoluteFill,styles.backdrop,{opacity:animatedValue}]})),React.createElement(Animated.View,{style:[StyleSheet.absoluteFill,styles.container,{opacity:animatedValue}],pointerEvents:\"box-none\",needsOffscreenAlphaCompositing:Platform.OS==='android'},React.createElement(Surface,{category:\"medium\",elevation:24,style:[styles.surface]},children)));};var styles=StyleSheet.create({backdrop:{backgroundColor:'rgba(0,0,0,.5)'},container:{justifyContent:'center',alignItems:'center'},surface:{width:280,marginHorizontal:40}});export default Dialog;","map":{"version":3,"mappings":"iEAAA,MAAOA,MAAP,EAAgBC,SAAhB,CAA2BC,OAA3B,CAAoCC,QAApC,KAAoD,OAApD,kVAEA,OAASC,MAAT,4BACA,MAAOC,QAAP,iBAQA,GAAMC,OAA6B,CAAG,QAAhCA,OAA6B,CAAGC,KAA8C,uBAA3CC,OAAO,CAAPA,OAAO,uBAAG,KAAZ,cAAmBC,SAAnB,CAA6CF,KAA1BE,SAAnB,CAA8BC,SAAeH,KAAfG,SACnE,cAA0CP,QAAQ,CAACK,OAAD,CAAlD,wCAAOG,aAAD,eAAgBC,gBAAhB,eAEN,GAAMC,cAAa,CAAGX,OAAO,CAAC,iBAAM,IAAIY,SAAQ,CAACC,KAAb,CAAmBP,OAAO,CAAG,CAAH,CAAO,CAAjC,CAAP,GAA4C,EAA5C,CAA7B,CAEAP,SAAS,CAAC,UAAM,CACd,GAAIO,OAAJ,CAAaI,gBAAgB,CAAC,IAAD,CAAhB,CAEbE,QAAQ,CAACE,MAAT,CAAgBH,aAAhB,CAA+B,CAC7BI,OAAO,CAAET,OAAO,CAAG,CAAH,CAAO,CADM,CAE7BU,QAAQ,CAAE,GAFmB,CAG7BC,MAAM,CAAEC,MAAM,CAACC,GAAP,CAAWD,MAAM,CAACE,KAAlB,CAHqB,CAI7BC,eAAe,CAAEC,QAAQ,CAACC,EAAT,GAAgB,SAJJ,CAA/B,EAKGC,KALH,CAKS,UAAM,CACb,GAAI,CAAClB,OAAL,CAAcI,gBAAgB,CAAC,KAAD,CAAhB,CACf,CAPD,EAQD,CAXQ,CAWN,CAACJ,OAAD,CAXM,CAAT,CAaA,GAAI,CAACG,aAAL,CAAoB,MAAO,KAAP,CAEpB,MACEX,qBAACI,MAAD,MACEJ,oBAAC2B,wBAAD,EAA0BC,OAAO,CAAEnB,SAAnC,EACET,oBAACc,QAAD,CAAUe,IAAV,EAAeC,KAAK,CAAE,CAACC,UAAU,CAACC,YAAZ,CAA0BC,MAAM,CAACC,QAAjC,CAA2C,CAAEC,OAAO,CAAEtB,aAAX,CAA3C,CAAtB,EADF,CADF,CAIEb,oBAACc,QAAD,CAAUe,IAAV,EACEC,KAAK,CAAE,CAACC,UAAU,CAACC,YAAZ,CAA0BC,MAAM,CAACG,SAAjC,CAA4C,CAAED,OAAO,CAAEtB,aAAX,CAA5C,CADT,CAEEwB,aAAa,CAAC,UAFhB,CAGEC,8BAA8B,CAAEd,QAAQ,CAACC,EAAT,GAAgB,SAHlD,EAKEzB,oBAACK,OAAD,EAASkC,QAAQ,CAAC,QAAlB,CAA2BC,SAAS,CAAE,EAAtC,CAA0CV,KAAK,CAAE,CAACG,MAAM,CAACQ,OAAR,CAAjD,EACG/B,QADH,CALF,CAJF,CADF,CAgBD,CApCD,CAsCA,GAAMuB,OAAM,CAAGF,UAAU,CAACW,MAAX,CAAkB,CAC/BR,QAAQ,CAAE,CACRS,eAAe,CAAE,gBADT,CADqB,CAI/BP,SAAS,CAAE,CACTQ,cAAc,CAAE,QADP,CAETC,UAAU,CAAE,QAFH,CAJoB,CAQ/BJ,OAAO,CAAE,CACPK,KAAK,CAAE,GADA,CAEPC,gBAAgB,CAAE,EAFX,CARsB,CAAlB,CAAf,CAcA,cAAezC,OAAf","names":["React","useEffect","useMemo","useState","Portal","Surface","Dialog","_ref","visible","onDismiss","children","portalVisible","setPortalVisible","animatedValue","Animated","Value","timing","toValue","duration","easing","Easing","out","cubic","useNativeDriver","Platform","OS","start","TouchableWithoutFeedback","onPress","View","style","StyleSheet","absoluteFill","styles","backdrop","opacity","container","pointerEvents","needsOffscreenAlphaCompositing","category","elevation","surface","create","backgroundColor","justifyContent","alignItems","width","marginHorizontal"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/@react-native-material/core/lib/module/Dialog.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Animated, Easing, Platform, StyleSheet, TouchableWithoutFeedback } from 'react-native';\nimport { Portal } from './base/PortalContext';\nimport Surface from './Surface';\n\nexport interface DialogProps {\n  visible?: boolean;\n\n  onDismiss?: () => void;\n}\n\nconst Dialog: React.FC<DialogProps> = ({ visible = false, onDismiss, children }) => {\n  const [portalVisible, setPortalVisible] = useState(visible);\n\n  const animatedValue = useMemo(() => new Animated.Value(visible ? 1 : 0), []);\n\n  useEffect(() => {\n    if (visible) setPortalVisible(true);\n\n    Animated.timing(animatedValue, {\n      toValue: visible ? 1 : 0,\n      duration: 225,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: Platform.OS !== 'android',\n    }).start(() => {\n      if (!visible) setPortalVisible(false);\n    });\n  }, [visible]);\n\n  if (!portalVisible) return null;\n\n  return (\n    <Portal>\n      <TouchableWithoutFeedback onPress={onDismiss}>\n        <Animated.View style={[StyleSheet.absoluteFill, styles.backdrop, { opacity: animatedValue }]} />\n      </TouchableWithoutFeedback>\n      <Animated.View\n        style={[StyleSheet.absoluteFill, styles.container, { opacity: animatedValue }]}\n        pointerEvents=\"box-none\"\n        needsOffscreenAlphaCompositing={Platform.OS === 'android'}\n      >\n        <Surface category=\"medium\" elevation={24} style={[styles.surface]}>\n          {children}\n        </Surface>\n      </Animated.View>\n    </Portal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    backgroundColor: 'rgba(0,0,0,.5)',\n  },\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  surface: {\n    width: 280,\n    marginHorizontal: 40,\n  },\n});\n\nexport default Dialog;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}