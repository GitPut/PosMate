{"ast":null,"code":"var _worklet_7389715548968_init_data={code:\"function Bezier(mX1,mY1,mX2,mY2){const NEWTON_ITERATIONS=4;const NEWTON_MIN_SLOPE=0.001;const SUBDIVISION_PRECISION=0.0000001;const SUBDIVISION_MAX_ITERATIONS=10;const kSplineTableSize=11;const kSampleStepSize=1.0/(kSplineTableSize-1.0);function A(aA1,aA2){'worklet';return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){'worklet';return 3.0*aA2-6.0*aA1;}function C(aA1){'worklet';return 3.0*aA1;}function calcBezier(aT,aA1,aA2){'worklet';return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){'worklet';return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){'worklet';let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){'worklet';for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}const sampleValues=new Array(kSplineTableSize);for(let i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};var _worklet_7696928702327_init_data={code:\"function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};var _worklet_3169786778773_init_data={code:\"function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};var _worklet_6399610653367_init_data={code:\"function C(aA1){return 3.0*aA1;}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};var _worklet_4099476341799_init_data={code:\"function calcBezier(aT,aA1,aA2){const{A,B,C}=this._closure;return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};var _worklet_17279829632859_init_data={code:\"function getSlope(aT,aA1,aA2){const{A,B,C}=this._closure;return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};var _worklet_24450504940_init_data={code:\"function binarySubdivide(aX,aA,aB,mX1,mX2){const{SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS,calcBezier}=this._closure;let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};var _worklet_10330321609379_init_data={code:\"function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=this._closure;for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};var _worklet_3962143445177_init_data={code:\"function LinearEasing(x){return x;}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};var _worklet_11722914882367_init_data={code:\"function getTForX(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=this._closure;let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};var _worklet_4381648763690_init_data={code:\"function BezierEasing(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=this._closure;if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js\"};export var Bezier=function(){var _f=function _f(mX1,mY1,mX2,mY2){var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var A=function(){var _f=function _f(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;};_f._closure={};_f.__initData=_worklet_7696928702327_init_data;_f.__workletHash=7696928702327;return _f;}();var B=function(){var _f=function _f(aA1,aA2){return 3.0*aA2-6.0*aA1;};_f._closure={};_f.__initData=_worklet_3169786778773_init_data;_f.__workletHash=3169786778773;return _f;}();var C=function(){var _f=function _f(aA1){return 3.0*aA1;};_f._closure={};_f.__initData=_worklet_6399610653367_init_data;_f.__workletHash=6399610653367;return _f;}();var calcBezier=function(){var _f=function _f(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;};_f._closure={A:A,B:B,C:C};_f.__initData=_worklet_4099476341799_init_data;_f.__workletHash=4099476341799;return _f;}();var getSlope=function(){var _f=function _f(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);};_f._closure={A:A,B:B,C:C};_f.__initData=_worklet_17279829632859_init_data;_f.__workletHash=17279829632859;return _f;}();var binarySubdivide=function(){var _f=function _f(aX,aA,aB,mX1,mX2){var currentX;var currentT;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;};_f._closure={SUBDIVISION_PRECISION:SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS:SUBDIVISION_MAX_ITERATIONS,calcBezier:calcBezier};_f.__initData=_worklet_24450504940_init_data;_f.__workletHash=24450504940;return _f;}();var newtonRaphsonIterate=function(){var _f=function _f(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;};_f._closure={NEWTON_ITERATIONS:NEWTON_ITERATIONS,getSlope:getSlope,calcBezier:calcBezier};_f.__initData=_worklet_10330321609379_init_data;_f.__workletHash=10330321609379;return _f;}();var LinearEasing=function(){var _f=function _f(x){return x;};_f._closure={};_f.__initData=_worklet_3962143445177_init_data;_f.__workletHash=3962143445177;return _f;}();if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}var sampleValues=new Array(kSplineTableSize);for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}var getTForX=function(){var _f=function _f(aX){var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}};_f._closure={kSplineTableSize:kSplineTableSize,sampleValues:sampleValues,kSampleStepSize:kSampleStepSize,getSlope:getSlope,mX1:mX1,mX2:mX2,NEWTON_MIN_SLOPE:NEWTON_MIN_SLOPE,newtonRaphsonIterate:newtonRaphsonIterate,binarySubdivide:binarySubdivide};_f.__initData=_worklet_11722914882367_init_data;_f.__workletHash=11722914882367;return _f;}();return function(){var _f=function _f(x){if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};_f._closure={mX1:mX1,mY1:mY1,mX2:mX2,mY2:mY2,calcBezier:calcBezier,getTForX:getTForX};_f.__initData=_worklet_4381648763690_init_data;_f.__workletHash=4381648763690;return _f;}();};_f._closure={};_f.__initData=_worklet_7389715548968_init_data;_f.__workletHash=7389715548968;return _f;}();","map":{"version":3,"mappings":"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","names":["Bezier","mX1","mY1","mX2","mY2","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","LinearEasing","x","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.ts"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nexport function Bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number\n): (x: number) => number {\n  'worklet';\n\n  const NEWTON_ITERATIONS = 4;\n  const NEWTON_MIN_SLOPE = 0.001;\n  const SUBDIVISION_PRECISION = 0.0000001;\n  const SUBDIVISION_MAX_ITERATIONS = 10;\n\n  const kSplineTableSize = 11;\n  const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n  function A(aA1: number, aA2: number): number {\n    'worklet';\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1: number, aA2: number): number {\n    'worklet';\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1: number) {\n    'worklet';\n    return 3.0 * aA1;\n  }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function calcBezier(aT: number, aA1: number, aA2: number): number {\n    'worklet';\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function getSlope(aT: number, aA1: number, aA2: number): number {\n    'worklet';\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(\n    aX: number,\n    aA: number,\n    aB: number,\n    mX1: number,\n    mX2: number\n  ): number {\n    'worklet';\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (\n      Math.abs(currentX) > SUBDIVISION_PRECISION &&\n      ++i < SUBDIVISION_MAX_ITERATIONS\n    );\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(\n    aX: number,\n    aGuessT: number,\n    mX1: number,\n    mX2: number\n  ): number {\n    'worklet';\n    for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n      const currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n\n  function LinearEasing(x: number): number {\n    'worklet';\n    return x;\n  }\n\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // FIXME: Float32Array is not available in Hermes right now\n  //\n  // var float32ArraySupported = typeof Float32Array === 'function';\n  // const sampleValues = float32ArraySupported\n  // ? new Float32Array(kSplineTableSize)\n  // : new Array(kSplineTableSize);\n\n  // Precompute samples table\n  const sampleValues = new Array(kSplineTableSize);\n\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX: number): number {\n    'worklet';\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    'worklet';\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}