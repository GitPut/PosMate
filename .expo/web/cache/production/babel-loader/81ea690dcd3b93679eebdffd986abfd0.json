{"ast":null,"code":"import React,{useEffect,useMemo,useRef}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Text from\"./Text\";import{usePaletteColor}from\"./hooks/use-palette-color\";import{useStyles}from\"./hooks/use-styles\";var Badge=function Badge(_ref){var label=_ref.label,_ref$showZero=_ref.showZero,showZero=_ref$showZero===void 0?false:_ref$showZero,_ref$max=_ref.max,max=_ref$max===void 0?99:_ref$max,_ref$visible=_ref.visible,visible=_ref$visible===void 0?true:_ref$visible,_ref$color=_ref.color,color=_ref$color===void 0?'secondary':_ref$color,tintColor=_ref.tintColor,style=_ref.style,labelStyle=_ref.labelStyle,children=_ref.children;var palette=usePaletteColor(color,tintColor);var styles=useStyles(function(){return{container:{minWidth:20,height:20,justifyContent:'center',alignItems:'center',paddingHorizontal:6,backgroundColor:palette.main,borderRadius:10}};},[palette]);var isVisible=useMemo(function(){return label===0?visible&&showZero:visible;},[label,showZero,visible]);var animated=useRef(new Animated.Value(isVisible?1:0)).current;useEffect(function(){Animated.timing(animated,{toValue:isVisible?1:0,duration:200,useNativeDriver:true}).start();},[isVisible]);var getLabel=function getLabel(){switch(typeof label){case'number':case'string':return React.createElement(Text,{variant:\"body2\",style:[{color:palette.on},labelStyle]},typeof label==='number'&&label>max?max+\"+\":label);case'function':return label({color:palette.on});default:return label;}};return React.createElement(Animated.View,{style:[styles.container,{transform:[{scale:animated}]},style]},getLabel(),children);};export default Badge;","map":{"version":3,"mappings":"AAAA,MAAOA,MAAP,EAAgBC,SAAhB,CAA2BC,OAA3B,CAAoCC,MAApC,KAAkD,OAAlD,8DAEA,MAAOC,KAAP,cACA,OAAgBC,eAAhB,iCACA,OAASC,SAAT,0BAoBA,GAAMC,MAA2B,CAAG,QAA9BA,MAA2B,CAAGC,KAU9B,IATJC,MADmC,CAU/BD,KATJC,KADmC,eAU/BD,KARJE,QAAQ,CAARA,QAAQ,wBAAG,KAFwB,wBAU/BF,KAPJG,GAAG,CAAHA,GAAG,mBAAG,EAH6B,uBAU/BH,KANJI,OAAO,CAAPA,OAAO,uBAAG,IAJyB,yBAU/BJ,KALJK,KAAK,CAALA,KAAK,qBAAG,WAL2B,YAMnCC,SANmC,CAU/BN,KAJJM,SANmC,CAOnCC,KAPmC,CAU/BP,KAHJO,KAPmC,CAQnCC,UARmC,CAU/BR,KAFJQ,UARmC,CASnCC,SACIT,KADJS,SAEA,GAAMC,QAAO,CAAGb,eAAe,CAACQ,KAAD,CAAQC,SAAR,CAA/B,CAEA,GAAMK,OAAM,CAAGb,SAAS,CACtB,iBAAO,CACLc,SAAS,CAAE,CACTC,QAAQ,CAAE,EADD,CAETC,MAAM,CAAE,EAFC,CAGTC,cAAc,CAAE,QAHP,CAITC,UAAU,CAAE,QAJH,CAKTC,iBAAiB,CAAE,CALV,CAMTC,eAAe,CAAER,OAAO,CAACS,IANhB,CAOTC,YAAY,CAAE,EAPL,CADN,CAAP,EADsB,CAYtB,CAACV,OAAD,CAZsB,CAAxB,CAeA,GAAMW,UAAS,CAAG3B,OAAO,CAAC,iBAAOO,MAAK,GAAK,CAAV,CAAcG,OAAO,EAAIF,QAAzB,CAAoCE,OAA5C,GAAsD,CAACH,KAAD,CAAQC,QAAR,CAAkBE,OAAlB,CAAtD,CAAzB,CAEA,GAAMkB,SAAQ,CAAG3B,MAAM,CAAC,GAAI4B,SAAQ,CAACC,KAAb,CAAmBH,SAAS,CAAG,CAAH,CAAO,CAAnC,CAAD,CAAN,CAA8CI,OAA/D,CAEAhC,SAAS,CAAC,UAAM,CACd8B,QAAQ,CAACG,MAAT,CAAgBJ,QAAhB,CAA0B,CACxBK,OAAO,CAAEN,SAAS,CAAG,CAAH,CAAO,CADD,CAExBO,QAAQ,CAAE,GAFc,CAGxBC,eAAe,CAAE,IAHO,CAA1B,EAIGC,KAJH,GAKD,CANQ,CAMN,CAACT,SAAD,CANM,CAAT,CAQA,GAAMU,SAAQ,CAAG,QAAXA,SAAQ,EAAS,CACrB,OAAQ,MAAO9B,MAAf,EACE,IAAK,QAAL,CACA,IAAK,QAAL,CACE,MACET,qBAACI,IAAD,EAAMoC,OAAO,CAAC,OAAd,CAAsBzB,KAAK,CAAE,CAAC,CAAEF,KAAK,CAAEK,OAAO,CAACuB,EAAjB,CAAD,CAAwBzB,UAAxB,CAA7B,EACG,MAAOP,MAAP,GAAiB,QAAjB,EAA6BA,KAAK,CAAGE,GAArC,CAA8CA,GAAI,KAAKF,KAD1D,CADF,CAKF,IAAK,UAAL,CACE,MAAOA,MAAK,CAAC,CAAEI,KAAK,CAAEK,OAAO,CAACuB,EAAjB,CAAD,CAAZ,CACF,QACE,MAAOhC,MAAP,EAEL,CAdD,CAgBA,MACET,qBAAC+B,QAAD,CAAUW,IAAV,EAAe3B,KAAK,CAAE,CAACI,MAAM,CAACC,SAAR,CAAmB,CAAEuB,SAAS,CAAE,CAAC,CAAEC,KAAK,CAAEd,QAAT,CAAD,CAAb,CAAnB,CAAyDf,KAAzD,CAAtB,EACGwB,QAAQ,EADX,CAEGtB,QAFH,CADF,CAMD,CA9DD,CAgEA,cAAeV,MAAf","names":["React","useEffect","useMemo","useRef","Text","usePaletteColor","useStyles","Badge","_ref","label","showZero","max","visible","color","tintColor","style","labelStyle","children","palette","styles","container","minWidth","height","justifyContent","alignItems","paddingHorizontal","backgroundColor","main","borderRadius","isVisible","animated","Animated","Value","current","timing","toValue","duration","useNativeDriver","start","getLabel","variant","on","View","transform","scale"],"sources":["Badge.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\nimport { Animated, StyleProp, TextStyle, ViewProps } from 'react-native';\nimport Text from './Text';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useStyles } from './hooks/use-styles';\n\nexport interface BadgeProps {\n  label?: number | string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  showZero?: boolean;\n\n  max?: number;\n\n  visible?: boolean;\n\n  color?: Color;\n\n  tintColor?: Color;\n\n  style?: Animated.AnimatedProps<ViewProps>['style'];\n\n  labelStyle?: StyleProp<TextStyle>;\n}\n\nconst Badge: React.FC<BadgeProps> = ({\n  label,\n  showZero = false,\n  max = 99,\n  visible = true,\n  color = 'secondary',\n  tintColor,\n  style,\n  labelStyle,\n  children,\n}) => {\n  const palette = usePaletteColor(color, tintColor);\n\n  const styles = useStyles(\n    () => ({\n      container: {\n        minWidth: 20,\n        height: 20,\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingHorizontal: 6,\n        backgroundColor: palette.main,\n        borderRadius: 10,\n      },\n    }),\n    [palette]\n  );\n\n  const isVisible = useMemo(() => (label === 0 ? visible && showZero : visible), [label, showZero, visible]);\n\n  const animated = useRef(new Animated.Value(isVisible ? 1 : 0)).current;\n\n  useEffect(() => {\n    Animated.timing(animated, {\n      toValue: isVisible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: true,\n    }).start();\n  }, [isVisible]);\n\n  const getLabel = () => {\n    switch (typeof label) {\n      case 'number':\n      case 'string':\n        return (\n          <Text variant=\"body2\" style={[{ color: palette.on }, labelStyle]}>\n            {typeof label === 'number' && label > max ? `${max}+` : label}\n          </Text>\n        );\n      case 'function':\n        return label({ color: palette.on });\n      default:\n        return label;\n    }\n  };\n\n  return (\n    <Animated.View style={[styles.container, { transform: [{ scale: animated }] }, style]}>\n      {getLabel()}\n      {children}\n    </Animated.View>\n  );\n};\n\nexport default Badge;\n"]},"metadata":{},"sourceType":"module"}