{"ast":null,"code":"import findNodeHandle from\"react-native-web/dist/exports/findNodeHandle\";import{isChromeDebugger,isWeb,shouldBeUseWeb}from\"./PlatformChecker\";export function getTag(view){return findNodeHandle(view);}var isNative=!shouldBeUseWeb();export var measure;var _worklet_17547697225118_init_data={code:\"function anonymous(animatedRef){if(!_WORKLET){return null;}const viewTag=animatedRef();if(viewTag===-1){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\\\");return null;}const measured=_measure(viewTag);if(measured===null){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\\\");return null;}else if(measured.x===-1234567){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" returned an invalid measurement response.\\\");return null;}else if(isNaN(measured.x)){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\\\");return null;}else{return measured;}}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"};if(isWeb()){measure=function measure(animatedRef){var element=animatedRef();var viewportOffset=element.getBoundingClientRect();return{width:element.offsetWidth,height:element.offsetHeight,x:element.offsetLeft,y:element.offsetTop,pageX:viewportOffset.left,pageY:viewportOffset.top};};}else if(isChromeDebugger()){measure=function measure(_animatedRef){console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');return null;};}else{measure=function(){var _f=function _f(animatedRef){if(!_WORKLET){return null;}var viewTag=animatedRef();if(viewTag===-1){console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);return null;}var measured=_measure(viewTag);if(measured===null){console.warn(`[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);return null;}else if(measured.x===-1234567){console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`);return null;}else if(isNaN(measured.x)){console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`);return null;}else{return measured;}};_f._closure={};_f.__initData=_worklet_17547697225118_init_data;_f.__workletHash=17547697225118;return _f;}();}var _worklet_10148967230492_init_data={code:\"function dispatchCommand(animatedRef,commandName,args){const{isNative}=this._closure;if(!_WORKLET||!isNative){return;}const shadowNodeWrapper=animatedRef();_dispatchCommand(shadowNodeWrapper,commandName,args);}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"};export var dispatchCommand=function(){var _f=function _f(animatedRef,commandName,args){if(!_WORKLET||!isNative){return;}var shadowNodeWrapper=animatedRef();_dispatchCommand(shadowNodeWrapper,commandName,args);};_f._closure={isNative:isNative};_f.__initData=_worklet_10148967230492_init_data;_f.__workletHash=10148967230492;return _f;}();export var scrollTo;var _worklet_15141703724063_init_data={code:\"function anonymous(animatedRef,x,y,animated){const element=animatedRef();element.scrollTo({x:x,y:y,animated:animated});}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"};var _worklet_13298936966164_init_data={code:\"function anonymous(animatedRef,x,y,animated){const{dispatchCommand}=this._closure;dispatchCommand(animatedRef,'scrollTo',[x,y,animated]);}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"};var _worklet_2128926035067_init_data={code:\"function anonymous(animatedRef,x,y,animated){if(!_WORKLET){return;}const viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"};if(isWeb()){scrollTo=function(){var _f=function _f(animatedRef,x,y,animated){var element=animatedRef();element.scrollTo({x:x,y:y,animated:animated});};_f._closure={};_f.__initData=_worklet_15141703724063_init_data;_f.__workletHash=15141703724063;return _f;}();}else if(isNative&&global._IS_FABRIC){scrollTo=function(){var _f=function _f(animatedRef,x,y,animated){dispatchCommand(animatedRef,'scrollTo',[x,y,animated]);};_f._closure={dispatchCommand:dispatchCommand};_f.__initData=_worklet_13298936966164_init_data;_f.__workletHash=13298936966164;return _f;}();}else if(isNative){scrollTo=function(){var _f=function _f(animatedRef,x,y,animated){if(!_WORKLET){return;}var viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);};_f._closure={};_f.__initData=_worklet_2128926035067_init_data;_f.__workletHash=2128926035067;return _f;}();}else{scrollTo=function scrollTo(_animatedRef,_x,_y){};}var _worklet_13856860948199_init_data={code:\"function setGestureState(handlerTag,newState){const{isNative}=this._closure;if(!_WORKLET||!isNative){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');return;}_setGestureState(handlerTag,newState);}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js\"};export var setGestureState=function(){var _f=function _f(handlerTag,newState){if(!_WORKLET||!isNative){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');return;}_setGestureState(handlerTag,newState);};_f._closure={isNative:isNative};_f.__initData=_worklet_13856860948199_init_data;_f.__workletHash=13856860948199;return _f;}();","map":{"version":3,"mappings":"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","names":["isChromeDebugger","isWeb","shouldBeUseWeb","getTag","view","findNodeHandle","isNative","measure","animatedRef","element","viewportOffset","getBoundingClientRect","width","offsetWidth","height","offsetHeight","x","offsetLeft","y","offsetTop","pageX","left","pageY","top","_animatedRef","console","warn","_WORKLET","viewTag","measured","_measure","isNaN","dispatchCommand","commandName","args","shadowNodeWrapper","_dispatchCommand","scrollTo","animated","global","_IS_FABRIC","_scrollTo","_x","_y","setGestureState","handlerTag","newState","_setGestureState"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.ts"],"sourcesContent":["/* global _WORKLET _measure _scrollTo _dispatchCommand _setGestureState */\nimport { Component } from 'react';\nimport { findNodeHandle } from 'react-native';\nimport { MeasuredDimensions, ShadowNodeWrapper } from './commonTypes';\nimport { RefObjectFunction } from './hook/commonTypes';\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from './PlatformChecker';\n\nexport function getTag(\n  view: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number {\n  return findNodeHandle(view);\n}\n\nconst isNative = !shouldBeUseWeb();\n\nexport let measure: (\n  animatedRef: RefObjectFunction<Component>\n) => MeasuredDimensions | null;\n\nif (isWeb()) {\n  measure = (animatedRef: RefObjectFunction<Component>) => {\n    const element = animatedRef() as unknown as HTMLElement; // TODO: fix typing of animated refs on web\n    const viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top,\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = (_animatedRef: RefObjectFunction<Component>) => {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else {\n  measure = (animatedRef: RefObjectFunction<Component>) => {\n    'worklet';\n    if (!_WORKLET) {\n      return null;\n    }\n\n    const viewTag = animatedRef();\n    if (viewTag === -1) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`\n      );\n      return null;\n    }\n\n    const measured = _measure(viewTag);\n    if (measured === null) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`\n      );\n      return null;\n    } else if (measured.x === -1234567) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`\n      );\n      return null;\n    } else if (isNaN(measured.x)) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`\n      );\n      return null;\n    } else {\n      return measured;\n    }\n  };\n}\n\nexport function dispatchCommand(\n  animatedRef: RefObjectFunction<Component>,\n  commandName: string,\n  args: Array<unknown>\n): void {\n  'worklet';\n  if (!_WORKLET || !isNative) {\n    return;\n  }\n\n  // dispatchCommand works only on Fabric where animatedRef returns\n  // an object (ShadowNodeWrapper) and not a number\n  const shadowNodeWrapper = animatedRef() as ShadowNodeWrapper;\n  _dispatchCommand!(shadowNodeWrapper, commandName, args);\n}\n\nexport let scrollTo: (\n  animatedRef: RefObjectFunction<Component>,\n  x: number,\n  y: number,\n  animated: boolean\n) => void;\n\nif (isWeb()) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    const element = animatedRef() as unknown as HTMLElement;\n    // @ts-ignore same call as in react-native-web\n    element.scrollTo({ x, y, animated });\n  };\n} else if (isNative && global._IS_FABRIC) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);\n  };\n} else if (isNative) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    if (!_WORKLET) {\n      return;\n    }\n\n    // Calling animatedRef on Paper returns a number (nativeTag)\n    const viewTag = animatedRef() as number;\n    _scrollTo(viewTag, x, y, animated);\n  };\n} else {\n  scrollTo = (\n    _animatedRef: RefObjectFunction<Component>,\n    _x: number,\n    _y: number\n  ) => {\n    // no-op\n  };\n}\n\nexport function setGestureState(handlerTag: number, newState: number): void {\n  'worklet';\n  if (!_WORKLET || !isNative) {\n    console.warn(\n      '[Reanimated] You can not use setGestureState in non-worklet function.'\n    );\n    return;\n  }\n  _setGestureState(handlerTag, newState);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}