{"ast":null,"code":"import{hsvToColor,RGBtoHSV,rgbaColor,processColor,red,green,blue,opacity}from\"./Colors\";import{makeMutable}from\"./core\";import{interpolate}from\"./interpolation\";import{useSharedValue}from\"./hook/useSharedValue\";export var Extrapolate={EXTEND:'extend',CLAMP:'clamp',IDENTITY:'identity'};var _worklet_12074355900602_init_data={code:\"function anonymous(value,inputRange,colors,options){const{interpolate,Extrapolate,hsvToColor}=this._closure;let h=0;const{useCorrectedHSVInterpolation=true}=options;if(useCorrectedHSVInterpolation){const correctedInputRange=[inputRange[0]];const originalH=colors.h;const correctedH=[originalH[0]];for(let i=1;i<originalH.length;++i){const d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=(interpolate(value,correctedInputRange,correctedH,Extrapolate.CLAMP)+1)%1;}else{h=interpolate(value,inputRange,colors.h,Extrapolate.CLAMP);}const s=interpolate(value,inputRange,colors.s,Extrapolate.CLAMP);const v=interpolate(value,inputRange,colors.v,Extrapolate.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);return hsvToColor(h,s,v,a);}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js\"};var interpolateColorsHSV=function(){var _f=function _f(value,inputRange,colors,options){var h=0;var _options$useCorrected=options.useCorrectedHSVInterpolation,useCorrectedHSVInterpolation=_options$useCorrected===void 0?true:_options$useCorrected;if(useCorrectedHSVInterpolation){var correctedInputRange=[inputRange[0]];var originalH=colors.h;var correctedH=[originalH[0]];for(var i=1;i<originalH.length;++i){var d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=(interpolate(value,correctedInputRange,correctedH,Extrapolate.CLAMP)+1)%1;}else{h=interpolate(value,inputRange,colors.h,Extrapolate.CLAMP);}var s=interpolate(value,inputRange,colors.s,Extrapolate.CLAMP);var v=interpolate(value,inputRange,colors.v,Extrapolate.CLAMP);var a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);return hsvToColor(h,s,v,a);};_f._closure={interpolate:interpolate,Extrapolate:Extrapolate,hsvToColor:hsvToColor};_f.__initData=_worklet_12074355900602_init_data;_f.__workletHash=12074355900602;return _f;}();var _worklet_9548966570765_init_data={code:\"function anonymous(x,gamma){return x.map(function(v){return Math.pow(v/255,gamma);});}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js\"};var toLinearSpace=function(){var _f=function _f(x,gamma){return x.map(function(v){return Math.pow(v/255,gamma);});};_f._closure={};_f.__initData=_worklet_9548966570765_init_data;_f.__workletHash=9548966570765;return _f;}();var _worklet_12849438514316_init_data={code:\"function anonymous(x,gamma){return Math.round(Math.pow(x,1/gamma)*255);}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js\"};var toGammaSpace=function(){var _f=function _f(x,gamma){return Math.round(Math.pow(x,1/gamma)*255);};_f._closure={};_f.__initData=_worklet_12849438514316_init_data;_f.__workletHash=12849438514316;return _f;}();var _worklet_2361826633093_init_data={code:\"function anonymous(value,inputRange,colors,options){const{toLinearSpace,interpolate,Extrapolate,rgbaColor,toGammaSpace}=this._closure;const{gamma=2.2}=options;let{r:outputR,g:outputG,b:outputB}=colors;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}const r=interpolate(value,inputRange,outputR,Extrapolate.CLAMP);const g=interpolate(value,inputRange,outputG,Extrapolate.CLAMP);const b=interpolate(value,inputRange,outputB,Extrapolate.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);if(gamma===1){return rgbaColor(r,g,b,a);}return rgbaColor(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js\"};var interpolateColorsRGB=function(){var _f=function _f(value,inputRange,colors,options){var _options$gamma=options.gamma,gamma=_options$gamma===void 0?2.2:_options$gamma;var outputR=colors.r,outputG=colors.g,outputB=colors.b;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}var r=interpolate(value,inputRange,outputR,Extrapolate.CLAMP);var g=interpolate(value,inputRange,outputG,Extrapolate.CLAMP);var b=interpolate(value,inputRange,outputB,Extrapolate.CLAMP);var a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);if(gamma===1){return rgbaColor(r,g,b,a);}return rgbaColor(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);};_f._closure={toLinearSpace:toLinearSpace,interpolate:interpolate,Extrapolate:Extrapolate,rgbaColor:rgbaColor,toGammaSpace:toGammaSpace};_f.__initData=_worklet_2361826633093_init_data;_f.__workletHash=2361826633093;return _f;}();var _worklet_3939040931548_init_data={code:\"function anonymous(colors){const{processColor,red,green,blue,opacity}=this._closure;const r=[];const g=[];const b=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(processedColor!==null&&processedColor!==undefined){r.push(red(processedColor));g.push(green(processedColor));b.push(blue(processedColor));a.push(opacity(processedColor));}}return{r:r,g:g,b:b,a:a};}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js\"};var getInterpolateRGB=function(){var _f=function _f(colors){var r=[];var g=[];var b=[];var a=[];for(var i=0;i<colors.length;++i){var color=colors[i];var processedColor=processColor(color);if(processedColor!==null&&processedColor!==undefined){r.push(red(processedColor));g.push(green(processedColor));b.push(blue(processedColor));a.push(opacity(processedColor));}}return{r:r,g:g,b:b,a:a};};_f._closure={processColor:processColor,red:red,green:green,blue:blue,opacity:opacity};_f.__initData=_worklet_3939040931548_init_data;_f.__workletHash=3939040931548;return _f;}();var _worklet_4257751024136_init_data={code:\"function anonymous(colors){const{processColor,RGBtoHSV,red,green,blue,opacity}=this._closure;const h=[];const s=[];const v=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(typeof processedColor==='number'){const processedHSVColor=RGBtoHSV(red(processedColor),green(processedColor),blue(processedColor));h.push(processedHSVColor.h);s.push(processedHSVColor.s);v.push(processedHSVColor.v);a.push(opacity(processedColor));}}return{h:h,s:s,v:v,a:a};}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js\"};var getInterpolateHSV=function(){var _f=function _f(colors){var h=[];var s=[];var v=[];var a=[];for(var i=0;i<colors.length;++i){var color=colors[i];var processedColor=processColor(color);if(typeof processedColor==='number'){var processedHSVColor=RGBtoHSV(red(processedColor),green(processedColor),blue(processedColor));h.push(processedHSVColor.h);s.push(processedHSVColor.s);v.push(processedHSVColor.v);a.push(opacity(processedColor));}}return{h:h,s:s,v:v,a:a};};_f._closure={processColor:processColor,RGBtoHSV:RGBtoHSV,red:red,green:green,blue:blue,opacity:opacity};_f.__initData=_worklet_4257751024136_init_data;_f.__workletHash=4257751024136;return _f;}();var _worklet_12124907069654_init_data={code:\"function anonymous(value,inputRange,outputRange){const{interpolateColorsHSV,getInterpolateHSV,interpolateColorsRGB,getInterpolateRGB}=this._closure;let colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'RGB';let options=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}throw new Error(\\\"Invalid color space provided: \\\"+colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js\"};export var interpolateColor=function(){var _f=function _f(value,inputRange,outputRange){var colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'RGB';var options=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);};_f._closure={interpolateColorsHSV:interpolateColorsHSV,getInterpolateHSV:getInterpolateHSV,interpolateColorsRGB:interpolateColorsRGB,getInterpolateRGB:getInterpolateRGB};_f.__initData=_worklet_12124907069654_init_data;_f.__workletHash=12124907069654;return _f;}();export var ColorSpace=function(ColorSpace){ColorSpace[ColorSpace[\"RGB\"]=0]=\"RGB\";ColorSpace[ColorSpace[\"HSV\"]=1]=\"HSV\";return ColorSpace;}({});export function useInterpolateConfig(inputRange,outputRange){var colorSpace=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ColorSpace.RGB;var options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};return useSharedValue({inputRange:inputRange,outputRange:outputRange,colorSpace:colorSpace,cache:makeMutable(null),options:options});}var _worklet_4245205974312_init_data={code:\"function anonymous(value,interpolateConfig){const{ColorSpace,getInterpolateRGB,interpolateColorsRGB,getInterpolateHSV,interpolateColorsHSV}=this._closure;let colors=interpolateConfig.value.cache.value;if(interpolateConfig.value.colorSpace===ColorSpace.RGB){if(!colors){colors=getInterpolateRGB(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsRGB(value,interpolateConfig.value.inputRange,colors,interpolateConfig.value.options);}else if(interpolateConfig.value.colorSpace===ColorSpace.HSV){if(!colors){colors=getInterpolateHSV(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsHSV(value,interpolateConfig.value.inputRange,colors,interpolateConfig.value.options);}throw new Error(\\\"Invalid color space provided: \\\"+interpolateConfig.value.colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js\"};export var interpolateSharableColor=function(){var _f=function _f(value,interpolateConfig){var colors=interpolateConfig.value.cache.value;if(interpolateConfig.value.colorSpace===ColorSpace.RGB){if(!colors){colors=getInterpolateRGB(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsRGB(value,interpolateConfig.value.inputRange,colors,interpolateConfig.value.options);}else if(interpolateConfig.value.colorSpace===ColorSpace.HSV){if(!colors){colors=getInterpolateHSV(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsHSV(value,interpolateConfig.value.inputRange,colors,interpolateConfig.value.options);}throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);};_f._closure={ColorSpace:ColorSpace,getInterpolateRGB:getInterpolateRGB,interpolateColorsRGB:interpolateColorsRGB,getInterpolateHSV:getInterpolateHSV,interpolateColorsHSV:interpolateColorsHSV};_f.__initData=_worklet_4245205974312_init_data;_f.__workletHash=4245205974312;return _f;}();","map":{"version":3,"mappings":"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","names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","useSharedValue","Extrapolate","EXTEND","CLAMP","IDENTITY","interpolateColorsHSV","value","inputRange","colors","options","h","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","s","v","a","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","outputR","r","outputG","g","outputB","b","getInterpolateRGB","color","processedColor","undefined","getInterpolateHSV","processedHSVColor","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.ts"],"sourcesContent":["import {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\nimport { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\ninterface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\ninterface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\nexport const interpolateColor = (\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number => {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n\nexport const interpolateSharableColor = (\n  value: number,\n  interpolateConfig: SharedValue<InterpolateConfig>\n): string | number => {\n  'worklet';\n  let colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateRGB,\n      interpolateConfig.value.options\n    );\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateHSV,\n      interpolateConfig.value.options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}