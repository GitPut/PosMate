{"ast":null,"code":"import{Platform}from'expo-modules-core';import{getFilename}from\"./AssetUris\";export function isImageType(type){return /^(jpeg|jpg|gif|png|bmp|webp|heic)$/i.test(type);}export function getImageInfoAsync(url){if(!Platform.isDOMAvailable){return Promise.resolve({name:getFilename(url),width:0,height:0});}return new Promise(function(resolve,reject){var img=new Image();img.onerror=reject;img.onload=function(){resolve({name:getFilename(url),width:img.naturalWidth,height:img.naturalHeight});};img.src=url;});}","map":{"version":3,"mappings":"AACA,OAASA,QAAQ,KAAQ,mBAAmB,CAE5C,OAASC,WAAW,mBAQpB,MAAM,SAAUC,YAAW,CAACC,IAAY,EACtC,MAAO,sCAAqC,CAACC,IAAI,CAACD,IAAI,CAAC,CACzD,CAEA,MAAM,SAAUE,kBAAiB,CAACC,GAAW,EAC3C,GAAI,CAACN,QAAQ,CAACO,cAAc,CAAE,CAC5B,MAAOC,QAAO,CAACC,OAAO,CAAC,CAAEC,IAAI,CAAET,WAAW,CAACK,GAAG,CAAC,CAAEK,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAC,CAAE,CAAC,EAEzE,MAAO,IAAIJ,QAAO,CAAC,SAACC,OAAO,CAAEI,MAAM,CAAI,CACrC,GAAMC,IAAG,CAAG,GAAIC,MAAK,EAAE,CACvBD,GAAG,CAACE,OAAO,CAAGH,MAAM,CACpBC,GAAG,CAACG,MAAM,CAAG,UAAK,CAChBR,OAAO,CAAC,CACNC,IAAI,CAAET,WAAW,CAACK,GAAG,CAAC,CACtBK,KAAK,CAAEG,GAAG,CAACI,YAAY,CACvBN,MAAM,CAAEE,GAAG,CAACK,cACb,CAAC,CACJ,CAAC,CACDL,GAAG,CAACM,GAAG,CAAGd,GAAG,CACf,CAAC,CAAC,CACJ","names":["Platform","getFilename","isImageType","type","test","getImageInfoAsync","url","isDOMAvailable","Promise","resolve","name","width","height","reject","img","Image","onerror","onload","naturalWidth","naturalHeight","src"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/expo-asset/src/ImageAssets.ts"],"sourcesContent":["/* eslint-env browser */\nimport { Platform } from 'expo-modules-core';\n\nimport { getFilename } from './AssetUris';\n\ntype ImageInfo = {\n  name: string;\n  width: number;\n  height: number;\n};\n\nexport function isImageType(type: string): boolean {\n  return /^(jpeg|jpg|gif|png|bmp|webp|heic)$/i.test(type);\n}\n\nexport function getImageInfoAsync(url: string): Promise<ImageInfo> {\n  if (!Platform.isDOMAvailable) {\n    return Promise.resolve({ name: getFilename(url), width: 0, height: 0 });\n  }\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onerror = reject;\n    img.onload = () => {\n      resolve({\n        name: getFilename(url),\n        width: img.naturalWidth,\n        height: img.naturalHeight,\n      });\n    };\n    img.src = url;\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}