{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{reportFatalErrorOnJS}from\"./errors\";import NativeReanimatedModule from\"./NativeReanimated\";import{isChromeDebugger,isJest}from\"./PlatformChecker\";import{runOnJS,setupMicrotasks,callMicrotasks,runOnUIImmediately}from\"./threads\";var _worklet_14810700639596_init_data={code:\"function callGuardDEV(fn){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}try{fn(...args);}catch(e){if(global.__ErrorUtils){global.__ErrorUtils.reportFatalError(e);}else{throw e;}}}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js\"};var callGuardDEV=function(){var _f=function _f(fn){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}try{fn.apply(void 0,args);}catch(e){if(global.__ErrorUtils){global.__ErrorUtils.reportFatalError(e);}else{throw e;}}};_f._closure={};_f.__initData=_worklet_14810700639596_init_data;_f.__workletHash=14810700639596;return _f;}();var _worklet_13358486790341_init_data={code:\"function valueUnpacker(objectToUnpack,category){let workletsCache=global.__workletsCache;let handleCache=global.__handleCache;if(workletsCache===undefined){workletsCache=global.__workletsCache=new Map();handleCache=global.__handleCache=new WeakMap();}const workletHash=objectToUnpack.__workletHash;if(workletHash!==undefined){let workletFun=workletsCache.get(workletHash);if(workletFun===undefined){const initData=objectToUnpack.__initData;if(global.evalWithSourceMap){workletFun=global.evalWithSourceMap('('+initData.code+'\\\\n)',initData.location,initData.sourceMap);}else if(global.evalWithSourceUrl){workletFun=global.evalWithSourceUrl('('+initData.code+'\\\\n)',\\\"worklet_\\\"+workletHash);}else{workletFun=eval('('+initData.code+'\\\\n)');}workletsCache.set(workletHash,workletFun);}const functionInstance=workletFun.bind(objectToUnpack);objectToUnpack._recur=functionInstance;return functionInstance;}else if(objectToUnpack.__init){let value=handleCache.get(objectToUnpack);if(value===undefined){value=objectToUnpack.__init();handleCache.set(objectToUnpack,value);}return value;}else if(category==='RemoteFunction'){const fun=function(){throw new Error(\\\"Tried to synchronously call a non-worklet function on the UI thread.\\\\n\\\\nPossible solutions are:\\\\n  a) If you want to synchronously execute this method, mark it as a worklet\\\\n  b) If you want to execute this function on the JS thread, wrap it using `runOnJS`\\\");};fun.__remoteFunction=objectToUnpack;return fun;}else{throw new Error('data type not recognized by unpack method');}}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js\"};var valueUnpacker=function(){var _f=function _f(objectToUnpack,category){var workletsCache=global.__workletsCache;var handleCache=global.__handleCache;if(workletsCache===undefined){workletsCache=global.__workletsCache=new Map();handleCache=global.__handleCache=new WeakMap();}var workletHash=objectToUnpack.__workletHash;if(workletHash!==undefined){var workletFun=workletsCache.get(workletHash);if(workletFun===undefined){var initData=objectToUnpack.__initData;if(global.evalWithSourceMap){workletFun=global.evalWithSourceMap('('+initData.code+'\\n)',initData.location,initData.sourceMap);}else if(global.evalWithSourceUrl){workletFun=global.evalWithSourceUrl('('+initData.code+'\\n)',`worklet_${workletHash}`);}else{workletFun=eval('('+initData.code+'\\n)');}workletsCache.set(workletHash,workletFun);}var functionInstance=workletFun.bind(objectToUnpack);objectToUnpack._recur=functionInstance;return functionInstance;}else if(objectToUnpack.__init){var value=handleCache.get(objectToUnpack);if(value===undefined){value=objectToUnpack.__init();handleCache.set(objectToUnpack,value);}return value;}else if(category==='RemoteFunction'){var fun=function fun(){throw new Error(`Tried to synchronously call a non-worklet function on the UI thread.\n\nPossible solutions are:\n  a) If you want to synchronously execute this method, mark it as a worklet\n  b) If you want to execute this function on the JS thread, wrap it using \\`runOnJS\\``);};fun.__remoteFunction=objectToUnpack;return fun;}else{throw new Error('data type not recognized by unpack method');}};_f._closure={};_f.__initData=_worklet_13358486790341_init_data;_f.__workletHash=13358486790341;return _f;}();var _worklet_1460600058506_init_data={code:\"function setupRequestAnimationFrame(){const{callMicrotasks}=this._closure;const nativeRequestAnimationFrame=global.requestAnimationFrame;let animationFrameCallbacks=[];let lastNativeAnimationFrameTimestamp=-1;global.__flushAnimationFrame=function(frameTimestamp){const currentCallbacks=animationFrameCallbacks;animationFrameCallbacks=[];currentCallbacks.forEach(function(f){return f(frameTimestamp);});callMicrotasks();};global.requestAnimationFrame=function(callback){animationFrameCallbacks.push(callback);if(animationFrameCallbacks.length===1){nativeRequestAnimationFrame(function(timestamp){if(lastNativeAnimationFrameTimestamp>=timestamp){return;}lastNativeAnimationFrameTimestamp=timestamp;global.__frameTimestamp=timestamp;global.__flushAnimationFrame(timestamp);global.__frameTimestamp=undefined;});}return-1;};}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js\"};var setupRequestAnimationFrame=function(){var _f=function _f(){var nativeRequestAnimationFrame=global.requestAnimationFrame;var animationFrameCallbacks=[];var lastNativeAnimationFrameTimestamp=-1;global.__flushAnimationFrame=function(frameTimestamp){var currentCallbacks=animationFrameCallbacks;animationFrameCallbacks=[];currentCallbacks.forEach(function(f){return f(frameTimestamp);});callMicrotasks();};global.requestAnimationFrame=function(callback){animationFrameCallbacks.push(callback);if(animationFrameCallbacks.length===1){nativeRequestAnimationFrame(function(timestamp){if(lastNativeAnimationFrameTimestamp>=timestamp){return;}lastNativeAnimationFrameTimestamp=timestamp;global.__frameTimestamp=timestamp;global.__flushAnimationFrame(timestamp);global.__frameTimestamp=undefined;});}return-1;};};_f._closure={callMicrotasks:callMicrotasks};_f.__initData=_worklet_1460600058506_init_data;_f.__workletHash=1460600058506;return _f;}();var _worklet_10717828224100_init_data={code:\"function anonymous(){const{runOnJS,reportFatalErrorOnJS,IS_CHROME_DEBUGGER,capturableConsole,IS_JEST,setupMicrotasks,setupRequestAnimationFrame}=this._closure;global.__ErrorUtils={reportFatalError:function(error){runOnJS(reportFatalErrorOnJS)({message:error.message,stack:error.stack});}};if(!IS_CHROME_DEBUGGER){global.console={assert:runOnJS(capturableConsole.assert),debug:runOnJS(capturableConsole.debug),log:runOnJS(capturableConsole.log),warn:runOnJS(capturableConsole.warn),error:runOnJS(capturableConsole.error),info:runOnJS(capturableConsole.info)};}if(!IS_JEST){setupMicrotasks();setupRequestAnimationFrame();}}\",location:\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js\"};export function initializeUIRuntime(){NativeReanimatedModule.installCoreFunctions(callGuardDEV,valueUnpacker);var IS_JEST=isJest();var IS_CHROME_DEBUGGER=isChromeDebugger();if(IS_JEST){global.requestAnimationFrame=function(callback){return setTimeout(function(){return callback(performance.now());},0);};}var capturableConsole=_objectSpread({},console);runOnUIImmediately(function(){var _f=function _f(){global.__ErrorUtils={reportFatalError:function reportFatalError(error){runOnJS(reportFatalErrorOnJS)({message:error.message,stack:error.stack});}};if(!IS_CHROME_DEBUGGER){global.console={assert:runOnJS(capturableConsole.assert),debug:runOnJS(capturableConsole.debug),log:runOnJS(capturableConsole.log),warn:runOnJS(capturableConsole.warn),error:runOnJS(capturableConsole.error),info:runOnJS(capturableConsole.info)};}if(!IS_JEST){setupMicrotasks();setupRequestAnimationFrame();}};_f._closure={runOnJS:runOnJS,reportFatalErrorOnJS:reportFatalErrorOnJS,IS_CHROME_DEBUGGER:IS_CHROME_DEBUGGER,capturableConsole:capturableConsole,IS_JEST:IS_JEST,setupMicrotasks:setupMicrotasks,setupRequestAnimationFrame:setupRequestAnimationFrame};_f.__initData=_worklet_10717828224100_init_data;_f.__workletHash=10717828224100;return _f;}())();}","map":{"version":3,"mappings":"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","names":["reportFatalErrorOnJS","NativeReanimatedModule","isChromeDebugger","isJest","runOnJS","setupMicrotasks","callMicrotasks","runOnUIImmediately","callGuardDEV","fn","args","e","global","__ErrorUtils","reportFatalError","valueUnpacker","objectToUnpack","category","workletsCache","__workletsCache","handleCache","__handleCache","undefined","Map","WeakMap","workletHash","__workletHash","workletFun","get","initData","__initData","evalWithSourceMap","code","location","sourceMap","evalWithSourceUrl","eval","set","functionInstance","bind","_recur","__init","value","fun","Error","__remoteFunction","setupRequestAnimationFrame","nativeRequestAnimationFrame","requestAnimationFrame","animationFrameCallbacks","lastNativeAnimationFrameTimestamp","__flushAnimationFrame","frameTimestamp","currentCallbacks","forEach","f","callback","push","length","timestamp","__frameTimestamp","initializeUIRuntime","installCoreFunctions","IS_JEST","IS_CHROME_DEBUGGER","setTimeout","performance","now","capturableConsole","console","error","message","stack","assert","debug","log","warn","info","arguments"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.ts"],"sourcesContent":["import { reportFatalErrorOnJS } from './errors';\nimport NativeReanimatedModule from './NativeReanimated';\nimport { isChromeDebugger, isJest } from './PlatformChecker';\nimport {\n  runOnJS,\n  setupMicrotasks,\n  callMicrotasks,\n  runOnUIImmediately,\n} from './threads';\n\n// callGuard is only used with debug builds\nfunction callGuardDEV<T extends Array<any>, U>(\n  fn: (...args: T) => U,\n  ...args: T\n): void {\n  'worklet';\n  try {\n    fn(...args);\n  } catch (e) {\n    if (global.__ErrorUtils) {\n      global.__ErrorUtils.reportFatalError(e as Error);\n    } else {\n      throw e;\n    }\n  }\n}\n\nfunction valueUnpacker(objectToUnpack: any, category?: string): any {\n  'worklet';\n  let workletsCache = global.__workletsCache;\n  let handleCache = global.__handleCache;\n  if (workletsCache === undefined) {\n    // init\n    workletsCache = global.__workletsCache = new Map();\n    handleCache = global.__handleCache = new WeakMap();\n  }\n  const workletHash = objectToUnpack.__workletHash;\n  if (workletHash !== undefined) {\n    let workletFun = workletsCache.get(workletHash);\n    if (workletFun === undefined) {\n      const initData = objectToUnpack.__initData;\n      if (global.evalWithSourceMap) {\n        // if the runtime (hermes only for now) supports loading source maps\n        // we want to use the proper filename for the location as it guarantees\n        // that debugger understands and loads the source code of the file where\n        // the worklet is defined.\n        workletFun = global.evalWithSourceMap(\n          '(' + initData.code + '\\n)',\n          initData.location,\n          initData.sourceMap\n        ) as (...args: any[]) => any;\n      } else if (global.evalWithSourceUrl) {\n        // if the runtime doesn't support loading source maps, in dev mode we\n        // can pass source url when evaluating the worklet. Now, instead of using\n        // the actual file location we use worklet hash, as it the allows us to\n        // properly symbolicate traces (see errors.ts for details)\n        workletFun = global.evalWithSourceUrl(\n          '(' + initData.code + '\\n)',\n          `worklet_${workletHash}`\n        ) as (...args: any[]) => any;\n      } else {\n        // in release we use the regular eval to save on JSI calls\n        // eslint-disable-next-line no-eval\n        workletFun = eval('(' + initData.code + '\\n)') as (\n          ...args: any[]\n        ) => any;\n      }\n      workletsCache.set(workletHash, workletFun);\n    }\n    const functionInstance = workletFun.bind(objectToUnpack);\n    objectToUnpack._recur = functionInstance;\n    return functionInstance;\n  } else if (objectToUnpack.__init) {\n    let value = handleCache!.get(objectToUnpack);\n    if (value === undefined) {\n      value = objectToUnpack.__init();\n      handleCache!.set(objectToUnpack, value);\n    }\n    return value;\n  } else if (category === 'RemoteFunction') {\n    const fun = () => {\n      throw new Error(`Tried to synchronously call a non-worklet function on the UI thread.\n\nPossible solutions are:\n  a) If you want to synchronously execute this method, mark it as a worklet\n  b) If you want to execute this function on the JS thread, wrap it using \\`runOnJS\\``);\n    };\n    fun.__remoteFunction = objectToUnpack;\n    return fun;\n  } else {\n    throw new Error('data type not recognized by unpack method');\n  }\n}\n\nfunction setupRequestAnimationFrame() {\n  'worklet';\n\n  // Jest mocks requestAnimationFrame API and it does not like if that mock gets overridden\n  // so we avoid doing requestAnimationFrame batching in Jest environment.\n  const nativeRequestAnimationFrame = global.requestAnimationFrame;\n\n  let animationFrameCallbacks: Array<(timestamp: number) => void> = [];\n  let lastNativeAnimationFrameTimestamp = -1;\n\n  global.__flushAnimationFrame = (frameTimestamp: number) => {\n    const currentCallbacks = animationFrameCallbacks;\n    animationFrameCallbacks = [];\n    currentCallbacks.forEach((f) => f(frameTimestamp));\n    callMicrotasks();\n  };\n\n  global.requestAnimationFrame = (\n    callback: (timestamp: number) => void\n  ): number => {\n    animationFrameCallbacks.push(callback);\n    if (animationFrameCallbacks.length === 1) {\n      // We schedule native requestAnimationFrame only when the first callback\n      // is added and then use it to execute all the enqueued callbacks. Once\n      // the callbacks are run, we clear the array.\n      nativeRequestAnimationFrame((timestamp) => {\n        if (lastNativeAnimationFrameTimestamp >= timestamp) {\n          // Make sure we only execute the callbacks once for a given frame\n          return;\n        }\n        lastNativeAnimationFrameTimestamp = timestamp;\n        global.__frameTimestamp = timestamp;\n        global.__flushAnimationFrame(timestamp);\n        global.__frameTimestamp = undefined;\n      });\n    }\n    // Reanimated currently does not support cancelling callbacks requested with\n    // requestAnimationFrame. We return -1 as identifier which isn't in line\n    // with the spec but it should give users better clue in case they actually\n    // attempt to store the value returned from rAF and use it for cancelling.\n    return -1;\n  };\n}\n\nexport function initializeUIRuntime() {\n  NativeReanimatedModule.installCoreFunctions(callGuardDEV, valueUnpacker);\n\n  const IS_JEST = isJest();\n  const IS_CHROME_DEBUGGER = isChromeDebugger();\n\n  if (IS_JEST) {\n    // requestAnimationFrame react-native jest's setup is incorrect as it polyfills\n    // the method directly using setTimeout, therefore the callback doesn't get the\n    // expected timestamp as the only argument: https://github.com/facebook/react-native/blob/main/jest/setup.js#L28\n    // We override this setup here to make sure that callbacks get the proper timestamps\n    // when executed. For non-jest environments we define requestAnimationFrame in setupRequestAnimationFrame\n    // @ts-ignore TypeScript uses Node definition for rAF, setTimeout, etc which returns a Timeout object rather than a number\n    global.requestAnimationFrame = (callback: (timestamp: number) => void) => {\n      return setTimeout(() => callback(performance.now()), 0);\n    };\n  }\n\n  // We really have to create a copy of console here. Function runOnJS we use on elements inside\n  // this object makes it not configurable\n  const capturableConsole = { ...console };\n  runOnUIImmediately(() => {\n    'worklet';\n    // setup error handler\n    global.__ErrorUtils = {\n      reportFatalError: (error: Error) => {\n        runOnJS(reportFatalErrorOnJS)({\n          message: error.message,\n          stack: error.stack,\n        });\n      },\n    };\n\n    if (!IS_CHROME_DEBUGGER) {\n      // setup console\n      // @ts-ignore TypeScript doesn't like that there are missing methods in console object, but we don't provide all the methods for the UI runtime console version\n      global.console = {\n        assert: runOnJS(capturableConsole.assert),\n        debug: runOnJS(capturableConsole.debug),\n        log: runOnJS(capturableConsole.log),\n        warn: runOnJS(capturableConsole.warn),\n        error: runOnJS(capturableConsole.error),\n        info: runOnJS(capturableConsole.info),\n      };\n    }\n\n    if (!IS_JEST) {\n      setupMicrotasks();\n      setupRequestAnimationFrame();\n    }\n  })();\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}