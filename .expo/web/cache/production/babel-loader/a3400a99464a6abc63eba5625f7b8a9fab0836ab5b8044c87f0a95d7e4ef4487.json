{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import{Platform}from'expo-modules-core';import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";function getScaledAssetPath(asset){var scale=AssetSourceResolver.pickScale(asset.scales,PixelRatio.get());var scaleSuffix=scale===1?'':'@'+scale+'x';var type=!asset.type?'':`.${asset.type}`;if(__DEV__){return asset.httpServerLocation+'/'+asset.name+scaleSuffix+type;}else{return asset.httpServerLocation.replace(/\\.\\.\\//g,'_')+'/'+asset.name+scaleSuffix+type;}}var AssetSourceResolver=function(){function AssetSourceResolver(serverUrl,jsbundleUrl,asset){_classCallCheck(this,AssetSourceResolver);this.serverUrl=serverUrl||'https://expo.dev';this.jsbundleUrl=null;this.asset=asset;}_createClass(AssetSourceResolver,[{key:\"isLoadedFromServer\",value:function isLoadedFromServer(){return true;}},{key:\"isLoadedFromFileSystem\",value:function isLoadedFromFileSystem(){return false;}},{key:\"defaultAsset\",value:function defaultAsset(){return this.assetServerURL();}},{key:\"assetServerURL\",value:function assetServerURL(){var fromUrl=new URL(getScaledAssetPath(this.asset),this.serverUrl);fromUrl.searchParams.set('platform',Platform.OS);fromUrl.searchParams.set('hash',this.asset.hash);return this.fromSource(fromUrl.toString().replace(fromUrl.origin,''));}},{key:\"fromSource\",value:function fromSource(source){var _this$asset$width,_this$asset$height;return{__packager_asset:true,width:(_this$asset$width=this.asset.width)!=null?_this$asset$width:undefined,height:(_this$asset$height=this.asset.height)!=null?_this$asset$height:undefined,uri:source,scale:AssetSourceResolver.pickScale(this.asset.scales,PixelRatio.get())};}}],[{key:\"pickScale\",value:function pickScale(scales,deviceScale){for(var i=0;i<scales.length;i++){if(scales[i]>=deviceScale){return scales[i];}}return scales[scales.length-1]||1;}}]);return AssetSourceResolver;}();export{AssetSourceResolver as default};","map":{"version":3,"mappings":"gIAAA,OAASA,QAAQ,KAAQ,mBAAmB,CAAC,iEAa7C,QAASC,mBAAkB,CAACC,KAAK,EAC/B,GAAMC,MAAK,CAAGC,mBAAmB,CAACC,SAAS,CAACH,KAAK,CAACI,MAAM,CAAEC,UAAU,CAACC,GAAG,EAAE,CAAC,CAC3E,GAAMC,YAAW,CAAGN,KAAK,GAAK,CAAC,CAAG,EAAE,CAAG,GAAG,CAAGA,KAAK,CAAG,GAAG,CACxD,GAAMO,KAAI,CAAG,CAACR,KAAK,CAACQ,IAAI,CAAG,EAAE,CAAG,IAAIR,KAAK,CAACQ,IAAI,EAAE,CAChD,GAAIC,OAAO,CAAE,CACX,MAAOT,MAAK,CAACU,kBAAkB,CAAG,GAAG,CAAGV,KAAK,CAACW,IAAI,CAAGJ,WAAW,CAAGC,IAAI,EACxE,IAAM,CACL,MAAOR,MAAK,CAACU,kBAAkB,CAACE,OAAO,CAAC,SAAS,CAAE,GAAG,CAAC,CAAG,GAAG,CAAGZ,KAAK,CAACW,IAAI,CAAGJ,WAAW,CAAGC,IAAI,EAEnG,CAAC,GAEoBN,oBAAmB,YAQtC,6BACEW,SAAoC,CACpCC,WAAsC,CACtCd,KAAoB,4CAEpB,IAAI,CAACa,SAAS,CAAGA,SAAS,EAAI,kBAAkB,CAChD,IAAI,CAACC,WAAW,CAAG,IAAI,CACvB,IAAI,CAACd,KAAK,CAAGA,KAAK,CACpB,CAAC,kEAGD,6BAAkB,CAChB,MAAO,KAAI,CACb,CAAC,sCAGD,iCAAsB,CACpB,MAAO,MAAK,CACd,CAAC,4BAED,uBAAY,CACV,MAAO,KAAI,CAACe,cAAc,EAAE,CAC9B,CAAC,8BAKD,yBAAc,CACZ,GAAMC,QAAO,CAAG,GAAIC,IAAG,CAAClB,kBAAkB,CAAC,IAAI,CAACC,KAAK,CAAC,CAAE,IAAI,CAACa,SAAS,CAAC,CACvEG,OAAO,CAACE,YAAY,CAACC,GAAG,CAAC,UAAU,CAAErB,QAAQ,CAACsB,EAAE,CAAC,CACjDJ,OAAO,CAACE,YAAY,CAACC,GAAG,CAAC,MAAM,CAAE,IAAI,CAACnB,KAAK,CAACqB,IAAI,CAAC,CACjD,MAAO,KAAI,CAACC,UAAU,CAEpBN,OAAO,CAACO,QAAQ,EAAE,CAACX,OAAO,CAACI,OAAO,CAACQ,MAAM,CAAE,EAAE,CAAC,CAC/C,CACH,CAAC,0BAED,oBAAWC,MAAc,2CACvB,MAAO,CACLC,gBAAgB,CAAE,IAAI,CACtBC,KAAK,oBAAE,IAAI,CAAC3B,KAAK,CAAC2B,KAAK,0BAAIC,SAAS,CACpCC,MAAM,qBAAE,IAAI,CAAC7B,KAAK,CAAC6B,MAAM,2BAAID,SAAS,CACtCE,GAAG,CAAEL,MAAM,CACXxB,KAAK,CAAEC,mBAAmB,CAACC,SAAS,CAAC,IAAI,CAACH,KAAK,CAACI,MAAM,CAAEC,UAAU,CAACC,GAAG,EAAE,EACzE,CACH,CAAC,2BAED,mBAAiBF,MAAgB,CAAE2B,WAAmB,EACpD,IAAK,GAAIC,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAG5B,MAAM,CAAC6B,MAAM,CAAED,CAAC,EAAE,CAAE,CACtC,GAAI5B,MAAM,CAAC4B,CAAC,CAAC,EAAID,WAAW,CAAE,CAC5B,MAAO3B,OAAM,CAAC4B,CAAC,CAAC,GAGpB,MAAO5B,OAAM,CAACA,MAAM,CAAC6B,MAAM,CAAG,CAAC,CAAC,EAAI,CAAC,CACvC,CAAC,0CA9DkB/B,mBAAmB","names":["Platform","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","PixelRatio","get","scaleSuffix","type","__DEV__","httpServerLocation","name","replace","serverUrl","jsbundleUrl","assetServerURL","fromUrl","URL","searchParams","set","OS","hash","fromSource","toString","origin","source","__packager_asset","width","undefined","height","uri","deviceScale","i","length"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/expo-asset/src/AssetSourceResolver.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { PixelRatio } from 'react-native';\nimport { PackagerAsset } from 'react-native/Libraries/Image/AssetRegistry';\n\nexport type ResolvedAssetSource = {\n  __packager_asset: boolean;\n  width?: number;\n  height?: number;\n  uri: string;\n  scale: number;\n};\n\n// Returns the Metro dev server-specific asset location.\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const type = !asset.type ? '' : `.${asset.type}`;\n  if (__DEV__) {\n    return asset.httpServerLocation + '/' + asset.name + scaleSuffix + type;\n  } else {\n    return asset.httpServerLocation.replace(/\\.\\.\\//g, '_') + '/' + asset.name + scaleSuffix + type;\n  }\n}\n\nexport default class AssetSourceResolver {\n  serverUrl: string;\n  // where the jsbundle is being run from\n  // NOTE(EvanBacon): Never defined on web.\n  jsbundleUrl?: string | null;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(\n    serverUrl: string | undefined | null,\n    jsbundleUrl: string | undefined | null,\n    asset: PackagerAsset\n  ) {\n    this.serverUrl = serverUrl || 'https://expo.dev';\n    this.jsbundleUrl = null;\n    this.asset = asset;\n  }\n\n  // Always true for web runtimes\n  isLoadedFromServer(): boolean {\n    return true;\n  }\n\n  // Always false for web runtimes\n  isLoadedFromFileSystem(): boolean {\n    return false;\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    return this.assetServerURL();\n  }\n\n  /**\n   * @returns absolute remote URL for the hosted asset.\n   */\n  assetServerURL(): ResolvedAssetSource {\n    const fromUrl = new URL(getScaledAssetPath(this.asset), this.serverUrl);\n    fromUrl.searchParams.set('platform', Platform.OS);\n    fromUrl.searchParams.set('hash', this.asset.hash);\n    return this.fromSource(\n      // Relative on web\n      fromUrl.toString().replace(fromUrl.origin, '')\n    );\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width ?? undefined,\n      height: this.asset.height ?? undefined,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: number[], deviceScale: number): number {\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n    return scales[scales.length - 1] || 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}