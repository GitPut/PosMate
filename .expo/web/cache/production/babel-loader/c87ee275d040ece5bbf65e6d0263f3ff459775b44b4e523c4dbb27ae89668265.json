{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _get from\"@babel/runtime/helpers/get\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{EventTypes,MouseButtons,PointerType}from\"../interfaces\";import EventManager from\"./EventManager\";import{isPointerInBounds}from\"../utils\";var PointerEventManager=function(_EventManager){_inherits(PointerEventManager,_EventManager);var _super=_createSuper(PointerEventManager);function PointerEventManager(){var _this;_classCallCheck(this,PointerEventManager);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"trackedPointers\",new Set());return _this;}_createClass(PointerEventManager,[{key:\"setListeners\",value:function setListeners(){var _this2=this;this.view.addEventListener('pointerdown',function(event){if(event.pointerType===PointerType.TOUCH){return;}if(!isPointerInBounds(_this2.view,{x:event.clientX,y:event.clientY})){return;}var adaptedEvent=_this2.mapEvent(event,EventTypes.DOWN);var target=event.target;target.setPointerCapture(adaptedEvent.pointerId);_this2.markAsInBounds(adaptedEvent.pointerId);_this2.trackedPointers.add(adaptedEvent.pointerId);if(++_this2.activePointersCounter>1){adaptedEvent.eventType=EventTypes.ADDITIONAL_POINTER_DOWN;_this2.onPointerAdd(adaptedEvent);}else{_this2.onPointerDown(adaptedEvent);}});this.view.addEventListener('pointerup',function(event){if(event.pointerType===PointerType.TOUCH){return;}if(_this2.activePointersCounter===0){return;}var adaptedEvent=_this2.mapEvent(event,EventTypes.UP);var target=event.target;target.releasePointerCapture(adaptedEvent.pointerId);_this2.markAsOutOfBounds(adaptedEvent.pointerId);_this2.trackedPointers.delete(adaptedEvent.pointerId);if(--_this2.activePointersCounter>0){adaptedEvent.eventType=EventTypes.ADDITIONAL_POINTER_UP;_this2.onPointerRemove(adaptedEvent);}else{_this2.onPointerUp(adaptedEvent);}});this.view.addEventListener('pointermove',function(event){if(event.pointerType===PointerType.TOUCH){return;}if(event.pointerType===PointerType.MOUSE&&event.buttons!==MouseButtons.LEFT){return;}var adaptedEvent=_this2.mapEvent(event,EventTypes.MOVE);var inBounds=isPointerInBounds(_this2.view,{x:adaptedEvent.x,y:adaptedEvent.y});var pointerIndex=_this2.pointersInBounds.indexOf(adaptedEvent.pointerId);if(inBounds){if(pointerIndex<0){adaptedEvent.eventType=EventTypes.ENTER;_this2.onPointerEnter(adaptedEvent);_this2.markAsInBounds(adaptedEvent.pointerId);}else{_this2.onPointerMove(adaptedEvent);}}else{if(pointerIndex>=0){adaptedEvent.eventType=EventTypes.OUT;_this2.onPointerOut(adaptedEvent);_this2.markAsOutOfBounds(adaptedEvent.pointerId);}else{_this2.onPointerOutOfBounds(adaptedEvent);}}});this.view.addEventListener('pointercancel',function(event){if(event.pointerType===PointerType.TOUCH){return;}var adaptedEvent=_this2.mapEvent(event,EventTypes.CANCEL);_this2.onPointerCancel(adaptedEvent);_this2.markAsOutOfBounds(adaptedEvent.pointerId);_this2.activePointersCounter=0;_this2.trackedPointers.clear();});this.view.addEventListener('lostpointercapture',function(event){var adaptedEvent=_this2.mapEvent(event,EventTypes.CANCEL);if(_this2.trackedPointers.has(adaptedEvent.pointerId)){_this2.onPointerCancel(adaptedEvent);_this2.activePointersCounter=0;_this2.trackedPointers.clear();}});}},{key:\"mapEvent\",value:function mapEvent(event,eventType){return{x:event.clientX,y:event.clientY,offsetX:event.offsetX,offsetY:event.offsetY,pointerId:event.pointerId,eventType:eventType,pointerType:event.pointerType,buttons:event.buttons,time:event.timeStamp};}},{key:\"resetManager\",value:function resetManager(){_get(_getPrototypeOf(PointerEventManager.prototype),\"resetManager\",this).call(this);this.trackedPointers.clear();}}]);return PointerEventManager;}(EventManager);export{PointerEventManager as default};","map":{"version":3,"mappings":"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","names":["EventTypes","MouseButtons","PointerType","EventManager","isPointerInBounds","PointerEventManager","Set","setListeners","view","addEventListener","event","pointerType","TOUCH","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","setPointerCapture","pointerId","markAsInBounds","trackedPointers","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOUSE","buttons","LEFT","MOVE","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","OUT","onPointerOut","onPointerOutOfBounds","CANCEL","onPointerCancel","clear","has","offsetX","offsetY","time","timeStamp","resetManager"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/react-native-gesture-handler/lib/module/web/tools/PointerEventManager.ts"],"sourcesContent":["import {\n  AdaptedEvent,\n  EventTypes,\n  MouseButtons,\n  PointerType,\n} from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class PointerEventManager extends EventManager {\n  private trackedPointers = new Set<number>();\n\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.markAsInBounds(adaptedEvent.pointerId);\n      this.trackedPointers.add(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.trackedPointers.delete(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      if (\n        event.pointerType === PointerType.MOUSE &&\n        event.buttons !== MouseButtons.LEFT\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    });\n\n    this.view.addEventListener(\n      'lostpointercapture',\n      (event: PointerEvent): void => {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.CANCEL\n        );\n\n        if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n          // in some cases the `pointerup` event is not fired, but `lostpointercapture` is\n          // we simulate the `pointercancel` event here to make sure the gesture handler stops tracking it\n          this.onPointerCancel(adaptedEvent);\n\n          this.activePointersCounter = 0;\n          this.trackedPointers.clear();\n        }\n      }\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}