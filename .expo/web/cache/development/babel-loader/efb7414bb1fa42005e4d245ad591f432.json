{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState } from \"react\";\nimport useWindowDimensions from \"../../components/useWindowDimensions\";\nimport Logo from \"../../assets/dpos-logo.png\";\nimport MenuScreenInnerBlock from \"../../components/MenuScreenInnerBlock\";\nimport { userStoreState } from \"../../state/state\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MenuScreen = function MenuScreen() {\n  var _catalog$categories2;\n  var _useWindowDimensions = useWindowDimensions(),\n    height = _useWindowDimensions.height,\n    width = _useWindowDimensions.width;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    section = _useState2[0],\n    setsection = _useState2[1];\n  var catalog = userStoreState.use();\n  var SectionSelector = function SectionSelector() {\n    var _catalog$categories;\n    return _jsxs(View, {\n      style: {\n        backgroundColor: \"rgba(31,35,48,1)\",\n        width: \"23%\",\n        height: \"100%\",\n        alignItems: \"center\",\n        alignSelf: \"center\"\n      },\n      children: [_jsx(Image, {\n        source: Logo,\n        style: {\n          width: 200,\n          height: 160,\n          resizeMode: \"contain\"\n        }\n      }), _jsx(ScrollView, {\n        contentContainerStyle: {\n          height: \"90%\",\n          alignItems: \"center\"\n        },\n        children: (_catalog$categories = catalog.categories) == null ? void 0 : _catalog$categories.map(function (category, index) {\n          return _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              setsection(category);\n            },\n            style: {\n              padding: 10\n            },\n            children: _jsx(Text, {\n              style: [section === null && index === 0 && {\n                color: \"white\",\n                fontWeight: \"700\",\n                borderBottomWidth: 1,\n                borderBottomColor: \"white\"\n              } || section === category && {\n                color: \"white\",\n                fontWeight: \"700\",\n                borderBottomWidth: 1,\n                borderBottomColor: \"white\"\n              }, {\n                fontSize: 16,\n                color: \"white\"\n              }],\n              children: category\n            })\n          }, index);\n        })\n      })]\n    });\n  };\n  return _jsxs(View, {\n    style: styles({\n      height: height,\n      width: width\n    }).container,\n    children: [_jsx(SectionSelector, {}), (_catalog$categories2 = catalog.categories) == null ? void 0 : _catalog$categories2.map(function (category, index) {\n      var visible;\n      if (section === null && index === 0) {\n        visible = true;\n      }\n      return _jsx(MenuScreenInnerBlock, {\n        category: category,\n        height: height,\n        visible: category\n      });\n    })]\n  });\n};\nexport default React.memo(MenuScreen);\nvar styles = function styles(props) {\n  return StyleSheet.create({\n    container: {\n      backgroundColor: \"white\",\n      height: \"100%\",\n      width: props.width * 0.7,\n      flexDirection: \"row\"\n    },\n    wrapper: {\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-between\",\n      paddingLeft: 50,\n      paddingRight: 50\n    },\n    scrollview: {\n      width: \"100%\"\n    }\n  });\n};","map":{"version":3,"names":["React","useState","useWindowDimensions","Logo","MenuScreenInnerBlock","userStoreState","MenuScreen","height","width","section","setsection","catalog","use","SectionSelector","backgroundColor","alignItems","alignSelf","resizeMode","categories","map","category","index","padding","color","fontWeight","borderBottomWidth","borderBottomColor","fontSize","styles","container","visible","memo","props","StyleSheet","create","flexDirection","wrapper","flexWrap","justifyContent","paddingLeft","paddingRight","scrollview"],"sources":["/Users/peterputros/Desktop/PosMate/screens/authed/MenuScreen.tsx"],"sourcesContent":["import {\n  Image,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport React, { useState } from \"react\";\nimport useWindowDimensions from \"components/useWindowDimensions\";\nimport Logo from \"assets/dpos-logo.png\";\nimport MenuScreenInnerBlock from \"components/MenuScreenInnerBlock\";\nimport { userStoreState } from \"state/state\";\n\nconst MenuScreen = () => {\n  const { height, width } = useWindowDimensions();\n  const [section, setsection] = useState(null);\n  const catalog = userStoreState.use();\n\n  const SectionSelector = () => {\n    return (\n      <View\n        style={{\n          backgroundColor: \"rgba(31,35,48,1)\",\n          width: \"23%\",\n          height: \"100%\",\n          alignItems: \"center\",\n          alignSelf: \"center\",\n        }}\n      >\n        <Image\n          source={Logo}\n          style={{ width: 200, height: 160, resizeMode: \"contain\" }}\n        />\n        <ScrollView\n          contentContainerStyle={{\n            height: \"90%\",\n            alignItems: \"center\",\n          }}\n        >\n          {catalog.categories?.map((category, index) => {\n            return (\n              <TouchableOpacity\n                key={index}\n                onPress={() => {\n                  setsection(category);\n                }}\n                style={{ padding: 10 }}\n              >\n                <Text\n                  style={[\n                    (section === null &&\n                      index === 0 && {\n                        color: \"white\",\n                        fontWeight: \"700\",\n                        borderBottomWidth: 1,\n                        borderBottomColor: \"white\",\n                      }) ||\n                      (section === category && {\n                        color: \"white\",\n                        fontWeight: \"700\",\n                        borderBottomWidth: 1,\n                        borderBottomColor: \"white\",\n                      }),\n                    { fontSize: 16, color: \"white\" },\n                  ]}\n                >\n                  {category}\n                </Text>\n              </TouchableOpacity>\n            );\n          })}\n        </ScrollView>\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles({ height, width }).container}>\n      <SectionSelector />\n      {catalog.categories?.map((category, index) => {\n        let visible\n\n        if (section === null && index === 0) {\n          visible = true\n        }\n        \n\n        return (\n          <MenuScreenInnerBlock\n            category={category}\n            height={height}\n            visible={category}\n          />\n        );\n      })\n      }\n    </View>\n  );\n};\n\nexport default React.memo(MenuScreen);\n\nconst styles = (props) =>\n  StyleSheet.create({\n    container: {\n      backgroundColor: \"white\",\n      height: \"100%\",\n      width: props.width * 0.7,\n      flexDirection: \"row\",\n    },\n    wrapper: {\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-between\",\n      paddingLeft: 50,\n      paddingRight: 50,\n    },\n    scrollview: {\n      width: \"100%\",\n    },\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}