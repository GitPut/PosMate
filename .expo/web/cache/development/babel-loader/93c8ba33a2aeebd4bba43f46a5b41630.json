{"ast":null,"code":"import React from \"react\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Theme1 = React.lazy(function () {\n  return import(\"./AuthTheme\");\n});\nvar ThemeSelector = function ThemeSelector(_ref) {\n  var children = _ref.children;\n  return _jsxs(_Fragment, {\n    children: [_jsx(React.Suspense, {\n      fallback: function fallback() {\n        return null;\n      },\n      children: _jsx(Theme1, {})\n    }), children]\n  });\n};\nexport default ThemeSelector;","map":{"version":3,"names":["React","Theme1","lazy","ThemeSelector","children"],"sources":["/Users/peterputros/Desktop/PosMate/navigation/ThemeSelector.tsx"],"sourcesContent":["import React from \"react\";\n\n/**\n * The theme components only imports it's theme CSS-file. These components are lazy\n * loaded, to enable \"code splitting\" (in order to avoid the themes being bundled together)\n */\nconst Theme1 = React.lazy(() => import(\"./AuthTheme\"));\n\nconst ThemeSelector: React.FC = ({ children }) => (\n  <>\n    {/* Conditionally render theme, based on the current client context */}\n    <React.Suspense fallback={() => null}>\n<Theme1 />\n    </React.Suspense>\n    {/* Render children immediately! */}\n    {children}\n  </>\n);\n\nexport default ThemeSelector;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAAC;AAAA;AAAA;AAM1B,IAAMC,MAAM,GAAGD,KAAK,CAACE,IAAI,CAAC;EAAA,OAAM,MAAM,eAAe;AAAA,EAAC;AAEtD,IAAMC,aAAuB,GAAG,SAA1BA,aAAuB;EAAA,IAAMC,QAAQ,QAARA,QAAQ;EAAA,OACzC;IAAA,WAEE,KAAC,KAAK,CAAC,QAAQ;MAAC,QAAQ,EAAE;QAAA,OAAM,IAAI;MAAA,CAAC;MAAA,UACzC,KAAC,MAAM;IAAG,EACW,EAEhBA,QAAQ;EAAA,EACR;AAAA,CACJ;AAED,eAAeD,aAAa"},"metadata":{},"sourceType":"module"}