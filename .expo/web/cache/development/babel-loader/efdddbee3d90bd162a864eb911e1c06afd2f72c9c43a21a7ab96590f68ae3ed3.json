{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { jsVersion } from \"./jsVersion\";\nexport function checkCppVersion() {\n  var cppVersion = global._REANIMATED_VERSION_CPP;\n  if (cppVersion === undefined) {\n    throw new Error(`[Reanimated] Couldn't determine the version of the native part of Reanimated. Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must use the exact version which is bundled into Expo SDK.`);\n  }\n  var ok = matchVersion(jsVersion, cppVersion);\n  if (!ok) {\n    throw new Error(`[Reanimated] Mismatch between JavaScript part and native part of Reanimated (${jsVersion} vs. ${cppVersion}). Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must downgrade to ${cppVersion} which is bundled into Expo SDK.`);\n  }\n}\nexport function matchVersion(version1, version2) {\n  if (version1.match(/^\\d+\\.\\d+\\.\\d+$/) && version2.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n    var _version1$split = version1.split('.'),\n      _version1$split2 = _slicedToArray(_version1$split, 2),\n      major1 = _version1$split2[0],\n      minor1 = _version1$split2[1];\n    var _version2$split = version2.split('.'),\n      _version2$split2 = _slicedToArray(_version2$split, 2),\n      major2 = _version2$split2[0],\n      minor2 = _version2$split2[1];\n    return major1 === major2 && minor1 === minor2;\n  } else {\n    return version1 === version2;\n  }\n}","map":{"version":3,"mappings":";AAAA,SAASA,SAAS;AAElB,OAAO,SAASC,eAAeA,GAAG;EAChC,IAAMC,UAAU,GAAGC,MAAM,CAACC,uBAAuB;EACjD,IAAIF,UAAU,KAAKG,SAAS,EAAE;IAC5B,MAAM,IAAIC,KAAK,CACZ,8OAA6O,CAC/O;EACH;EACA,IAAMC,EAAE,GAAGC,YAAY,CAACR,SAAS,EAAEE,UAAU,CAAC;EAC9C,IAAI,CAACK,EAAE,EAAE;IACP,MAAM,IAAID,KAAK,CACZ,gFAA+EN,SAAU,QAAOE,UAAW,4HAA2HA,UAAW,kCAAiC,CACpR;EACH;AACF;AAEA,OAAO,SAASM,YAAYA,CAACC,QAAgB,EAAEC,QAAgB,EAAE;EAC/D,IAAID,QAAQ,CAACE,KAAK,CAAC,iBAAiB,CAAC,IAAID,QAAQ,CAACC,KAAK,CAAC,iBAAiB,CAAC,EAAE;IAE1E,sBAAyBF,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC;MAAA;MAArCC,MAAM;MAAEC,MAAM;IACrB,sBAAyBJ,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC;MAAA;MAArCG,MAAM;MAAEC,MAAM;IACrB,OAAOH,MAAM,KAAKE,MAAM,IAAID,MAAM,KAAKE,MAAM;EAC/C,CAAC,MAAM;IAEL,OAAOP,QAAQ,KAAKC,QAAQ;EAC9B;AACF","names":["jsVersion","checkCppVersion","cppVersion","global","_REANIMATED_VERSION_CPP","undefined","Error","ok","matchVersion","version1","version2","match","split","major1","minor1","major2","minor2"],"sources":["/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/platform-specific/checkCppVersion.ts"],"sourcesContent":["import { jsVersion } from './jsVersion';\n\nexport function checkCppVersion() {\n  const cppVersion = global._REANIMATED_VERSION_CPP;\n  if (cppVersion === undefined) {\n    throw new Error(\n      `[Reanimated] Couldn't determine the version of the native part of Reanimated. Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must use the exact version which is bundled into Expo SDK.`\n    );\n  }\n  const ok = matchVersion(jsVersion, cppVersion);\n  if (!ok) {\n    throw new Error(\n      `[Reanimated] Mismatch between JavaScript part and native part of Reanimated (${jsVersion} vs. ${cppVersion}). Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must downgrade to ${cppVersion} which is bundled into Expo SDK.`\n    );\n  }\n}\n\nexport function matchVersion(version1: string, version2: string) {\n  if (version1.match(/^\\d+\\.\\d+\\.\\d+$/) && version2.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n    // x.y.z, compare only major and minor, skip patch\n    const [major1, minor1] = version1.split('.');\n    const [major2, minor2] = version2.split('.');\n    return major1 === major2 && minor1 === minor2;\n  } else {\n    // alpha, beta or rc, compare everything\n    return version1 === version2;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}