{"ast":null,"code":"(function ($) {\n  var options = {\n    series: {\n      fillBetween: null\n    }\n  };\n  function init(plot) {\n    function findBottomSeries(s, allseries) {\n      var i;\n      for (i = 0; i < allseries.length; ++i) {\n        if (allseries[i].id === s.fillBetween) {\n          return allseries[i];\n        }\n      }\n      if (typeof s.fillBetween === \"number\") {\n        if (s.fillBetween < 0 || s.fillBetween >= allseries.length) {\n          return null;\n        }\n        return allseries[s.fillBetween];\n      }\n      return null;\n    }\n    function computeFillBottoms(plot, s, datapoints) {\n      if (s.fillBetween == null) {\n        return;\n      }\n      var other = findBottomSeries(s, plot.getData());\n      if (!other) {\n        return;\n      }\n      var ps = datapoints.pointsize,\n        points = datapoints.points,\n        otherps = other.datapoints.pointsize,\n        otherpoints = other.datapoints.points,\n        newpoints = [],\n        px,\n        py,\n        intery,\n        qx,\n        qy,\n        bottom,\n        withlines = s.lines.show,\n        withbottom = ps > 2 && datapoints.format[2].y,\n        withsteps = withlines && s.lines.steps,\n        fromgap = true,\n        i = 0,\n        j = 0,\n        l,\n        m;\n      while (true) {\n        if (i >= points.length) {\n          break;\n        }\n        l = newpoints.length;\n        if (points[i] == null) {\n          for (m = 0; m < ps; ++m) {\n            newpoints.push(points[i + m]);\n          }\n          i += ps;\n        } else if (j >= otherpoints.length) {\n          if (!withlines) {\n            for (m = 0; m < ps; ++m) {\n              newpoints.push(points[i + m]);\n            }\n          }\n          i += ps;\n        } else if (otherpoints[j] == null) {\n          for (m = 0; m < ps; ++m) {\n            newpoints.push(null);\n          }\n          fromgap = true;\n          j += otherps;\n        } else {\n          px = points[i];\n          py = points[i + 1];\n          qx = otherpoints[j];\n          qy = otherpoints[j + 1];\n          bottom = 0;\n          if (px === qx) {\n            for (m = 0; m < ps; ++m) {\n              newpoints.push(points[i + m]);\n            }\n            bottom = qy;\n            i += ps;\n            j += otherps;\n          } else if (px > qx) {\n            if (withlines && i > 0 && points[i - ps] != null) {\n              intery = py + (points[i - ps + 1] - py) * (qx - px) / (points[i - ps] - px);\n              newpoints.push(qx);\n              newpoints.push(intery);\n              for (m = 2; m < ps; ++m) {\n                newpoints.push(points[i + m]);\n              }\n              bottom = qy;\n            }\n            j += otherps;\n          } else {\n            if (fromgap && withlines) {\n              i += ps;\n              continue;\n            }\n            for (m = 0; m < ps; ++m) {\n              newpoints.push(points[i + m]);\n            }\n            if (withlines && j > 0 && otherpoints[j - otherps] != null) {\n              bottom = qy + (otherpoints[j - otherps + 1] - qy) * (px - qx) / (otherpoints[j - otherps] - qx);\n            }\n            i += ps;\n          }\n          fromgap = false;\n          if (l !== newpoints.length && withbottom) {\n            newpoints[l + 2] = bottom;\n          }\n        }\n        if (withsteps && l !== newpoints.length && l > 0 && newpoints[l] !== null && newpoints[l] !== newpoints[l - ps] && newpoints[l + 1] !== newpoints[l - ps + 1]) {\n          for (m = 0; m < ps; ++m) {\n            newpoints[l + ps + m] = newpoints[l + m];\n          }\n          newpoints[l + 1] = newpoints[l - ps + 1];\n        }\n      }\n      datapoints.points = newpoints;\n    }\n    plot.hooks.processDatapoints.push(computeFillBottoms);\n  }\n  $.plot.plugins.push({\n    init: init,\n    options: options,\n    name: \"fillbetween\",\n    version: \"1.0\"\n  });\n})(jQuery);","map":{"version":3,"names":["$","options","series","fillBetween","init","plot","findBottomSeries","s","allseries","i","length","id","computeFillBottoms","datapoints","other","getData","ps","pointsize","points","otherps","otherpoints","newpoints","px","py","intery","qx","qy","bottom","withlines","lines","show","withbottom","format","y","withsteps","steps","fromgap","j","l","m","push","hooks","processDatapoints","plugins","name","version","jQuery"],"sources":["/Users/peterputros/Desktop/PosMate/assets/plugins/flot/jquery.flot.fillbetween.js"],"sourcesContent":["/* Flot plugin for computing bottoms for filled line and bar charts.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe case: you've got two series that you want to fill the area between. In Flot\nterms, you need to use one as the fill bottom of the other. You can specify the\nbottom of each data point as the third coordinate manually, or you can use this\nplugin to compute it for you.\n\nIn order to name the other series, you need to give it an id, like this:\n\n\tvar dataset = [\n\t\t{ data: [ ... ], id: \"foo\" } ,         // use default bottom\n\t\t{ data: [ ... ], fillBetween: \"foo\" }, // use first dataset as bottom\n\t];\n\n\t$.plot($(\"#placeholder\"), dataset, { lines: { show: true, fill: true }});\n\nAs a convenience, if the id given is a number that doesn't appear as an id in\nthe series, it is interpreted as the index in the array instead (so fillBetween:\n0 can also mean the first series).\n\nInternally, the plugin modifies the datapoints in each series. For line series,\nextra data points might be inserted through interpolation. Note that at points\nwhere the bottom line is not defined (due to a null point or start/end of line),\nthe current line will show a gap too. The algorithm comes from the\njquery.flot.stack.js plugin, possibly some code could be shared.\n\n*/\n\n(function ( $ ) {\n\n\tvar options = {\n\t\tseries: {\n\t\t\tfillBetween: null\t// or number\n\t\t}\n\t};\n\n\tfunction init( plot ) {\n\n\t\tfunction findBottomSeries( s, allseries ) {\n\n\t\t\tvar i;\n\n\t\t\tfor ( i = 0; i < allseries.length; ++i ) {\n\t\t\t\tif ( allseries[ i ].id === s.fillBetween ) {\n\t\t\t\t\treturn allseries[ i ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( typeof s.fillBetween === \"number\" ) {\n\t\t\t\tif ( s.fillBetween < 0 || s.fillBetween >= allseries.length ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn allseries[ s.fillBetween ];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction computeFillBottoms( plot, s, datapoints ) {\n\n\t\t\tif ( s.fillBetween == null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar other = findBottomSeries( s, plot.getData() );\n\n\t\t\tif ( !other ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar ps = datapoints.pointsize,\n\t\t\t\tpoints = datapoints.points,\n\t\t\t\totherps = other.datapoints.pointsize,\n\t\t\t\totherpoints = other.datapoints.points,\n\t\t\t\tnewpoints = [],\n\t\t\t\tpx, py, intery, qx, qy, bottom,\n\t\t\t\twithlines = s.lines.show,\n\t\t\t\twithbottom = ps > 2 && datapoints.format[2].y,\n\t\t\t\twithsteps = withlines && s.lines.steps,\n\t\t\t\tfromgap = true,\n\t\t\t\ti = 0,\n\t\t\t\tj = 0,\n\t\t\t\tl, m;\n\n\t\t\twhile ( true ) {\n\n\t\t\t\tif ( i >= points.length ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tl = newpoints.length;\n\n\t\t\t\tif ( points[ i ] == null ) {\n\n\t\t\t\t\t// copy gaps\n\n\t\t\t\t\tfor ( m = 0; m < ps; ++m ) {\n\t\t\t\t\t\tnewpoints.push( points[ i + m ] );\n\t\t\t\t\t}\n\n\t\t\t\t\ti += ps;\n\n\t\t\t\t} else if ( j >= otherpoints.length ) {\n\n\t\t\t\t\t// for lines, we can't use the rest of the points\n\n\t\t\t\t\tif ( !withlines ) {\n\t\t\t\t\t\tfor ( m = 0; m < ps; ++m ) {\n\t\t\t\t\t\t\tnewpoints.push( points[ i + m ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ti += ps;\n\n\t\t\t\t} else if ( otherpoints[ j ] == null ) {\n\n\t\t\t\t\t// oops, got a gap\n\n\t\t\t\t\tfor ( m = 0; m < ps; ++m ) {\n\t\t\t\t\t\tnewpoints.push( null );\n\t\t\t\t\t}\n\n\t\t\t\t\tfromgap = true;\n\t\t\t\t\tj += otherps;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// cases where we actually got two points\n\n\t\t\t\t\tpx = points[ i ];\n\t\t\t\t\tpy = points[ i + 1 ];\n\t\t\t\t\tqx = otherpoints[ j ];\n\t\t\t\t\tqy = otherpoints[ j + 1 ];\n\t\t\t\t\tbottom = 0;\n\n\t\t\t\t\tif ( px === qx ) {\n\n\t\t\t\t\t\tfor ( m = 0; m < ps; ++m ) {\n\t\t\t\t\t\t\tnewpoints.push( points[ i + m ] );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//newpoints[ l + 1 ] += qy;\n\t\t\t\t\t\tbottom = qy;\n\n\t\t\t\t\t\ti += ps;\n\t\t\t\t\t\tj += otherps;\n\n\t\t\t\t\t} else if ( px > qx ) {\n\n\t\t\t\t\t\t// we got past point below, might need to\n\t\t\t\t\t\t// insert interpolated extra point\n\n\t\t\t\t\t\tif ( withlines && i > 0 && points[ i - ps ] != null ) {\n\t\t\t\t\t\t\tintery = py + ( points[ i - ps + 1 ] - py ) * ( qx - px ) / ( points[ i - ps ] - px );\n\t\t\t\t\t\t\tnewpoints.push( qx );\n\t\t\t\t\t\t\tnewpoints.push( intery );\n\t\t\t\t\t\t\tfor ( m = 2; m < ps; ++m ) {\n\t\t\t\t\t\t\t\tnewpoints.push( points[ i + m ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbottom = qy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tj += otherps;\n\n\t\t\t\t\t} else { // px < qx\n\n\t\t\t\t\t\t// if we come from a gap, we just skip this point\n\n\t\t\t\t\t\tif ( fromgap && withlines ) {\n\t\t\t\t\t\t\ti += ps;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( m = 0; m < ps; ++m ) {\n\t\t\t\t\t\t\tnewpoints.push( points[ i + m ] );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// we might be able to interpolate a point below,\n\t\t\t\t\t\t// this can give us a better y\n\n\t\t\t\t\t\tif ( withlines && j > 0 && otherpoints[ j - otherps ] != null ) {\n\t\t\t\t\t\t\tbottom = qy + ( otherpoints[ j - otherps + 1 ] - qy ) * ( px - qx ) / ( otherpoints[ j - otherps ] - qx );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//newpoints[l + 1] += bottom;\n\n\t\t\t\t\t\ti += ps;\n\t\t\t\t\t}\n\n\t\t\t\t\tfromgap = false;\n\n\t\t\t\t\tif ( l !== newpoints.length && withbottom ) {\n\t\t\t\t\t\tnewpoints[ l + 2 ] = bottom;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// maintain the line steps invariant\n\n\t\t\t\tif ( withsteps && l !== newpoints.length && l > 0 &&\n\t\t\t\t\tnewpoints[ l ] !== null &&\n\t\t\t\t\tnewpoints[ l ] !== newpoints[ l - ps ] &&\n\t\t\t\t\tnewpoints[ l + 1 ] !== newpoints[ l - ps + 1 ] ) {\n\t\t\t\t\tfor (m = 0; m < ps; ++m) {\n\t\t\t\t\t\tnewpoints[ l + ps + m ] = newpoints[ l + m ];\n\t\t\t\t\t}\n\t\t\t\t\tnewpoints[ l + 1 ] = newpoints[ l - ps + 1 ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdatapoints.points = newpoints;\n\t\t}\n\n\t\tplot.hooks.processDatapoints.push( computeFillBottoms );\n\t}\n\n\t$.plot.plugins.push({\n\t\tinit: init,\n\t\toptions: options,\n\t\tname: \"fillbetween\",\n\t\tversion: \"1.0\"\n\t});\n\n})(jQuery);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}