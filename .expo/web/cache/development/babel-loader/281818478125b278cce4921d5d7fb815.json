{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState } from \"react\";\nimport { Button, Text } from \"@react-native-material/core\";\nimport { storeDetailState, transListState } from \"../../state/state\";\nimport { updateTransList } from \"../../state/firebaseFunctions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar tz = require(\"moment-timezone\");\nvar ViewTransactions = function ViewTransactions() {\n  var local = transListState.use();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    transList = _useState2[0],\n    settransList = _useState2[1];\n  var today = new Date();\n  var _useState3 = useState({\n      todaysReceiptValue: 0,\n      todaysReceipts: 0\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    todaysDetails = _useState4[0],\n    setTodaysDetails = _useState4[1];\n  var storeDetails = storeDetailState.use();\n  var FixData = function FixData() {\n    var fixedArr = JSON.parse(local);\n    updateTransList(fixedArr);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: {\n        textAlign: \"center\",\n        margin: 25\n      },\n      children: \"List Of Transactions\"\n    }), _jsx(Button, {\n      title: \"FIX ARR\",\n      onPress: FixData\n    }), _jsx(View, {\n      style: {\n        flexDirection: \"row\",\n        width: \"100%\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: _jsxs(Text, {\n        style: {\n          textAlign: \"center\",\n          margin: 25\n        },\n        children: [\"Todays Total Price: \", todaysDetails.todaysReceiptValue]\n      })\n    })]\n  });\n};\nexport default ViewTransactions;\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n    flex: 1,\n    height: \"100%\"\n  },\n  contentContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-between\",\n    paddingLeft: 50,\n    paddingRight: 50,\n    paddingBottom: 50,\n    height: \"100%\",\n    width: \"100%\",\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"names":["React","useState","Button","Text","storeDetailState","transListState","updateTransList","tz","require","ViewTransactions","local","use","transList","settransList","today","Date","todaysReceiptValue","todaysReceipts","todaysDetails","setTodaysDetails","storeDetails","FixData","fixedArr","JSON","parse","styles","container","textAlign","margin","flexDirection","width","alignItems","justifyContent","StyleSheet","create","backgroundColor","flex","height","contentContainer","flexWrap","paddingLeft","paddingRight","paddingBottom"],"sources":["/Users/peterputros/Desktop/PosMate/screens/authed/ViewTransactions.tsx"],"sourcesContent":["import { ScrollView, StyleSheet, View } from \"react-native\";\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { Button, Text } from \"@react-native-material/core\";\nimport { storeDetailState, transListState } from \"state/state\";\nimport { updateTransList } from \"state/firebaseFunctions\";\nconst tz = require(\"moment-timezone\");\n\nconst ViewTransactions = () => {\n  const local = transListState.use();\n  const [transList, settransList] = useState([]);\n  const today = new Date();\n  const [todaysDetails, setTodaysDetails] = useState({\n    todaysReceiptValue: 0,\n    todaysReceipts: 0,\n  });\n  const storeDetails = storeDetailState.use();\n\n  const FixData = () => {\n    let fixedArr = JSON.parse(local);\n    updateTransList(fixedArr);\n  };\n\n  // useEffect(() => {\n  //   if (local?.length > 0) {\n  //     local\n  //       .sort(function (a, b) {\n  //         if (a.date && b.date) {\n  //           return a.date.seconds - b.date.seconds;\n  //         } else if (a.date && b.date_created) {\n  //           const targetTimezone =\n  //             Intl.DateTimeFormat().resolvedOptions().timeZone;\n  //           const newDateA = new Date(a.date.seconds * 1000);\n  //           const newDateB = new Date(b.date_created + \"Z\");\n  //           const resultA = tz(newDateA).tz(targetTimezone, true);\n  //           const resultB = tz(newDateB).tz(targetTimezone, true);\n\n  //           return resultA.valueOf() - resultB.valueOf();\n  //         } else if (a.date_created && b.date) {\n  //           const targetTimezone =\n  //             Intl.DateTimeFormat().resolvedOptions().timeZone;\n  //           const newDateA = new Date(a.date_created + \"Z\");\n  //           const newDateB = new Date(b.date.seconds * 1000);\n  //           const resultA = tz(newDateA).tz(targetTimezone, true);\n  //           const resultB = tz(newDateB).tz(targetTimezone, true);\n\n  //           return resultA.valueOf() - resultB.valueOf();\n  //         } else {\n  //           const targetTimezone =\n  //             Intl.DateTimeFormat().resolvedOptions().timeZone;\n  //           const newDateA = new Date(a.date_created + \"Z\");\n  //           const newDateB = new Date(b.date_created + \"Z\");\n  //           const resultA = tz(newDateA).tz(targetTimezone, true);\n  //           const resultB = tz(newDateB).tz(targetTimezone, true);\n\n  //           return resultA.valueOf() - resultB.valueOf();\n  //         }\n  //       })\n  //       .reverse();\n  //     settransList(local);\n  //     const todaysReceiptValue = local.reduce((accumulator, current) => {\n  //       let date;\n  //       const targetTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  //       if (current.date) {\n  //         const localDatePreConv = new Date(current.date.seconds * 1000);\n  //         date = tz(localDatePreConv).tz(targetTimezone, true);\n  //       } else {\n  //         const localDatePreConv = new Date(current.date_created + \"Z\");\n  //         date = tz(localDatePreConv).tz(targetTimezone, true);\n  //       }\n  //       // Get the current date in the desired time zone\n  //       let today = tz().tz(targetTimezone);\n\n  //       if (\n  //         today.year() === date.year() &&\n  //         today.month() === date.month() &&\n  //         today.dayOfYear() === date.dayOfYear()\n  //       ) {\n  //         return (\n  //           accumulator +\n  //           parseFloat(current.date ? current.total : current.total / 1.13)\n  //         );\n  //       } else {\n  //         return accumulator;\n  //       }\n  //     }, 0);\n  //     const todaysReceipts = local.reduce((accumulator, current) => {\n  //       let date;\n  //       if (current.date) {\n  //         date = new Date(current.date.seconds * 1000);\n  //       } else {\n  //         date = new Date(current.date_created);\n  //       }\n\n  //       if (date.toLocaleDateString() === today.toLocaleDateString()) {\n  //         return accumulator + 1;\n  //       } else {\n  //         return accumulator;\n  //       }\n  //     }, 0);\n  //     setTodaysDetails({\n  //       todaysReceiptValue: todaysReceiptValue.toFixed(2),\n  //       todaysReceipts: todaysReceipts,\n  //     });\n  //   }\n  // }, []);\n\n  // const PrintTodaysTotal = () => {\n  //   let data = [\n  //     \"\\x1B\" + \"\\x40\", // init\n  //     \"\\x1B\" + \"\\x61\" + \"\\x31\", // center align\n  //     storeDetails.name,\n  //     \"\\x0A\",\n  //     storeDetails.address + \"\\x0A\",\n  //     storeDetails.website + \"\\x0A\", // text and line break\n  //     storeDetails.phoneNumber + \"\\x0A\", // text and line break\n  //     today.toLocaleDateString() + \" \" + today.toLocaleTimeString() + \"\\x0A\",\n  //     \"\\x0A\",\n  //     \"\\x0A\",\n  //     \"\\x0A\",\n  //     \"\\x0A\",\n  //     \"\\x1B\" + \"\\x61\" + \"\\x30\", // left align\n  //     \"\\x0A\" + \"\\x0A\",\n  //     \"Number Of Receipts: \" + todaysDetails.todaysReceipts + \"\\x0A\" + \"\\x0A\",\n  //     \"Sub-Total: \" +\n  //       \"$\" +\n  //       (todaysDetails.todaysReceiptValue / 1.13).toFixed(2) +\n  //       \"\\x0A\" +\n  //       \"\\x0A\",\n  //     \"Tax: \" +\n  //       \"$\" +\n  //       ((todaysDetails.todaysReceiptValue / 1.13) * 0.13).toFixed(2) +\n  //       \"\\x0A\" +\n  //       \"\\x0A\",\n  //     \"Total Including (13% Tax): \" +\n  //       \"$\" +\n  //       todaysDetails.todaysReceiptValue +\n  //       \"\\x0A\" +\n  //       \"\\x0A\",\n  //     \"------------------------------------------\" + \"\\x0A\",\n  //     \"\\x0A\", // line break\n  //     \"\\x0A\", // line break\n  //     \"\\x0A\", // line break\n  //     \"\\x0A\", // line break\n  //     \"\\x0A\", // line break\n  //     \"\\x0A\", // line break\n  //     \"\\x1D\" + \"\\x56\" + \"\\x30\",\n  //   ];\n\n  //   const qz = require(\"qz-tray\");\n  //   qz.websocket\n  //     .connect()\n  //     .then(function () {\n  //       let config = qz.configs.create(storeDetails.comSelected);\n  //       return qz.print(config, data);\n  //     })\n  //     .then(qz.websocket.disconnect)\n  //     .catch(function (err) {\n  //       console.error(err);\n  //     });\n\n  //   // fetch(\"http://localhost:8080/print\", {\n  //   //   method: \"POST\",\n  //   //   headers: {\n  //   //     \"Content-Type\": \"application/json\",\n  //   //   },\n  //   //   body: JSON.stringify({\n  //   //     printData: data,\n  //   //     comSelected: storeDetails.comSelected,\n  //   //   }),\n  //   // })\n  //   //   .then((response) => response.json())\n  //   //   .then((respData) => {\n  //   //     console.log(respData);\n  //   //   })\n  //   //   .catch((e) => alert(\"Error with printer\"));\n  // };\n\n  // const CleanupOps = (metaList) => {\n  //   const opsArray = [];\n\n  //   metaList.forEach((op) => {\n  //     const arrContaingMe = opsArray.filter(\n  //       (filterOp) => filterOp.key === op.key\n  //     );\n\n  //     if (arrContaingMe.length > 0) {\n  //       opsArray.forEach((opsArrItem, index) => {\n  //         if (opsArrItem.key === op.key) {\n  //           opsArray[index].vals.push(op.value);\n  //         }\n  //       });\n  //     } else {\n  //       opsArray.push({ key: op.key, vals: [op.value] });\n  //     }\n  //   });\n  //   return opsArray;\n  // };\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ textAlign: \"center\", margin: 25 }}>\n        List Of Transactions\n      </Text>\n      <Button title=\"FIX ARR\" onPress={FixData} />\n      <View\n        style={{\n          flexDirection: \"row\",\n          width: \"100%\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Text style={{ textAlign: \"center\", margin: 25 }}>\n          Todays Total Price: {todaysDetails.todaysReceiptValue}\n        </Text>\n        {/* <Button\n          style={{ height: 40, alignItems: \"center\", justifyContent: \"center\" }}\n          title=\"Print Todays Receipts\"\n          onPress={PrintTodaysTotal}\n        />\n        <Text style={{ textAlign: \"center\", margin: 25 }}>\n          Todays Total Receipts: {todaysDetails.todaysReceipts}\n        </Text>\n      </View>\n      <View style={styles.contentContainer}>\n        {/* {transList ? (\n          transList?.map((element, index) => {\n            let date;\n\n            if (element.date_created) {\n              const dateString = element.date_created;\n\n              const newDate = new Date(dateString + \"Z\");\n\n              const targetTimezone =\n                Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n              const result = tz(newDate)\n                .tz(targetTimezone, true)\n                .format(\"dddd, MMMM Do YYYY, h:mm:ss a z\");\n\n              date = result;\n            } else if (element.date) {\n              const newDate = new Date(element.date.seconds * 1000);\n              const targetTimezone =\n                Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n              const result = tz(newDate)\n                .tz(targetTimezone, true)\n                .format(\"dddd, MMMM Do YYYY, h:mm:ss a z\");\n\n              date = result;\n            }\n\n            return (\n              <View\n                style={{ backgroundColor: \"grey\", padding: 30, margin: 10 }}\n                key={index}\n              >\n                {element.cart_hash && <Text>Online Order</Text>}\n                <Text>{date}</Text>\n                {element.cart?.map((cartItem, index) => (\n                  <View style={{ marginBottom: 20 }} key={index}>\n                    <Text>Name: {cartItem.name}</Text>\n                    <Text>Quantity: {cartItem.quantity}</Text>\n                    <Text>Price: {cartItem.price}</Text>\n                    {cartItem.options &&\n                      cartItem.options?.map((option) => <Text>{option}</Text>)}\n                  </View>\n                ))}\n                {element.line_items?.map((cartItem, index) => (\n                  <View style={{ marginBottom: 20 }} key={index}>\n                    <Text>Name: {cartItem.name}</Text>\n                    <Text>Quantity: {cartItem.quantity}</Text>\n                    <Text>Price: {cartItem.price}</Text>\n                    {cartItem.meta &&\n                      CleanupOps(cartItem.meta).map((returnedItem) => (\n                        <View style={{ flexDirection: \"row\" }}>\n                          <Text>{returnedItem.key} : </Text>\n                          {returnedItem.vals.map((val, index) => (\n                            <Text>\n                              {val}\n                              {index >= 0 &&\n                                index < returnedItem.vals.length - 1 &&\n                                \", \"}\n                            </Text>\n                          ))}\n                        </View>\n                      ))}\n                  </View>\n                ))}\n                {element.billing && (\n                  <Text>Phone Number: {element.billing.phone}</Text>\n                )}\n                {element.customer_note?.length > 0 && (\n                  <Text>Customer Note: {element.customer_note}</Text>\n                )}\n                <Button\n                  title=\"Print\"\n                  onPress={() => {\n                    if (element.date) {\n                      let total = 0;\n\n                      let data = [\n                        \"\\x1B\" + \"\\x40\", // init\n                        \"\\x1B\" + \"\\x61\" + \"\\x31\", // center align\n                        storeDetails.name,\n                        \"\\x0A\",\n                        storeDetails.address + \"\\x0A\",\n                        storeDetails.website + \"\\x0A\", // text and line break\n                        storeDetails.phoneNumber + \"\\x0A\", // text and line break\n                        date.toLocaleDateString() +\n                          \" \" +\n                          date.toLocaleTimeString() +\n                          \"\\x0A\",\n                        \"\\x0A\",\n                        `Transaction # ${element.transNum}` + \"\\x0A\",\n                        \"\\x0A\",\n                        \"\\x0A\",\n                        \"\\x0A\",\n                        \"\\x1B\" + \"\\x61\" + \"\\x30\", // left align\n                      ];\n\n                      element.cart?.map((cartItem) => {\n                        total += parseFloat(cartItem.price);\n                        data.push(`Name: ${cartItem.name}`);\n                        data.push(\"\\x0A\");\n                        data.push(`Price: $${cartItem.price}`);\n\n                        if (cartItem.options) {\n                          data.push(\"\\x0A\");\n                          cartItem.options?.map((option) => {\n                            data.push(option);\n                            data.push(\"\\x0A\");\n                          });\n                        }\n                        data.push(\"\\x0A\" + \"\\x0A\");\n                      });\n\n                      total = total * 1.13;\n                      total = total.toFixed(2);\n\n                      if (element.billing) {\n                        data.push(`Phone Number: ${element.billing.phone}`);\n                        data.push(\"\\x0A\");\n                      }\n\n                      if (element.customer_note) {\n                        data.push(`Customer Note: ${element.customer_note}`);\n                        data.push(\"\\x0A\");\n                      }\n\n                      //push ending\n                      data.push(\n                        \"\\x0A\",\n                        \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" + \"\\x0A\",\n                        \"\\x0A\" + \"\\x0A\",\n                        \"Total Including (13% Tax): \" +\n                          \"$\" +\n                          total +\n                          \"\\x0A\" +\n                          \"\\x0A\",\n                        \"------------------------------------------\" + \"\\x0A\",\n                        \"\\x0A\", // line break\n                        \"\\x0A\", // line break\n                        \"\\x0A\", // line break\n                        \"\\x0A\", // line break\n                        \"\\x0A\", // line break\n                        \"\\x0A\", // line break\n                        //\"\\x1D\" + \"\\x56\" + \"\\x00\",\n                        \"\\x1D\" + \"\\x56\" + \"\\x30\"\n                      );\n\n                      const qz = require(\"qz-tray\");\n                      qz.websocket\n                        .connect()\n                        .then(function () {\n                          let config = qz.configs.create(\n                            storeDetails.comSelected\n                          );\n                          return qz.print(config, data);\n                        })\n                        .then(qz.websocket.disconnect)\n                        .catch(function (err) {\n                          console.error(err);\n                        });\n                      // fetch(\"http://localhost:8080/print\", {\n                      //   method: \"POST\",\n                      //   headers: {\n                      //     \"Content-Type\": \"application/json\",\n                      //   },\n                      //   body: JSON.stringify({\n                      //     printData: data,\n                      //     comSelected: storeDetails.comSelected,\n                      //   }),\n                      // })\n                      //   .then((response) => response.json())\n                      //   .then((respData) => {\n                      //     console.log(respData);\n                      //   })\n                      //   .catch((e) => alert(\"Error with printer\"));\n                    } else {\n                      const printData = [];\n\n                      printData.push(\n                        \"\\x1B\" + \"\\x40\", // init\n                        \"\\x1B\" + \"\\x61\" + \"\\x31\", // center align\n                        storeDetails.name,\n                        \"\\x0A\",\n                        storeDetails.address + \"\\x0A\",\n                        storeDetails.website + \"\\x0A\", // text and line break\n                        storeDetails.phoneNumber + \"\\x0A\", // text and line break\n                        date + \"\\x0A\",\n                        \"\\x0A\",\n                        \"Online Order\" + \"\\x0A\", // text and line break\n                        `Transaction # ${element.number}` + \"\\x0A\",\n                        \"\\x0A\",\n                        \"\\x0A\",\n                        \"\\x0A\",\n                        \"\\x1B\" + \"\\x61\" + \"\\x30\" // left align\n                      );\n\n                      element.line_items?.map((cartItem) => {\n                        printData.push(\"\\x0A\");\n                        printData.push(`Name: ${cartItem.name}`);\n                        printData.push(\"\\x0A\");\n                        printData.push(`Quantity: ${cartItem.quantity}`);\n                        printData.push(\"\\x0A\");\n                        printData.push(`Price: $${cartItem.price}`);\n                        printData.push(\"\\x0A\");\n\n                        if (cartItem.meta) {\n                          cartItem.meta?.map((meta, index) => {\n                            if (index === 0) {\n                              printData.push(`${meta.key} : ${meta.value}`);\n                              if (cartItem.meta[index + 1].key !== meta.key) {\n                                printData.push(\"\\x0A\");\n                              }\n                            } else {\n                              if (index !== cartItem.meta.length - 1) {\n                                if (cartItem.meta[index - 1].key === meta.key) {\n                                  printData.push(` , ${meta.value}`);\n                                } else {\n                                  printData.push(`${meta.key} : ${meta.value}`);\n                                }\n\n                                if (cartItem.meta[index + 1].key !== meta.key) {\n                                  printData.push(\"\\x0A\");\n                                }\n                              }\n                            }\n                          });\n                        } else {\n                          printData.push(\"\\x0A\" + \"\\x0A\");\n                        }\n                      });\n\n                      printData.push(\"\\x0A\");\n                      printData.push(\"\\x0A\");\n                      printData.push(`Customer Details:`);\n                      printData.push(\"\\x0A\");\n                      printData.push(`Address: ${element.shipping.address_1}`);\n                      printData.push(\"\\x0A\");\n                      printData.push(`City: ${element.shipping.city}`);\n                      printData.push(\"\\x0A\");\n                      printData.push(\n                        `Zip/Postal Code: ${element.shipping.postcode}`\n                      );\n                      printData.push(\"\\x0A\");\n                      printData.push(\n                        `Province/State: ${element.shipping.state}`\n                      );\n                      printData.push(\"\\x0A\");\n                      printData.push(\n                        `Name: ${element.shipping.first_name} ${element.shipping.last_name}`\n                      );\n                      printData.push(\"\\x0A\");\n                      element.shipping_lines.map((line) =>\n                        printData.push(`Shipping Method: ${line.method_title}`)\n                      );\n                      if (element.billing) {\n                        printData.push(\n                          `Phone Number: ${element.billing.phone}`\n                        );\n                        printData.push(\"\\x0A\");\n                      }\n                      if (element.customer_note) {\n                        printData.push(\n                          `Customer Note: ${element.customer_note}`\n                        );\n                        printData.push(\"\\x0A\");\n                      }\n                      printData.push(\"\\x0A\");\n                      printData.push(\"\\x0A\");\n\n                      printData.push(\n                        \"\\x0A\",\n                        \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" + \"\\x0A\",\n                        \"\\x0A\" + \"\\x0A\",\n                        \"Payment Method: \" +\n                          element.payment_method_title +\n                          \"\\x0A\" +\n                          \"\\x0A\",\n                        \"Total Including (13% Tax): \" +\n                          \"$\" +\n                          element.total +\n                          \"\\x0A\" +\n                          \"\\x0A\",\n                        \"------------------------------------------\" + \"\\x0A\",\n                        \"\\x0A\", // line break\n                        \"\\x0A\", // line break\n                        \"\\x0A\", // line break\n                        \"\\x0A\", // line break\n                        \"\\x0A\", // line break\n                        \"\\x0A\" // line break\n                      );\n\n                      printData.push(\"\\x1D\" + \"\\x56\" + \"\\x00\");\n\n                      const qz = require(\"qz-tray\");\n                      qz.websocket\n                        .connect()\n                        .then(function () {\n                          let config = qz.configs.create(\n                            storeDetails.comSelected\n                          );\n                          return qz.print(config, printData);\n                        })\n                        .then(qz.websocket.disconnect)\n                        .catch(function (err) {\n                          console.error(err);\n                        });\n\n                      // fetch(\"http://localhost:8080/print\", {\n                      //   method: \"POST\",\n                      //   headers: {\n                      //     \"Content-Type\": \"application/json\",\n                      //   },\n                      //   body: JSON.stringify({\n                      //     printData: printData,\n                      //     comSelected: storeDetails.comSelected,\n                      //   }),\n                      // })\n                      //   .then((response) => response.json())\n                      //   .then((respData) => {\n                      //     console.log(respData);\n                      //   })\n                      //   .catch((e) => alert(\"Error with printer\"));\n                    }\n                  }}\n                />\n              </View>\n            );\n          })\n        ) : (\n          <Text>No receipts yet</Text>\n        )} */}\n      </View>\n    </View>\n  );\n};\n\nexport default ViewTransactions;\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n    flex: 1,\n    height: \"100%\",\n  },\n  contentContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-between\",\n    paddingLeft: 50,\n    paddingRight: 50,\n    paddingBottom: 50,\n    height: \"100%\",\n    width: \"100%\",\n    alignItems: \"center\",\n  },\n});\n"],"mappings":";;;AACA,OAAOA,KAAK,IAAgCC,QAAQ,QAAQ,OAAO;AACnE,SAASC,MAAM,EAAEC,IAAI,QAAQ,6BAA6B;AAC1D,SAASC,gBAAgB,EAAEC,cAAc;AACzC,SAASC,eAAe;AAAkC;AAAA;AAC1D,IAAMC,EAAE,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAErC,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAS;EAC7B,IAAMC,KAAK,GAAGL,cAAc,CAACM,GAAG,EAAE;EAClC,gBAAkCV,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAvCW,SAAS;IAAEC,YAAY;EAC9B,IAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE;EACxB,iBAA0Cd,QAAQ,CAAC;MACjDe,kBAAkB,EAAE,CAAC;MACrBC,cAAc,EAAE;IAClB,CAAC,CAAC;IAAA;IAHKC,aAAa;IAAEC,gBAAgB;EAItC,IAAMC,YAAY,GAAGhB,gBAAgB,CAACO,GAAG,EAAE;EAE3C,IAAMU,OAAO,GAAG,SAAVA,OAAO,GAAS;IACpB,IAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACd,KAAK,CAAC;IAChCJ,eAAe,CAACgB,QAAQ,CAAC;EAC3B,CAAC;;EAkLD,OACE,MAAC,IAAI;IAAC,KAAK,EAAEG,MAAM,CAACC,SAAU;IAAA,WAC5B,KAAC,IAAI;MAAC,KAAK,EAAE;QAAEC,SAAS,EAAE,QAAQ;QAAEC,MAAM,EAAE;MAAG,CAAE;MAAA;IAAA,EAE1C,EACP,KAAC,MAAM;MAAC,KAAK,EAAC,SAAS;MAAC,OAAO,EAAEP;IAAQ,EAAG,EAC5C,KAAC,IAAI;MACH,KAAK,EAAE;QACLQ,aAAa,EAAE,KAAK;QACpBC,KAAK,EAAE,MAAM;QACbC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE;MAClB,CAAE;MAAA,UAEF,MAAC,IAAI;QAAC,KAAK,EAAE;UAAEL,SAAS,EAAE,QAAQ;UAAEC,MAAM,EAAE;QAAG,CAAE;QAAA,mCAC1BV,aAAa,CAACF,kBAAkB;MAAA;IAChD,EAuVF;EAAA,EACF;AAEX,CAAC;AAED,eAAeP,gBAAgB;AAE/B,IAAMgB,MAAM,GAAGQ,UAAU,CAACC,MAAM,CAAC;EAC/BR,SAAS,EAAE;IACTS,eAAe,EAAE,OAAO;IACxBC,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE;EACV,CAAC;EACDC,gBAAgB,EAAE;IAChBF,IAAI,EAAE,CAAC;IACPP,aAAa,EAAE,KAAK;IACpBU,QAAQ,EAAE,MAAM;IAChBP,cAAc,EAAE,eAAe;IAC/BQ,WAAW,EAAE,EAAE;IACfC,YAAY,EAAE,EAAE;IAChBC,aAAa,EAAE,EAAE;IACjBL,MAAM,EAAE,MAAM;IACdP,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE;EACd;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}