{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ProductOptionMultiChoiceDropdown = function ProductOptionMultiChoiceDropdown(_ref) {\n  var styles = _ref.styles,\n    myObjProfile = _ref.myObjProfile,\n    setmyObjProfile = _ref.setmyObjProfile,\n    index = _ref.index;\n  return _jsx(View, {\n    children: e.optionsList.map(function (selection, listIndex) {\n      return _jsxs(View, {\n        style: [styles.multiOption, myObjProfile.options[index].optionsList[listIndex].selected == true ? {\n          backgroundColor: \"rgba(205,213,255,1)\",\n          borderWidth: 2,\n          borderColor: \"rgba(205,213,255,1)\"\n        } : {\n          borderWidth: 2,\n          borderColor: \"rgba(203,202,202,1)\"\n        }],\n        children: [_jsx(Text, {\n          style: [styles.optionNameTxt, myObjProfile.options[index].optionsList[listIndex].selected == true ? {\n            color: \"rgba(41,122,217,1)\"\n          } : {\n            color: \"rgba(155, 155, 155, 1) \"\n          }],\n          children: selection.label\n        }), selection.priceIncrease !== null && _jsxs(Text, {\n          style: [styles.optionPriceTxt, myObjProfile.options[index].optionsList[listIndex].selected == true ? {\n            color: \"rgba(41,122,217,1)\"\n          } : {\n            color: \"rgba(155, 155, 155, 1) \"\n          }],\n          children: [\"$\", selection.priceIncrease]\n        }), _jsxs(View, {\n          style: {\n            flexDirection: \"row\",\n            width: \"100%\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginTop: 10\n          },\n          children: [_jsx(Button, {\n            title: \"-\",\n            style: {\n              width: 30,\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            },\n            onPress: function onPress() {\n              var newMyObjProfile = structuredClone(myObjProfile);\n              var thisItemCountsAs = selection.countsAs ? parseInt(selection.countsAs) : 1;\n              if (newMyObjProfile.options[index].optionsList[listIndex].selectedTimes > 0) {\n                newMyObjProfile.options[index].optionsList[listIndex].selectedTimes -= 1 * thisItemCountsAs;\n              }\n              setmyObjProfile(newMyObjProfile);\n            }\n          }), _jsx(Text, {\n            style: {\n              padding: 5\n            },\n            children: myObjProfile.options[index].optionsList[listIndex].selectedTimes > 0 ? myObjProfile.options[index].optionsList[listIndex].selectedTimes : 0\n          }), _jsx(Butto, {\n            title: \"+\",\n            style: {\n              width: 30,\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            },\n            onPress: function onPress() {\n              var newMyObjProfile = structuredClone(myObjProfile);\n\n              var selectedItems = newMyObjProfile.options[index].optionsList.filter(function (op) {\n                return op.selectedTimes > 0;\n              });\n              var thisItemSelectedTimes = selection.selectedTimes ? parseInt(selection.selectedTimes) : 1;\n              var thisItemCountsAs = selection.countsAs ? parseInt(selection.countsAs) : 1;\n              var selectedTimesTotal = thisItemCountsAs;\n              selectedItems.map(function (op) {\n                selectedTimesTotal += op.countsAs ? parseInt(op.selectedTimes) * parseInt(op.countsAs) : parseInt(op.selectedTimes);\n              });\n              if (parseInt(e.numOfSelectable) >= selectedTimesTotal || !e.numOfSelectable || parseInt(e.numOfSelectable) === 0) {\n                console.log(\"selectedTimesTotal: \", selectedTimesTotal, \" e.numOfSelectable: \", e.numOfSelectable);\n                if (newMyObjProfile.options[index].optionsList[listIndex].selectedTimes) {\n                  newMyObjProfile.options[index].optionsList[listIndex].selectedTimes += 1;\n                } else {\n                  newMyObjProfile.options[index].optionsList[listIndex].selectedTimes = 1;\n                }\n                setmyObjProfile(newMyObjProfile);\n              } else {\n                console.log(\"Didnt Work \", \"selectedTimesTotal: \", selectedTimesTotal, \" e.numOfSelectable: \", e.numOfSelectable);\n              }\n            }\n          })]\n        })]\n      }, listIndex);\n    })\n  });\n};\nexport default ProductOptionMultiChoiceDropdown;","map":{"version":3,"names":["React","ProductOptionMultiChoiceDropdown","styles","myObjProfile","setmyObjProfile","index","e","optionsList","map","selection","listIndex","multiOption","options","selected","backgroundColor","borderWidth","borderColor","optionNameTxt","color","label","priceIncrease","optionPriceTxt","flexDirection","width","alignItems","justifyContent","marginTop","newMyObjProfile","structuredClone","thisItemCountsAs","countsAs","parseInt","selectedTimes","padding","selectedItems","filter","op","thisItemSelectedTimes","selectedTimesTotal","numOfSelectable","console","log"],"sources":["/Users/peterputros/Desktop/PosMate/components/product/ProductOptionMultiChoiceDropdown.tsx"],"sourcesContent":["import { View, Text, Button } from \"react-native\";\nimport React from \"react\";\n\nconst ProductOptionMultiChoiceDropdown = ({styles, myObjProfile, setmyObjProfile, index}) => {\n  return (\n    <View>\n      {e.optionsList.map((selection, listIndex) => {\n        return (\n          <View\n            key={listIndex}\n            style={[\n              styles.multiOption,\n              myObjProfile.options[index].optionsList[listIndex].selected ==\n              true\n                ? {\n                    backgroundColor: \"rgba(205,213,255,1)\",\n                    borderWidth: 2,\n                    borderColor: \"rgba(205,213,255,1)\",\n                  }\n                : {\n                    borderWidth: 2,\n                    borderColor: \"rgba(203,202,202,1)\",\n                  },\n            ]}\n          >\n            <Text\n              style={[\n                styles.optionNameTxt,\n                myObjProfile.options[index].optionsList[listIndex].selected ==\n                true\n                  ? { color: \"rgba(41,122,217,1)\" }\n                  : { color: \"rgba(155, 155, 155, 1) \" },\n              ]}\n            >\n              {selection.label}\n            </Text>\n            {selection.priceIncrease !== null && (\n              <Text\n                style={[\n                  styles.optionPriceTxt,\n                  myObjProfile.options[index].optionsList[listIndex].selected ==\n                  true\n                    ? { color: \"rgba(41,122,217,1)\" }\n                    : { color: \"rgba(155, 155, 155, 1) \" },\n                ]}\n              >\n                ${selection.priceIncrease}\n              </Text>\n            )}\n            <View\n              style={{\n                flexDirection: \"row\",\n                width: \"100%\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n                marginTop: 10,\n              }}\n            >\n              <Button\n                title=\"-\"\n                style={{\n                  width: 30,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n                onPress={() => {\n                  const newMyObjProfile = structuredClone(myObjProfile);\n                  //filter out all options[index].optionsList that have selectedTimes > 0 then map through and multiply by countsAs\n                  const thisItemCountsAs = selection.countsAs\n                    ? parseInt(selection.countsAs)\n                    : 1;\n\n                  if (\n                    newMyObjProfile.options[index].optionsList[listIndex]\n                      .selectedTimes > 0\n                  ) {\n                    newMyObjProfile.options[index].optionsList[\n                      listIndex\n                    ].selectedTimes -= 1 * thisItemCountsAs;\n                  }\n\n                  setmyObjProfile(newMyObjProfile);\n                }}\n              />\n              <Text style={{ padding: 5 }}>\n                {myObjProfile.options[index].optionsList[listIndex]\n                  .selectedTimes > 0\n                  ? myObjProfile.options[index].optionsList[listIndex]\n                      .selectedTimes\n                  : 0}\n              </Text>\n              <Butto\n                title=\"+\"\n                style={{\n                  width: 30,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n                onPress={() => {\n                  const newMyObjProfile = structuredClone(myObjProfile);\n                  //filter out all options[index].optionsList that have selectedTimes > 0 then map through and multiply by countsAs\n\n                  const selectedItems = newMyObjProfile.options[\n                    index\n                  ].optionsList.filter((op) => op.selectedTimes > 0);\n\n                  const thisItemSelectedTimes = selection.selectedTimes\n                    ? parseInt(selection.selectedTimes)\n                    : 1;\n                  const thisItemCountsAs = selection.countsAs\n                    ? parseInt(selection.countsAs)\n                    : 1;\n\n                  let selectedTimesTotal = thisItemCountsAs;\n\n                  selectedItems.map((op) => {\n                    selectedTimesTotal += op.countsAs\n                      ? parseInt(op.selectedTimes) * parseInt(op.countsAs)\n                      : parseInt(op.selectedTimes);\n                  });\n\n                  if (\n                    parseInt(e.numOfSelectable) >= selectedTimesTotal ||\n                    !e.numOfSelectable ||\n                    parseInt(e.numOfSelectable) === 0\n                  ) {\n                    console.log(\n                      \"selectedTimesTotal: \",\n                      selectedTimesTotal,\n                      \" e.numOfSelectable: \",\n                      e.numOfSelectable\n                    );\n                    if (\n                      newMyObjProfile.options[index].optionsList[listIndex]\n                        .selectedTimes\n                    ) {\n                      newMyObjProfile.options[index].optionsList[\n                        listIndex\n                      ].selectedTimes += 1;\n                    } else {\n                      newMyObjProfile.options[index].optionsList[\n                        listIndex\n                      ].selectedTimes = 1;\n                    }\n                    setmyObjProfile(newMyObjProfile);\n                  } else {\n                    console.log(\n                      \"Didnt Work \",\n                      \"selectedTimesTotal: \",\n                      selectedTimesTotal,\n                      \" e.numOfSelectable: \",\n                      e.numOfSelectable\n                    );\n                  }\n                }}\n              />\n            </View>\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nexport default ProductOptionMultiChoiceDropdown;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}