{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Button, TextInput } from \"@react-native-material/core\";\nimport DropDown from \"./DropDown\";\nimport { userStoreState } from \"../state/state\";\nimport { updateData } from \"../state/firebaseFunctions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MyListItem = function MyListItem(_ref) {\n  var item = _ref.item,\n    index = _ref.index,\n    setnewProduct = _ref.setnewProduct,\n    newProduct = _ref.newProduct;\n  var memoizedItem = useMemo(function () {\n    return item;\n  }, [item]);\n  var e = memoizedItem;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    optionLblsValues = _useState2[0],\n    setoptionLblsValues = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    optionLbls = _useState4[0],\n    setoptionLbls = _useState4[1];\n  useEffect(function () {\n    if (newProduct.options.length > 1) {\n      var optionLblsLocal = [];\n      newProduct.options.forEach(function (checkUseE) {\n        if (checkUseE.label !== e.label) optionLblsLocal.push(checkUseE.label);\n      });\n      setoptionLbls(optionLblsLocal);\n    }\n  }, []);\n  useEffect(function () {\n    if (e.selectedCaseKey !== null) {\n      var local = newProduct.options.filter(function (localE) {\n        return localE.label == e.selectedCaseKey;\n      });\n      var optionLblsValuesLocal = [];\n      local[0].optionsList.forEach(function (eVals) {\n        optionLblsValuesLocal.push(eVals.label);\n      });\n      setoptionLblsValues(optionLblsValuesLocal);\n    }\n  }, [optionLbls]);\n  return _jsxs(View, {\n    style: {\n      padding: 25,\n      margin: 15,\n      backgroundColor: \"lightgrey\"\n    },\n    children: [_jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        var copy = structuredClone(newProduct);\n        copy.options.push(_objectSpread(_objectSpread({}, e), {}, {\n          label: e.label + \" Copy\"\n        }));\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            options: copy.options\n          });\n        });\n      },\n      children: _jsx(Text, {\n        style: {\n          marginBottom: 25,\n          fontWeight: \"700\",\n          color: \"red\"\n        },\n        children: \"Copy\"\n      })\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        var copy = structuredClone(newProduct);\n        copy.options.splice(index, 1);\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            options: copy.options\n          });\n        });\n      },\n      children: _jsx(Text, {\n        style: {\n          marginBottom: 25,\n          fontWeight: \"700\",\n          color: \"red\"\n        },\n        children: \"X\"\n      })\n    }), _jsx(TextInput, {\n      placeholder: \"Enter Select List Label\",\n      onChangeText: function onChangeText(val) {\n        return setlistLabel();\n      },\n      onChange: function onChange(e) {\n        var val = e.nativeEvent.text;\n        var newOptionsList = _toConsumableArray(newProduct.options);\n        newOptionsList[index].label = val;\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            options: newOptionsList\n          });\n        });\n      },\n      value: e.label,\n      style: {\n        marginBottom: 25\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Enter Number Of Selectable; If There Is\",\n      onChange: function onChange(e) {\n        var val = e.nativeEvent.text;\n        var newOptionsList = _toConsumableArray(newProduct.options);\n        newOptionsList[index].numOfSelectable = val;\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            options: newOptionsList\n          });\n        });\n      },\n      value: e.numOfSelectable,\n      style: {\n        marginBottom: 25\n      }\n    }), e.optionsList.map(function (eInnerList, indexInnerList) {\n      return _jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          marginBottom: 25,\n          alignItems: \"center\"\n        },\n        children: [_jsx(TextInput, {\n          placeholder: \"Enter Option Label\",\n          onChange: function onChange(e) {\n            var val = e.nativeEvent.text;\n            var newOptionsList = structuredClone(newProduct);\n            newOptionsList.options[index].optionsList[indexInnerList].label = val;\n            setnewProduct(newOptionsList);\n          },\n          value: eInnerList.label\n        }), _jsx(TextInput, {\n          placeholder: \"Enter price increase\",\n          onChange: function onChange(e) {\n            var val = e.nativeEvent.text;\n            var newOptionsList = structuredClone(newProduct);\n            newOptionsList.options[index].optionsList[indexInnerList].priceIncrease = val;\n            setnewProduct(newOptionsList);\n          },\n          value: eInnerList.priceIncrease,\n          style: {\n            marginLeft: 20,\n            marginRight: 20\n          }\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            var copy = structuredClone(newProduct);\n            copy.options[index].optionsList.splice(indexInnerList, 1);\n            setnewProduct(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                options: copy.options\n              });\n            });\n            setnewProduct(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                options: copy.options\n              });\n            });\n          },\n          children: _jsx(Text, {\n            style: {\n              fontWeight: \"700\",\n              color: \"red\"\n            },\n            children: \"X\"\n          })\n        })]\n      });\n    }), _jsx(Button, {\n      title: \"Add Option Choice\",\n      onPress: function onPress() {\n        var newOptionsList = _toConsumableArray(newProduct.options);\n        newOptionsList[index].optionsList.push({\n          label: null,\n          priceIncrease: null\n        });\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            options: newOptionsList\n          });\n        });\n      },\n      style: {\n        marginBottom: 25\n      }\n    }), optionLbls.length > 1 && _jsxs(View, {\n      style: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        marginBottom: 25\n      },\n      children: [_jsx(DropDown, {\n        label: \"Show if...\",\n        options: optionLbls,\n        setValue: function setValue(val) {\n          var newOptionsList = _toConsumableArray(newProduct.options);\n          newOptionsList[index].selectedCaseKey = val;\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              options: newOptionsList\n            });\n          });\n        },\n        value: e.selectedCaseKey,\n        style: {\n          marginBottom: 25\n        }\n      }), _jsx(Text, {\n        children: \"\\\"=\\\"\"\n      }), _jsx(DropDown, {\n        label: \"Show if...\",\n        options: optionLblsValues,\n        setValue: function setValue(val) {\n          var newOptionsList = _toConsumableArray(newProduct.options);\n          newOptionsList[index].selectedCaseValue = val;\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              options: newOptionsList\n            });\n          });\n        },\n        value: e.selectedCaseValue,\n        style: {\n          marginBottom: 25\n        }\n      })]\n    })]\n  });\n};\nvar AddProduct = function AddProduct(_ref2) {\n  var setProductModal = _ref2.setProductModal,\n    setisModalVisible = _ref2.setisModalVisible,\n    existingProduct = _ref2.existingProduct,\n    existingProductIndex = _ref2.existingProductIndex;\n  var catalog = userStoreState.use();\n  var _useState5 = useState(existingProduct ? existingProduct : {\n      name: null,\n      price: null,\n      catagory: null,\n      options: [],\n      description: null\n    }),\n    _useState6 = _slicedToArray(_useState5, 2),\n    newProduct = _useState6[0],\n    setnewProduct = _useState6[1];\n  function handleDataUpdate(copyProductData) {\n    if (copyProductData) {\n      updateData(_toConsumableArray(catalog.categories), [].concat(_toConsumableArray(catalog.products), [copyProductData]));\n    } else if (existingProduct) {\n      var copy = structuredClone(catalog.products);\n      copy[existingProductIndex] = newProduct;\n      updateData(_toConsumableArray(catalog.categories), copy);\n    } else {\n      updateData(_toConsumableArray(catalog.categories), [].concat(_toConsumableArray(catalog.products), [newProduct]));\n    }\n    setisModalVisible(true);\n  }\n  var OptionsAddingSection = function OptionsAddingSection() {\n    return _jsxs(View, {\n      children: [_jsx(FlatList, {\n        data: newProduct.options,\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        },\n        renderItem: function renderItem(_ref3) {\n          var item = _ref3.item,\n            index = _ref3.index;\n          return _jsx(MyListItem, {\n            item: item,\n            index: index,\n            newProduct: newProduct,\n            setnewProduct: setnewProduct\n          });\n        }\n      }), _jsx(Button, {\n        title: \"Add Product Option\",\n        onPress: function onPress() {\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              options: [].concat(_toConsumableArray(prevState.options), [{\n                label: null,\n                optionsList: [],\n                selectedCaseKey: null,\n                selectedCaseValue: null,\n                numOfSelectable: null,\n                id: Math.random().toString(36).substr(2, 9)\n              }])\n            });\n          });\n        },\n        style: {\n          marginBottom: 25\n        }\n      })]\n    });\n  };\n  return _jsxs(ScrollView, {\n    contentContainerStyle: {\n      width: \"93%\",\n      alignSelf: \"center\",\n      marginTop: 25\n    },\n    children: [_jsxs(View, {\n      style: {\n        flexDirection: \"row\",\n        padding: 20,\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n      },\n      children: [_jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return setProductModal(false);\n        },\n        children: _jsx(Text, {\n          style: {\n            marginBottom: 25,\n            fontWeight: \"700\",\n            color: \"red\"\n          },\n          children: \"X\"\n        })\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          var copy = structuredClone(newProduct);\n          copy.name = copy.name + \" Copy\";\n          handleDataUpdate(copy);\n        },\n        children: _jsx(Text, {\n          style: {\n            marginBottom: 25,\n            fontWeight: \"700\",\n            color: \"red\"\n          },\n          children: \"Copy\"\n        })\n      }), _jsx(Text, {\n        style: {\n          marginBottom: 25\n        },\n        children: \"AddProduct\"\n      })]\n    }), _jsx(TextInput, {\n      placeholder: \"Enter Product Name\",\n      onChangeText: function onChangeText(val) {\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            name: val\n          });\n        });\n      },\n      value: newProduct.name,\n      style: {\n        marginBottom: 25\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Enter any other items that come with this\",\n      onChangeText: function onChangeText(val) {\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            description: val\n          });\n        });\n      },\n      style: {\n        marginBottom: 25\n      },\n      value: newProduct.description\n    }), _jsx(TextInput, {\n      placeholder: \"Enter Product Price\",\n      onChangeText: function onChangeText(val) {\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            price: val\n          });\n        });\n      },\n      style: {\n        marginBottom: 25\n      },\n      value: newProduct.price\n    }), _jsx(DropDown, {\n      label: \"Choose catagory\",\n      options: catalog.categories,\n      setValue: function setValue(val) {\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            catagory: val\n          });\n        });\n      },\n      value: newProduct.catagory,\n      style: {\n        marginBottom: 25\n      }\n    }), _jsx(OptionsAddingSection, {}), _jsx(Button, {\n      title: \"Add/Save Product\",\n      onPress: function onPress() {\n        return handleDataUpdate();\n      },\n      style: {\n        marginBottom: 25,\n        marginTop: 25,\n        backgroundColor: \"lightgreen\"\n      }\n    })]\n  });\n};\nexport default AddProduct;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useEffect","useMemo","useState","Button","TextInput","DropDown","userStoreState","updateData","MyListItem","item","index","setnewProduct","newProduct","memoizedItem","e","optionLblsValues","setoptionLblsValues","optionLbls","setoptionLbls","options","length","optionLblsLocal","forEach","checkUseE","label","push","selectedCaseKey","local","filter","localE","optionLblsValuesLocal","optionsList","eVals","padding","margin","backgroundColor","copy","structuredClone","prevState","marginBottom","fontWeight","color","splice","val","setlistLabel","nativeEvent","text","newOptionsList","numOfSelectable","map","eInnerList","indexInnerList","flexDirection","alignItems","priceIncrease","marginLeft","marginRight","justifyContent","selectedCaseValue","AddProduct","setProductModal","setisModalVisible","existingProduct","existingProductIndex","catalog","use","name","price","catagory","description","handleDataUpdate","copyProductData","categories","products","OptionsAddingSection","id","Math","random","toString","substr","width","alignSelf","marginTop","styles","StyleSheet","create"],"sources":["/Users/peterputros/Desktop/PosMate-1/components/TestAdd.tsx"],"sourcesContent":["import {\n  FlatList,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Button, TextInput } from \"@react-native-material/core\";\nimport DropDown from \"./DropDown\";\nimport { userStoreState } from \"state/state\";\nimport { updateData } from \"state/firebaseFunctions\";\n\nconst MyListItem = ({ item, index, setnewProduct, newProduct }) => {\n  const memoizedItem = useMemo(() => item, [item]);\n  const e = memoizedItem;\n\n  const [optionLblsValues, setoptionLblsValues] = useState([]);\n          const [optionLbls, setoptionLbls] = useState([]);\n\n          useEffect(() => {\n            //setnewProduct(newProductSaved.current);\n            if (newProduct.options.length > 1) {\n              const optionLblsLocal = [];\n              newProduct.options.forEach((checkUseE) => {\n                if (checkUseE.label !== e.label)\n                  optionLblsLocal.push(checkUseE.label);\n              });\n              setoptionLbls(optionLblsLocal);\n            }\n          }, []);\n\n          useEffect(() => {\n            if (e.selectedCaseKey !== null) {\n              const local = newProduct.options.filter(\n                (localE) => localE.label == e.selectedCaseKey\n              );\n              const optionLblsValuesLocal = [];\n              local[0].optionsList.forEach((eVals) => {\n                optionLblsValuesLocal.push(eVals.label);\n              });\n              setoptionLblsValues(optionLblsValuesLocal);\n            }\n          }, [optionLbls]);\n\n          return (\n            <View\n              style={{\n                padding: 25,\n                margin: 15,\n                backgroundColor: \"lightgrey\",\n              }}\n            >\n              <TouchableOpacity\n                onPress={() => {\n                  const copy = structuredClone(newProduct);\n                  copy.options.push({\n                    ...e,\n                    label: e.label + \" Copy\",\n                  });\n                  setnewProduct((prevState) => ({\n                    ...prevState,\n                    options: copy.options,\n                  }));\n                }}\n              >\n                <Text\n                  style={{\n                    marginBottom: 25,\n                    fontWeight: \"700\",\n                    color: \"red\",\n                  }}\n                >\n                  Copy\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                onPress={() => {\n                  const copy = structuredClone(newProduct);\n                  copy.options.splice(index, 1);\n\n                  setnewProduct((prevState) => ({\n                    ...prevState,\n                    options: copy.options,\n                  }));\n                }}\n              >\n                <Text\n                  style={{\n                    marginBottom: 25,\n                    fontWeight: \"700\",\n                    color: \"red\",\n                  }}\n                >\n                  X\n                </Text>\n              </TouchableOpacity>\n              <TextInput\n                placeholder=\"Enter Select List Label\"\n                onChangeText={val => setlistLabel()}\n                onChange={(e) => {\n                  const val = e.nativeEvent.text;\n                  const newOptionsList = [...newProduct.options];\n                  newOptionsList[index].label = val;\n                  setnewProduct((prevState) => ({\n                    ...prevState,\n                    options: newOptionsList,\n                  }));\n                }}\n                value={e.label}\n                style={{ marginBottom: 25 }}\n              />\n              <TextInput\n                placeholder=\"Enter Number Of Selectable; If There Is\"\n                onChange={(e) => {\n                  const val = e.nativeEvent.text;\n                  const newOptionsList = [...newProduct.options];\n                  newOptionsList[index].numOfSelectable = val;\n                  setnewProduct((prevState) => ({\n                    ...prevState,\n                    options: newOptionsList,\n                  }));\n                }}\n                value={e.numOfSelectable}\n                style={{ marginBottom: 25 }}\n              />\n              {e.optionsList.map((eInnerList, indexInnerList) => {\n                return (\n                  <View\n                    style={{\n                      flexDirection: \"row\",\n                      marginBottom: 25,\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <TextInput\n                      placeholder=\"Enter Option Label\"\n                      onChange={(e) => {\n                        const val = e.nativeEvent.text;\n                        const newOptionsList = structuredClone(newProduct);\n                        newOptionsList.options[index].optionsList[\n                          indexInnerList\n                        ].label = val;\n                        setnewProduct(newOptionsList);\n                      }}\n                      value={eInnerList.label}\n                    />\n                    <TextInput\n                      placeholder=\"Enter price increase\"\n                      onChange={(e) => {\n                        const val = e.nativeEvent.text;\n                        const newOptionsList = structuredClone(newProduct);\n                        newOptionsList.options[index].optionsList[\n                          indexInnerList\n                        ].priceIncrease = val;\n                        setnewProduct(newOptionsList);\n                      }}\n                      value={eInnerList.priceIncrease}\n                      style={{ marginLeft: 20, marginRight: 20 }}\n                    />\n                    <TouchableOpacity\n                      onPress={() => {\n                        const copy = structuredClone(newProduct);\n                        copy.options[index].optionsList.splice(\n                          indexInnerList,\n                          1\n                        );\n                        setnewProduct((prevState) => ({\n                          ...prevState,\n                          options: copy.options,\n                        }));\n\n                        setnewProduct((prevState) => ({\n                          ...prevState,\n                          options: copy.options,\n                        }));\n                      }}\n                    >\n                      <Text\n                        style={{\n                          fontWeight: \"700\",\n                          color: \"red\",\n                        }}\n                      >\n                        X\n                      </Text>\n                    </TouchableOpacity>\n                  </View>\n                );\n              })}\n              <Button\n                title=\"Add Option Choice\"\n                onPress={() => {\n                  const newOptionsList = [...newProduct.options];\n                  newOptionsList[index].optionsList.push({\n                    label: null,\n                    priceIncrease: null,\n                  });\n                  setnewProduct((prevState) => ({\n                    ...prevState,\n                    options: newOptionsList,\n                  }));\n                }}\n                style={{ marginBottom: 25 }}\n              />\n              {optionLbls.length > 1 && (\n                <View\n                  style={{\n                    flexDirection: \"row\",\n                    justifyContent: \"space-between\",\n                    marginBottom: 25,\n                  }}\n                >\n                  <DropDown\n                    label=\"Show if...\"\n                    options={optionLbls}\n                    setValue={(val) => {\n                      const newOptionsList = [...newProduct.options];\n                      newOptionsList[index].selectedCaseKey = val;\n                      setnewProduct((prevState) => ({\n                        ...prevState,\n                        options: newOptionsList,\n                      }));\n                    }}\n                    value={e.selectedCaseKey}\n                    style={{ marginBottom: 25 }}\n                  />\n                  <Text>\"=\"</Text>\n                  <DropDown\n                    label=\"Show if...\"\n                    options={optionLblsValues}\n                    setValue={(val) => {\n                      const newOptionsList = [...newProduct.options];\n                      newOptionsList[index].selectedCaseValue = val;\n                      setnewProduct((prevState) => ({\n                        ...prevState,\n                        options: newOptionsList,\n                      }));\n                    }}\n                    value={e.selectedCaseValue}\n                    style={{ marginBottom: 25 }}\n                  />\n                </View>\n              )}\n            </View>\n          );\n};\n\nconst AddProduct = ({\n  setProductModal,\n  setisModalVisible,\n  existingProduct,\n  existingProductIndex,\n}) => {\n  const catalog = userStoreState.use();\n  const [newProduct, setnewProduct] = useState(\n    existingProduct\n      ? existingProduct\n      : {\n          name: null,\n          price: null,\n          catagory: null,\n          options: [],\n          description: null,\n        }\n  );\n\n  function handleDataUpdate(copyProductData) {\n    if (copyProductData) {\n      updateData(\n        [...catalog.categories],\n        [...catalog.products, copyProductData]\n      );\n    } else if (existingProduct) {\n      let copy = structuredClone(catalog.products);\n      copy[existingProductIndex] = newProduct;\n\n      updateData([...catalog.categories], copy);\n    } else {\n      updateData([...catalog.categories], [...catalog.products, newProduct]);\n    }\n    setisModalVisible(true);\n  }\n\n  const OptionsAddingSection = () => {\n    return (\n      <View>\n          <FlatList\n      data={newProduct.options}\n      keyExtractor={item => item.id}\n      renderItem={({ item, index }) => <MyListItem item={item} index={index} newProduct={newProduct} setnewProduct={setnewProduct} />}\n    />\n        <Button\n          title=\"Add Product Option\"\n          onPress={() => {\n            setnewProduct((prevState) => ({\n              ...prevState,\n              options: [\n                ...prevState.options,\n                {\n                  label: null,\n                  optionsList: [],\n                  selectedCaseKey: null,\n                  selectedCaseValue: null,\n                  numOfSelectable: null,\n                  id: Math.random().toString(36).substr(2, 9)\n                },\n              ],\n            }));\n          }}\n          style={{ marginBottom: 25 }}\n        />\n      </View>\n    );\n  };\n\n  return (\n    <ScrollView\n      contentContainerStyle={{\n        width: \"93%\",\n        alignSelf: \"center\",\n        marginTop: 25,\n      }}\n    >\n      <View\n        style={{\n          flexDirection: \"row\",\n          padding: 20,\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <TouchableOpacity onPress={() => setProductModal(false)}>\n          <Text style={{ marginBottom: 25, fontWeight: \"700\", color: \"red\" }}>\n            X\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => {\n            let copy = structuredClone(newProduct);\n            copy.name = copy.name + \" Copy\";\n            handleDataUpdate(copy);\n          }}\n        >\n          <Text style={{ marginBottom: 25, fontWeight: \"700\", color: \"red\" }}>\n            Copy\n          </Text>\n        </TouchableOpacity>\n        <Text style={{ marginBottom: 25 }}>AddProduct</Text>\n      </View>\n      <TextInput\n        placeholder=\"Enter Product Name\"\n        onChangeText={(val) => {\n          setnewProduct((prevState) => ({ ...prevState, name: val }));\n        }}\n        value={newProduct.name}\n        style={{ marginBottom: 25 }}\n      />\n      <TextInput\n        placeholder=\"Enter any other items that come with this\"\n        onChangeText={(val) => {\n          setnewProduct((prevState) => ({ ...prevState, description: val }));\n        }}\n        style={{ marginBottom: 25 }}\n        value={newProduct.description}\n      />\n      <TextInput\n        placeholder=\"Enter Product Price\"\n        onChangeText={(val) => {\n          setnewProduct((prevState) => ({ ...prevState, price: val }));\n        }}\n        style={{ marginBottom: 25 }}\n        value={newProduct.price}\n      />\n      <DropDown\n        label=\"Choose catagory\"\n        options={catalog.categories}\n        setValue={(val) => {\n          setnewProduct((prevState) => ({ ...prevState, catagory: val }));\n        }}\n        value={newProduct.catagory}\n        style={{ marginBottom: 25 }}\n      />\n      <OptionsAddingSection />\n      <Button\n        title=\"Add/Save Product\"\n        onPress={() => handleDataUpdate()}\n        style={{\n          marginBottom: 25,\n          marginTop: 25,\n          backgroundColor: \"lightgreen\",\n        }}\n      />\n    </ScrollView>\n  );\n};\n\nexport default AddProduct;\n\nconst styles = StyleSheet.create({});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}