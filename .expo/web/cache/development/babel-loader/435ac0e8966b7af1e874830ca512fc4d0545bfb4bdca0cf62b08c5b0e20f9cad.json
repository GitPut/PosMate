{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"react-select2-wrapper/css/select2.css\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Button, Switch, TextInput } from \"@react-native-material/core\";\nimport { deviceIdState, deviceTreeState, setDeviceTreeState, setMyDeviceDetailsState } from \"../../../../../state/state\";\nimport { auth, db } from \"../../../../../state/firebaseConfig\";\nimport ReactSelect from \"react-select\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport tw from 'twrnc';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DeviceSettings = function DeviceSettings() {\n  var deviceTree = deviceTreeState.use();\n  var myDeviceID = deviceIdState.use();\n  var fadeAnim = useRef(new Animated.Value(0)).current;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    viewVisible = _useState2[0],\n    setviewVisible = _useState2[1];\n  var _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n  var fadeIn = function fadeIn() {\n    Animated.timing(fadeAnim, {\n      toValue: 1,\n      duration: 500,\n      useNativeDriver: false\n    }).start();\n  };\n  var resetLoader = function resetLoader() {\n    setviewVisible(true);\n    fadeIn();\n  };\n  var AddNewDevice = function () {\n    var _ref = _asyncToGenerator(function* () {\n      yield db.collection(\"users\").doc(auth.currentUser.uid).collection(\"checkout_sessions\").add({\n        price: 'price_1Oj9NZCIw3L7DOwI7DKAhIve',\n        quantity: 1,\n        success_url: window.location.href,\n        cancel_url: window.location.href\n      }).then(function (docRef) {\n        docRef.onSnapshot(function () {\n          var _ref2 = _asyncToGenerator(function* (snap) {\n            var _snap$data = snap.data(),\n              error = _snap$data.error,\n              sessionId = _snap$data.sessionId;\n            if (error) {\n              alert(`An error occurred: ${error.message}`);\n            }\n            if (sessionId) {\n              var stripe = yield loadStripe(\"pk_live_51MHqrvCIw3L7DOwI0ol9CTCSH7mQXTLKpxTWKzmwOY1MdKwaYwhdJq6WTpkWdBeql3sS44JmybynlRnaO2nSa1FK001dHiEOZO\");\n              console.log(`redirecting`);\n              yield stripe.redirectToCheckout({\n                sessionId: sessionId\n              });\n            }\n          });\n          return function (_x) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      });\n    });\n    return function AddNewDevice() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsx(\"div\", {\n    className: \"page-wrapper\",\n    children: _jsxs(\"div\", {\n      className: \"content\",\n      children: [_jsxs(View, {\n        style: styles.container,\n        children: [_jsxs(View, {\n          style: styles.headerRowContainer,\n          children: [_jsx(Text, {\n            style: styles.headerTxt,\n            children: \"Device Settings\"\n          }), deviceTree.devices.length < 2 + deviceTree.extraDevicesPayingFor ? _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              db.collection('users').doc(auth.currentUser.uid).collection('devices').add({\n                name: `Device${deviceTree.devices.length}`,\n                id: null,\n                printToPrinter: null\n              }).then(function (docRef) {\n                var clone = _objectSpread({}, deviceTree);\n                clone.devices.push({\n                  name: \"Device\",\n                  id: null,\n                  printToPrinter: null,\n                  sendPrintToUserID: null,\n                  docID: docRef.id\n                });\n                setDeviceTreeState(clone);\n              });\n            },\n            style: tw.style(['bg-green-500', 'rounded-md', 'p-3', 'mt-2', 'mb-2']),\n            children: _jsx(Text, {\n              style: tw.style(['text-white', 'text-center', 'text-base']),\n              children: \"Add Device\"\n            })\n          }) : _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              resetLoader();\n              AddNewDevice();\n            },\n            style: tw.style(['bg-green-500', 'rounded-md', 'p-3', 'mt-2', 'mb-2']),\n            children: _jsx(Text, {\n              style: tw.style(['text-white', 'text-center', 'text-base']),\n              children: \"Pay For Another Device\"\n            })\n          })]\n        }), _jsx(ScrollView, {\n          style: [{\n            width: '90%',\n            height: height / 1.4\n          }, tw.style(['p-5', 'border', 'border-gray-200', 'rounded-md', 'bg-white', 'shadow-md'])],\n          contentContainerStyle: {\n            justifyContent: 'center',\n            alignItems: 'center'\n          },\n          children: deviceTree.devices.map(function (device, index) {\n            var otherDeviceOptions = [];\n            deviceTree.devices.map(function (deviceSearch, index) {\n              if (deviceSearch.id !== device.id) {\n                otherDeviceOptions.push({\n                  value: deviceSearch.docID,\n                  label: deviceSearch.name\n                });\n              }\n            });\n            return _jsxs(View, {\n              style: tw.style(['flex-1', 'p-5', 'border', 'border-gray-200', 'rounded-md', 'mb-5', 'bg-white', 'shadow-md', 'w-11/12', 'items-center']),\n              children: [_jsxs(View, {\n                style: tw.style('w-1/2'),\n                children: [_jsx(Text, {\n                  style: tw.style(['text-sm', 'mb-2']),\n                  children: \"Device Name\"\n                }), _jsx(TextInput, {\n                  placeholder: \"Enter device name\",\n                  value: device.name,\n                  onChangeText: function onChangeText(val) {\n                    var clone = _objectSpread({}, deviceTree);\n                    clone.devices[index].name = val;\n                    setDeviceTreeState(clone);\n                  },\n                  style: tw.style(['w-full', 'p-2', 'border', 'border-gray-300', 'rounded-md', 'mb-2'])\n                })]\n              }), _jsxs(View, {\n                style: tw.style(['flex', 'flex-row', 'items-center', 'mb-2', 'mt-2', 'w-1/2', 'justify-between', 'border-b']),\n                children: [_jsx(Text, {\n                  style: tw.style(['text-sm', 'mb-2', 'font-medium']),\n                  children: \"Device Id: \"\n                }), _jsx(Text, {\n                  style: tw.style(['text-sm', 'mb-2']),\n                  children: device.id ? device.id.toUpperCase() : 'No Id set to this device'\n                })]\n              }), _jsxs(View, {\n                style: tw.style(['flex', 'flex-row', 'items-center', 'mb-2', 'mt-2', 'justify-between', 'w-1/2', 'border-b']),\n                children: [_jsx(Text, {\n                  style: tw.style(['text-sm', 'mb-2', 'font-medium']),\n                  children: \"Print Online Orders: \"\n                }), _jsx(Switch, {\n                  value: device.printOnlineOrders,\n                  onValueChange: function onValueChange(val) {\n                    var clone = _objectSpread({}, deviceTree);\n                    clone.devices[index].printOnlineOrders = val;\n                    setDeviceTreeState(clone);\n                  }\n                })]\n              }), _jsxs(View, {\n                style: tw.style(['flex', 'flex-row', 'items-center', 'mb-2', 'mt-2', 'justify-between', 'w-1/2', 'border-b']),\n                children: [_jsx(Text, {\n                  style: tw.style(['text-sm', 'mb-2', 'font-medium']),\n                  children: \"Use Different Device To Print: \"\n                }), _jsx(Switch, {\n                  value: device.useDifferentDeviceToPrint,\n                  onValueChange: function onValueChange(val) {\n                    var clone = _objectSpread({}, deviceTree);\n                    clone.devices[index].useDifferentDeviceToPrint = val;\n                    setDeviceTreeState(clone);\n                  }\n                })]\n              }), !device.useDifferentDeviceToPrint ? _jsxs(View, {\n                style: tw.style(['flex', 'flex-col', 'items-center', 'mb-2', 'mt-2', 'w-1/2']),\n                children: [_jsx(Text, {\n                  style: [tw.style(['text-sm', 'mb-2']), {\n                    width: '100%'\n                  }],\n                  children: \"Print To Printer\"\n                }), _jsx(TextInput, {\n                  placeholder: \"Enter printer name\",\n                  value: device.printToPrinter,\n                  onChangeText: function onChangeText(val) {\n                    var clone = _objectSpread({}, deviceTree);\n                    clone.devices[index].printToPrinter = val;\n                    setDeviceTreeState(clone);\n                  },\n                  style: [tw.style(['p-2', 'border', 'border-gray-300', 'rounded-md', 'mb-2']), {\n                    width: '100%'\n                  }]\n                })]\n              }) : _jsxs(View, {\n                style: tw.style(['flex', 'flex-col', 'items-center', 'mb-2', 'mt-2', 'w-1/2']),\n                children: [_jsx(Text, {\n                  style: tw.style(['text-sm', 'mb-2']),\n                  children: \"Choose Device To Send Print To\"\n                }), _jsx(ReactSelect, {\n                  options: otherDeviceOptions,\n                  value: device.sendPrintToUserID,\n                  onChange: function onChange(val) {\n                    var clone = _objectSpread({}, deviceTree);\n                    clone.devices[index].sendPrintToUserID = val;\n                    setDeviceTreeState(clone);\n                  },\n                  placeholder: \"Choose Device To Send Print To\",\n                  menuPortalTarget: document.body,\n                  styles: {\n                    menuPortal: function menuPortal(base) {\n                      return _objectSpread(_objectSpread({}, base), {}, {\n                        zIndex: 9999\n                      });\n                    },\n                    control: function control(provided, state) {\n                      return _objectSpread(_objectSpread({}, provided), {}, {\n                        background: \"#fff\",\n                        borderColor: \"#9e9e9e\",\n                        minHeight: \"52px\",\n                        height: \"52px\",\n                        boxShadow: state.isFocused ? null : null\n                      });\n                    },\n                    valueContainer: function valueContainer(provided, state) {\n                      return _objectSpread(_objectSpread({}, provided), {}, {\n                        height: \"52px\",\n                        padding: \"0 6px\"\n                      });\n                    },\n                    input: function input(provided, state) {\n                      return _objectSpread(_objectSpread({}, provided), {}, {\n                        margin: \"0px\"\n                      });\n                    },\n                    indicatorSeparator: function indicatorSeparator(state) {\n                      return {\n                        display: \"none\"\n                      };\n                    },\n                    indicatorsContainer: function indicatorsContainer(provided, state) {\n                      return _objectSpread(_objectSpread({}, provided), {}, {\n                        height: \"52px\"\n                      });\n                    },\n                    container: function container(provided, state) {\n                      return _objectSpread(_objectSpread({}, provided), {}, {\n                        width: \"100%\"\n                      });\n                    }\n                  },\n                  menuPlacement: \"auto\",\n                  menuPosition: \"fixed\"\n                })]\n              }), _jsxs(View, {\n                style: [{\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  marginBottom: 10,\n                  justifyContent: 'space-between'\n                }, tw.style('w-1/2')],\n                children: [_jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).update(device);\n                    var clone = _objectSpread({}, deviceTree);\n                    clone.devices[index] = device;\n                    setDeviceTreeState(clone);\n                    console.log('Updated Device');\n                    setMyDeviceDetailsState(device);\n                    console.log('Updated My Device Details: ', device);\n                  },\n                  style: tw.style(['bg-blue-500', 'rounded-md', 'p-3', 'w-2/5', 'mt-2', 'mb-2']),\n                  children: _jsx(Text, {\n                    style: tw.style(['text-white', 'text-center', 'text-base']),\n                    children: \"Update Device\"\n                  })\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    if (deviceTree.devices.filter(function (deviceSearch) {\n                      return deviceSearch.id === myDeviceID;\n                    }).length > 0) {\n                      db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(deviceTree.devices.filter(function (deviceSearch) {\n                        return deviceSearch.id === myDeviceID;\n                      })[0].docID).update({\n                        id: null\n                      });\n                      var _clone = _objectSpread({}, deviceTree);\n                      _clone.devices.filter(function (deviceSearch) {\n                        return deviceSearch.id === myDeviceID;\n                      })[0].id = null;\n                      setDeviceTreeState(_clone);\n                    }\n                    db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).update({\n                      id: myDeviceID\n                    });\n                    var clone = _objectSpread({}, deviceTree);\n                    clone.devices[index].id = myDeviceID;\n                    setDeviceTreeState(clone);\n                    setMyDeviceDetailsState(device);\n                  },\n                  style: tw.style(['bg-blue-500', 'rounded-md', 'p-3', 'w-2/5', 'mt-2', 'mb-2']),\n                  children: _jsx(Text, {\n                    style: tw.style(['text-white', 'text-center', 'text-base']),\n                    children: \"Set To My ID\"\n                  })\n                })]\n              }), _jsx(TouchableOpacity, {\n                onPress: function onPress() {\n                  db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).delete();\n                  var clone = _objectSpread({}, deviceTree);\n                  clone = _objectSpread(_objectSpread({}, clone), {}, {\n                    devices: clone.devices.filter(function (deviceSearch) {\n                      return deviceSearch.docID !== device.docID;\n                    })\n                  });\n                  setDeviceTreeState(clone);\n                },\n                style: tw.style(['bg-red-500', 'rounded-md', 'p-3', 'w-1/2', 'mt-2', 'mb-4']),\n                children: _jsx(Text, {\n                  style: tw.style(['text-white', 'text-center', 'text-base']),\n                  children: \"Delete Device\"\n                })\n              })]\n            }, index);\n          })\n        })]\n      }), viewVisible && _jsx(Modal, {\n        visible: true,\n        children: _jsx(Animated.View, {\n          style: {\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            backgroundColor: \"white\",\n            position: \"absolute\",\n            opacity: fadeAnim,\n            height: \"100%\",\n            width: \"100%\"\n          },\n          children: _jsx(Image, {\n            source: require(\"../../../../../assets/loading.gif\"),\n            style: {\n              width: 450,\n              height: 450,\n              resizeMode: \"contain\"\n            }\n          })\n        })\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"rgba(255,255,255,1)\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  headerRowContainer: {\n    width: \"90%\",\n    height: 60,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginBottom: 20,\n    marginTop: 20\n  },\n  headerTxt: {\n    fontFamily: \"archivo-600\",\n    color: \"rgba(98,96,96,1)\",\n    fontSize: 20\n  },\n  billingBtn: {\n    width: 60,\n    height: 60,\n    backgroundColor: \"#E6E6E6\",\n    borderRadius: 30,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  billingIcon: {\n    color: \"rgba(128,128,128,1)\",\n    fontSize: 30\n  },\n  detailInputContainer: {\n    width: \"90%\",\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"rgba(155,152,152,1)\",\n    shadowColor: \"rgba(0,0,0,1)\",\n    shadowOffset: {\n      width: 3,\n      height: 3\n    },\n    elevation: 45,\n    shadowOpacity: 0.2,\n    shadowRadius: 15,\n    padding: 30,\n    minHeight: \"75%\",\n    marginTop: 15\n  },\n  materialStackedLabelTextbox1: {\n    height: 60,\n    width: 483\n  },\n  materialStackedLabelTextbox2: {\n    height: 60,\n    width: 483,\n    marginLeft: 43\n  },\n  materialStackedLabelTextbox1Row: {\n    height: 60,\n    flexDirection: \"row\",\n    marginTop: 23,\n    marginLeft: 36,\n    marginRight: 32\n  },\n  materialStackedLabelTextbox3: {\n    height: 60,\n    width: 483\n  },\n  materialStackedLabelTextbox5: {\n    height: 60,\n    width: 483,\n    marginLeft: 43\n  },\n  materialStackedLabelTextbox3Row: {\n    height: 60,\n    flexDirection: \"row\",\n    marginTop: 30,\n    marginLeft: 36,\n    marginRight: 32\n  },\n  materialStackedLabelTextbox4: {\n    height: 60,\n    width: 483\n  },\n  materialStackedLabelTextbox6: {\n    height: 60,\n    width: 483,\n    marginLeft: 43\n  },\n  materialStackedLabelTextbox4Row: {\n    height: 60,\n    flexDirection: \"row\",\n    marginTop: 29,\n    marginLeft: 36,\n    marginRight: 32\n  },\n  materialStackedLabelTextbox7: {\n    height: 60,\n    width: 483\n  },\n  materialButtonViolet2: {\n    height: 48,\n    width: 483,\n    marginLeft: 43,\n    marginTop: 12\n  },\n  materialStackedLabelTextbox7Row: {\n    height: 60,\n    flexDirection: \"row\",\n    marginTop: 14,\n    marginLeft: 36,\n    marginRight: 32\n  },\n  helperDownloadContainer: {\n    width: \"100%\",\n    height: 79,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    padding: 10\n  },\n  helperTxt: {\n    fontFamily: \"archivo-500\",\n    color: \"#121212\",\n    fontSize: 19,\n    width: 483,\n    height: 52\n  },\n  badgeWindows: {\n    width: 200,\n    height: 79\n  },\n  badgeMac: {\n    width: 200,\n    height: 79\n  }\n});\nexport default DeviceSettings;","map":{"version":3,"names":["React","useEffect","useRef","useState","View","Text","ScrollView","StyleSheet","Animated","Modal","TouchableOpacity","Dimensions","Button","Switch","TextInput","deviceIdState","deviceTreeState","setDeviceTreeState","setMyDeviceDetailsState","auth","db","ReactSelect","loadStripe","Image","tw","jsx","_jsx","jsxs","_jsxs","DeviceSettings","deviceTree","use","myDeviceID","fadeAnim","Value","current","_useState","_useState2","_slicedToArray","viewVisible","setviewVisible","_Dimensions$get","get","width","height","fadeIn","timing","toValue","duration","useNativeDriver","start","resetLoader","AddNewDevice","_ref","_asyncToGenerator","collection","doc","currentUser","uid","add","price","quantity","success_url","window","location","href","cancel_url","then","docRef","onSnapshot","_ref2","snap","_snap$data","data","error","sessionId","alert","message","stripe","console","log","redirectToCheckout","_x","apply","arguments","className","children","style","styles","container","headerRowContainer","headerTxt","devices","length","extraDevicesPayingFor","onPress","name","id","printToPrinter","clone","_objectSpread","push","sendPrintToUserID","docID","contentContainerStyle","justifyContent","alignItems","map","device","index","otherDeviceOptions","deviceSearch","value","label","placeholder","onChangeText","val","toUpperCase","printOnlineOrders","onValueChange","useDifferentDeviceToPrint","options","onChange","menuPortalTarget","document","body","menuPortal","base","zIndex","control","provided","state","background","borderColor","minHeight","boxShadow","isFocused","valueContainer","padding","input","margin","indicatorSeparator","display","indicatorsContainer","menuPlacement","menuPosition","flexDirection","marginBottom","update","filter","delete","visible","backgroundColor","position","opacity","source","require","resizeMode","create","marginTop","fontFamily","color","fontSize","billingBtn","borderRadius","billingIcon","detailInputContainer","borderWidth","shadowColor","shadowOffset","elevation","shadowOpacity","shadowRadius","materialStackedLabelTextbox1","materialStackedLabelTextbox2","marginLeft","materialStackedLabelTextbox1Row","marginRight","materialStackedLabelTextbox3","materialStackedLabelTextbox5","materialStackedLabelTextbox3Row","materialStackedLabelTextbox4","materialStackedLabelTextbox6","materialStackedLabelTextbox4Row","materialStackedLabelTextbox7","materialButtonViolet2","materialStackedLabelTextbox7Row","helperDownloadContainer","helperTxt","badgeWindows","badgeMac"],"sources":["/Users/peterputros/Desktop/PosMate/pages/authed/backendPos/MainPage/settings/DeviceSettings.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"react-select2-wrapper/css/select2.css\";\nimport {\n    View,\n    Text,\n    ScrollView,\n    StyleSheet,\n    Animated,\n    Modal,\n    TouchableOpacity,\n    Dimensions\n} from \"react-native\";\nimport { Button, Switch, TextInput } from \"@react-native-material/core\";\nimport {\n    deviceIdState,\n    deviceTreeState,\n    setDeviceTreeState,\n    setMyDeviceDetailsState,\n} from \"state/state\";\nimport { auth, db } from \"state/firebaseConfig\";\nimport ReactSelect from \"react-select\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Image } from \"react-native\";\nimport tw from 'twrnc';\n\nconst DeviceSettings = () => {\n    const deviceTree = deviceTreeState.use()\n    const myDeviceID = deviceIdState.use()\n    const fadeAnim = useRef(new Animated.Value(0)).current;\n    const [viewVisible, setviewVisible] = useState(false);\n    const { width, height } = Dimensions.get('window');\n\n    const fadeIn = () => {\n        // Will change fadeAnim value to 0 in 3 seconds\n        Animated.timing(fadeAnim, {\n            toValue: 1,\n            duration: 500,\n            useNativeDriver: false,\n        }).start();\n    };\n\n    const resetLoader = () => {\n        setviewVisible(true);\n        fadeIn();\n    };\n\n    const AddNewDevice = async () => {\n        await db\n            .collection(\"users\")\n            .doc(auth.currentUser.uid)\n            .collection(\"checkout_sessions\")\n            .add({\n                price: 'price_1Oj9NZCIw3L7DOwI7DKAhIve', // todo price Id from your products price in the Stripe Dashboard\n                quantity: 1,\n                success_url: window.location.href, // return user to this screen on successful purchase\n                cancel_url: window.location.href, // return user to this screen on failed purchase\n            })\n            .then((docRef) => {\n                // Wait for the checkoutSession to get attached by the extension\n                docRef.onSnapshot(async (snap) => {\n                    const { error, sessionId } = snap.data();\n                    if (error) {\n                        // Show an error to your customer and inspect\n                        // your Cloud Function logs in the Firebase console.\n                        alert(`An error occurred: ${error.message}`);\n                    }\n\n                    if (sessionId) {\n                        // We have a session, let's redirect to Checkout\n                        // Init Stripe\n                        const stripe = await loadStripe(\n                            \"pk_live_51MHqrvCIw3L7DOwI0ol9CTCSH7mQXTLKpxTWKzmwOY1MdKwaYwhdJq6WTpkWdBeql3sS44JmybynlRnaO2nSa1FK001dHiEOZO\" // todo enter your public stripe key here\n                        );\n                        console.log(`redirecting`);\n                        await stripe.redirectToCheckout({ sessionId });\n                    }\n                });\n            });\n    }\n\n    //Make style better\n\n    return (\n        <div className=\"page-wrapper\">\n            <div className=\"content\">\n                <View style={styles.container}>\n                    <View style={styles.headerRowContainer}>\n                        <Text style={styles.headerTxt}>Device Settings</Text>\n                        {deviceTree.devices.length < 2 + deviceTree.extraDevicesPayingFor ?\n                            <TouchableOpacity\n                                onPress={() => {\n\n                                    db.collection('users').doc(auth.currentUser.uid).collection('devices').add({ name: `Device${deviceTree.devices.length}`, id: null, printToPrinter: null }).then((docRef) => {\n                                        const clone = { ...deviceTree }\n                                        clone.devices.push({ name: \"Device\", id: null, printToPrinter: null, sendPrintToUserID: null, docID: docRef.id })\n                                        setDeviceTreeState(clone)\n                                    })\n                                }}\n                                style={tw.style([\n                                    'bg-green-500',\n                                    'rounded-md',\n                                    'p-3',\n                                    'mt-2',\n                                    'mb-2'\n                                ])}\n                            >\n                                <Text style={tw.style([\n                                    'text-white',\n                                    'text-center',\n                                    'text-base'\n                                ])} >Add Device</Text>\n                            </TouchableOpacity>\n                            :\n                            <TouchableOpacity\n                                onPress={() => {\n                                    resetLoader()\n                                    AddNewDevice()\n                                }}\n                                style={tw.style([\n                                    'bg-green-500',\n                                    'rounded-md',\n                                    'p-3',\n                                    'mt-2',\n                                    'mb-2'\n                                ])}\n                            >\n                                <Text style={tw.style([\n                                    'text-white',\n                                    'text-center',\n                                    'text-base'\n                                ])} >Pay For Another Device</Text>\n                            </TouchableOpacity>\n                        }\n                    </View>\n                    <ScrollView style={[{ width: '90%', height: height / 1.4 }, tw.style([\n                        'p-5',\n                        'border',\n                        'border-gray-200',\n                        'rounded-md',\n                        'bg-white',\n                        'shadow-md',\n                    ])]}\n                        contentContainerStyle={{ justifyContent: 'center', alignItems: 'center' }}\n                    >\n                        {deviceTree.devices.map((device, index) => {\n\n                            const otherDeviceOptions = []\n                            deviceTree.devices.map((deviceSearch, index) => {\n                                if (deviceSearch.id !== device.id) {\n                                    otherDeviceOptions.push({ value: deviceSearch.docID, label: deviceSearch.name })\n                                }\n                            })\n\n                            return (\n                                <View key={index} style={tw.style([\n                                    'flex-1',\n                                    'p-5',\n                                    'border',\n                                    'border-gray-200',\n                                    'rounded-md',\n                                    'mb-5',\n                                    'bg-white',\n                                    'shadow-md',\n                                    'w-11/12',\n                                    'items-center'\n                                ])}>\n                                    <View style={tw.style('w-1/2')}>\n                                        <Text style={tw.style([\n                                            'text-sm',\n                                            'mb-2',\n\n                                        ])} >Device Name</Text>\n                                        <TextInput placeholder='Enter device name'\n                                            value={device.name}\n                                            onChangeText={val => {\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index].name = val\n                                                setDeviceTreeState(clone)\n                                            }}\n                                            style={tw.style(['w-full', 'p-2', 'border', 'border-gray-300', 'rounded-md', 'mb-2'])}\n                                        />\n                                    </View>\n                                    <View\n                                        style={tw.style([\n                                            'flex',\n                                            'flex-row',\n                                            'items-center',\n                                            'mb-2',\n                                            'mt-2',\n                                            'w-1/2',\n                                            'justify-between',\n                                            'border-b'\n                                        ])}\n                                    >\n                                        <Text style={tw.style([\n                                            'text-sm',\n                                            'mb-2',\n                                            'font-medium'\n                                        ])} >Device Id: </Text>\n                                        <Text style={tw.style([\n                                            'text-sm',\n                                            'mb-2',\n                                        ])} >{device.id ? device.id.toUpperCase() : 'No Id set to this device'}</Text>\n                                    </View>\n                                    <View style={tw.style([\n                                        'flex',\n                                        'flex-row',\n                                        'items-center',\n                                        'mb-2',\n                                        'mt-2',\n                                        'justify-between',\n                                        'w-1/2',\n                                        'border-b'\n                                    ])}>\n                                        <Text style={tw.style([\n                                            'text-sm',\n                                            'mb-2',\n                                            'font-medium'\n                                        ])} >Print Online Orders: </Text>\n                                        <Switch value={device.printOnlineOrders} onValueChange={val => {\n                                            const clone = { ...deviceTree }\n                                            clone.devices[index].printOnlineOrders = val\n                                            setDeviceTreeState(clone)\n                                        }} />\n                                    </View>\n                                    <View style={tw.style([\n                                        'flex',\n                                        'flex-row',\n                                        'items-center',\n                                        'mb-2',\n                                        'mt-2',\n                                        'justify-between',\n                                        'w-1/2',\n                                        'border-b'\n                                    ])}>\n                                        <Text style={tw.style([\n                                            'text-sm',\n                                            'mb-2',\n                                            'font-medium'\n                                        ])} >Use Different Device To Print: </Text>\n                                        <Switch value={device.useDifferentDeviceToPrint} onValueChange={val => {\n                                            const clone = { ...deviceTree }\n                                            clone.devices[index].useDifferentDeviceToPrint = val\n                                            setDeviceTreeState(clone)\n                                        }} />\n                                    </View>\n                                    {!device.useDifferentDeviceToPrint ? <View style={\n                                        tw.style([\n                                            'flex',\n                                            'flex-col',\n                                            'items-center',\n                                            'mb-2',\n                                            'mt-2',\n                                            'w-1/2',\n                                        ])\n                                    }>\n                                        <Text style={[tw.style([\n                                            'text-sm',\n                                            'mb-2',\n                                        ]), { width: '100%' }]} >Print To Printer</Text>\n                                        <TextInput placeholder='Enter printer name'\n                                            value={device.printToPrinter}\n                                            onChangeText={val => {\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index].printToPrinter = val\n                                                setDeviceTreeState(clone)\n                                            }}\n                                            style={[tw.style(['p-2', 'border', 'border-gray-300', 'rounded-md', 'mb-2']), { width: '100%' }]}\n                                        />\n                                    </View> :\n                                        <View style={\n                                            tw.style([\n                                                'flex',\n                                                'flex-col',\n                                                'items-center',\n                                                'mb-2',\n                                                'mt-2',\n                                                'w-1/2',\n                                            ])\n                                        }>\n                                            <Text style={tw.style([\n                                                'text-sm',\n                                                'mb-2',\n                                            ])} >Choose Device To Send Print To</Text>\n                                            {/* <select\n                                                style={tw.style([\n                                                    'w-1/2',\n                                                    'p-2',\n                                                    'border',\n                                                    'border-gray-300',\n                                                    'rounded-md',\n                                                    'mb-2'\n                                                ])}\n                                                value={device.sendPrintToUserID}\n                                            // onChange={(e) => {\n                                            //     const clone = { ...deviceTree }\n                                            //     clone.devices[index].sendPrintToUserID = e.target.value\n                                            //     setDeviceTreeState(clone)\n                                            //     console.log('Device to send to updated to: ', ' Label: ', e.target.label, ' Value: ', e.target.value)\n                                            // }\n                                            // }\n                                            >\n                                                <option value={null}>Select Device</option>\n                                                {otherDeviceOptions.map((device, index) => {\n                                                    return (\n                                                        <option key={index} label={device.label} value={device.value} onClick={() => {\n                                                            const clone = { ...deviceTree }\n                                                            clone.devices[index].sendPrintToUserID = { value: device.value, label: device.label }\n                                                            setDeviceTreeState(clone)\n                                                            console.log('Device to send to updated to: ', ' Label: ', device.label, ' Value: ', device.value)\n                                                        }}>{device.label}</option>\n                                                    )\n                                                })}\n                                            </select> */}\n                                            <ReactSelect\n                                                options={otherDeviceOptions}\n                                                value={\n                                                    device.sendPrintToUserID\n                                                }\n                                                onChange={(val) => {\n                                                    const clone = { ...deviceTree }\n                                                    clone.devices[index].sendPrintToUserID = val\n                                                    setDeviceTreeState(clone)\n                                                }}\n                                                placeholder={\"Choose Device To Send Print To\"}\n                                                menuPortalTarget={document.body}\n                                                styles={{\n                                                    menuPortal: (base) => ({ ...base, zIndex: 9999 }),\n                                                    control: (provided, state) => ({\n                                                        ...provided,\n                                                        background: \"#fff\",\n                                                        borderColor: \"#9e9e9e\",\n                                                        minHeight: \"52px\",\n                                                        height: \"52px\",\n                                                        boxShadow: state.isFocused ? null : null,\n                                                    }),\n\n                                                    valueContainer: (provided, state) => ({\n                                                        ...provided,\n                                                        height: \"52px\",\n                                                        padding: \"0 6px\",\n                                                    }),\n\n                                                    input: (provided, state) => ({\n                                                        ...provided,\n                                                        margin: \"0px\",\n                                                    }),\n                                                    indicatorSeparator: (state) => ({\n                                                        display: \"none\",\n                                                    }),\n                                                    indicatorsContainer: (provided, state) => ({\n                                                        ...provided,\n                                                        height: \"52px\",\n                                                    }),\n                                                    container: (provided, state) => ({\n                                                        ...provided,\n                                                        width: \"100%\",\n                                                    }),\n                                                }}\n                                                menuPlacement=\"auto\"\n                                                menuPosition=\"fixed\"\n                                            />\n                                        </View>\n                                    }\n                                    <View style={[{ flexDirection: 'row', alignItems: 'center', marginBottom: 10, justifyContent: 'space-between' }, tw.style('w-1/2')]}>\n                                        <TouchableOpacity\n                                            onPress={() => {\n                                                db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).update(device)\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index] = device\n                                                setDeviceTreeState(clone\n                                                )\n                                                console.log('Updated Device')\n                                                setMyDeviceDetailsState(device)\n                                                console.log('Updated My Device Details: ', device)\n                                            }}\n                                            style={tw.style([\n                                                'bg-blue-500',\n                                                'rounded-md',\n                                                'p-3',\n                                                'w-2/5',\n                                                'mt-2',\n                                                'mb-2'\n                                            ])}\n                                        >\n                                            <Text style={tw.style([\n                                                'text-white',\n                                                'text-center',\n                                                'text-base'\n                                            ])} >Update Device</Text>\n                                        </TouchableOpacity>\n                                        <TouchableOpacity\n                                            onPress={() => {\n                                                if (deviceTree.devices.filter(deviceSearch => deviceSearch.id === myDeviceID).length > 0) {\n                                                    db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(deviceTree.devices.filter(deviceSearch => deviceSearch.id === myDeviceID)[0].docID).update({ id: null })\n                                                    const clone = { ...deviceTree }\n                                                    clone.devices.filter(deviceSearch => deviceSearch.id === myDeviceID)[0].id = null\n                                                    setDeviceTreeState(clone)\n                                                }\n                                                db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).update({ id: myDeviceID })\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index].id = myDeviceID\n                                                setDeviceTreeState(clone)\n                                                setMyDeviceDetailsState(device)\n                                            }}\n                                            style={tw.style([\n                                                'bg-blue-500',\n                                                'rounded-md',\n                                                'p-3',\n                                                'w-2/5',\n                                                'mt-2',\n                                                'mb-2'\n                                            ])}\n                                        >\n                                            <Text style={tw.style([\n                                                'text-white',\n                                                'text-center',\n                                                'text-base'\n                                            ])} >Set To My ID</Text>\n                                        </TouchableOpacity>\n                                    </View>\n                                    <TouchableOpacity\n                                        onPress={() => {\n                                            db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).delete()\n                                            let clone = { ...deviceTree }\n                                            clone = { ...clone, devices: clone.devices.filter(deviceSearch => deviceSearch.docID !== device.docID) }\n                                            setDeviceTreeState(clone)\n                                        }}\n                                        style={tw.style([\n                                            'bg-red-500',\n                                            'rounded-md',\n                                            'p-3',\n                                            'w-1/2',\n                                            'mt-2',\n                                            'mb-4',\n                                        ])}\n                                    >\n                                        <Text style={tw.style([\n                                            'text-white',\n                                            'text-center',\n                                            'text-base'\n                                        ])} >Delete Device</Text>\n                                    </TouchableOpacity>\n                                </View>\n                            )\n                        })}\n                    </ScrollView>\n                </View>\n                {viewVisible && (\n                    <Modal visible={true}>\n                        <Animated.View\n                            style={{\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                                backgroundColor: \"white\",\n                                position: \"absolute\",\n                                opacity: fadeAnim,\n                                height: \"100%\",\n                                width: \"100%\",\n                            }}\n                        >\n                            <Image\n                                source={require(\"assets/loading.gif\")}\n                                style={{ width: 450, height: 450, resizeMode: \"contain\" }}\n                            />\n                        </Animated.View>\n                    </Modal>\n                )}\n            </div>\n        </div >\n    );\n\n\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: \"rgba(255,255,255,1)\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        height: \"100%\",\n    },\n    headerRowContainer: {\n        width: \"90%\",\n        height: 60,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        marginBottom: 20,\n        marginTop: 20\n    },\n    headerTxt: {\n        fontFamily: \"archivo-600\",\n        color: \"rgba(98,96,96,1)\",\n        fontSize: 20,\n    },\n    billingBtn: {\n        width: 60,\n        height: 60,\n        backgroundColor: \"#E6E6E6\",\n        borderRadius: 30,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    billingIcon: {\n        color: \"rgba(128,128,128,1)\",\n        fontSize: 30,\n    },\n    detailInputContainer: {\n        width: \"90%\",\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: \"rgba(155,152,152,1)\",\n        shadowColor: \"rgba(0,0,0,1)\",\n        shadowOffset: {\n            width: 3,\n            height: 3,\n        },\n        elevation: 45,\n        shadowOpacity: 0.2,\n        shadowRadius: 15,\n        padding: 30,\n        minHeight: \"75%\",\n        marginTop: 15,\n    },\n    materialStackedLabelTextbox1: {\n        height: 60,\n        width: 483,\n    },\n    materialStackedLabelTextbox2: {\n        height: 60,\n        width: 483,\n        marginLeft: 43,\n    },\n    materialStackedLabelTextbox1Row: {\n        height: 60,\n        flexDirection: \"row\",\n        marginTop: 23,\n        marginLeft: 36,\n        marginRight: 32,\n    },\n    materialStackedLabelTextbox3: {\n        height: 60,\n        width: 483,\n    },\n    materialStackedLabelTextbox5: {\n        height: 60,\n        width: 483,\n        marginLeft: 43,\n    },\n    materialStackedLabelTextbox3Row: {\n        height: 60,\n        flexDirection: \"row\",\n        marginTop: 30,\n        marginLeft: 36,\n        marginRight: 32,\n    },\n    materialStackedLabelTextbox4: {\n        height: 60,\n        width: 483,\n    },\n    materialStackedLabelTextbox6: {\n        height: 60,\n        width: 483,\n        marginLeft: 43,\n    },\n    materialStackedLabelTextbox4Row: {\n        height: 60,\n        flexDirection: \"row\",\n        marginTop: 29,\n        marginLeft: 36,\n        marginRight: 32,\n    },\n    materialStackedLabelTextbox7: {\n        height: 60,\n        width: 483,\n    },\n    materialButtonViolet2: {\n        height: 48,\n        width: 483,\n        marginLeft: 43,\n        marginTop: 12,\n    },\n    materialStackedLabelTextbox7Row: {\n        height: 60,\n        flexDirection: \"row\",\n        marginTop: 14,\n        marginLeft: 36,\n        marginRight: 32,\n    },\n    helperDownloadContainer: {\n        width: \"100%\",\n        height: 79,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        padding: 10,\n    },\n    helperTxt: {\n        fontFamily: \"archivo-500\",\n        color: \"#121212\",\n        fontSize: 19,\n        width: 483,\n        height: 52,\n    },\n    badgeWindows: {\n        width: 200,\n        height: 79,\n    },\n    badgeMac: {\n        width: 200,\n        height: 79,\n    },\n});\n\nexport default DeviceSettings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}