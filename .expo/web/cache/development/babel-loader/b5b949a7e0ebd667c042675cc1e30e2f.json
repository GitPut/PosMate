{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Button, TextInput } from \"@react-native-material/core\";\nimport DropDown from \"./DropDown\";\nimport { userStoreState } from \"../state/state\";\nimport { updateData } from \"../state/firebaseFunctions\";\nimport OptionView from \"./OptionView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar MyListItem = function MyListItem(_ref) {\n  var item = _ref.item,\n    index = _ref.index,\n    setnewProduct = _ref.setnewProduct,\n    newProduct = _ref.newProduct,\n    newProductOptions = _ref.newProductOptions,\n    indexOn = _ref.indexOn,\n    setindexOn = _ref.setindexOn,\n    setcurrentY = _ref.setcurrentY;\n  var memoizedItem = useMemo(function () {\n    return item;\n  }, [item]);\n  if (indexOn !== index) {\n    return _jsxs(TouchableOpacity, {\n      onPress: function onPress() {\n        return setindexOn(index);\n      },\n      style: {\n        padding: 25,\n        margin: 15,\n        backgroundColor: \"lightgrey\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        height: 100\n      },\n      children: [_jsx(Text, {\n        children: memoizedItem.label\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          newProductOptions.current.push(_objectSpread(_objectSpread({}, memoizedItem), {}, {\n            label: memoizedItem.label + \" Copy\"\n          }));\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              options: newProductOptions.current\n            });\n          });\n          setindexOn(newProductOptions.current.length - 1);\n        },\n        children: _jsx(Text, {\n          style: {\n            marginBottom: 25,\n            fontWeight: \"700\",\n            color: \"red\"\n          },\n          children: \"Copy\"\n        })\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          newProductOptions.current.splice(index, 1);\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              options: newProductOptions.current\n            });\n          });\n          setindexOn(indexOn - 1);\n        },\n        children: _jsx(Text, {\n          style: {\n            marginBottom: 25,\n            fontWeight: \"700\",\n            color: \"red\"\n          },\n          children: \"X\"\n        })\n      })]\n    });\n  } else {\n    var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      optionLblsValues = _useState2[0],\n      setoptionLblsValues = _useState2[1];\n    var _useState3 = useState(memoizedItem),\n      _useState4 = _slicedToArray(_useState3, 2),\n      e = _useState4[0],\n      sete = _useState4[1];\n    var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      ifStatementList = _useState6[0],\n      setifStatementList = _useState6[1];\n    var optionLbls = newProduct.options.map(function (el) {\n      if (el.label !== e.label && el.label !== null) {\n        return el.label;\n      }\n    });\n    useEffect(function () {\n      if (e.selectedCaseKey !== null) {\n        var local = newProduct.options.filter(function (localE) {\n          return localE.label == e.selectedCaseKey;\n        });\n        var optionLblsValuesLocal = local.length > 0 && local[0].optionsList.map(function (el) {\n          return el.label;\n        });\n        setoptionLblsValues(optionLblsValuesLocal);\n      }\n    }, [e]);\n    return _jsx(View, {\n      children: _jsxs(View, {\n        style: {\n          padding: 25,\n          margin: 15,\n          backgroundColor: \"lightgrey\"\n        },\n        children: [_jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            newProductOptions.current.push(_objectSpread(_objectSpread({}, e), {}, {\n              label: e.label + \" Copy\"\n            }));\n            setnewProduct(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                options: newProductOptions.current\n              });\n            });\n            setindexOn(newProductOptions.current.length - 1);\n          },\n          children: _jsx(Text, {\n            style: {\n              marginBottom: 25,\n              fontWeight: \"700\",\n              color: \"red\"\n            },\n            children: \"Copy\"\n          })\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            newProductOptions.current.splice(index, 1);\n            setnewProduct(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                options: newProductOptions.current\n              });\n            });\n            setindexOn(null);\n          },\n          children: _jsx(Text, {\n            style: {\n              marginBottom: 25,\n              fontWeight: \"700\",\n              color: \"red\"\n            },\n            children: \"X\"\n          })\n        }), _jsx(TextInput, {\n          placeholder: \"Enter Select List Label\",\n          onChangeText: function onChangeText(val) {\n            sete(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                label: val\n              });\n            });\n            newProductOptions.current[index].label = val;\n          },\n          value: e.label,\n          style: {\n            marginBottom: 25\n          }\n        }), _jsx(DropDown, {\n          label: \"Option Type\",\n          options: [\"Standard\", \"Dropdown\"],\n          setValue: function setValue(val) {\n            if (e.optionType) {\n              newProductOptions.current[index].optionType = val;\n            } else {\n              newProductOptions.current[index] = _objectSpread(_objectSpread({}, e), {}, {\n                optionType: val\n              });\n              console.log(newProductOptions.current[index].optionType);\n            }\n            setnewProduct(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                options: newProductOptions.current\n              });\n            });\n          },\n          value: e.optionType,\n          style: {\n            marginBottom: 25\n          }\n        }), _jsx(TextInput, {\n          placeholder: \"Enter Number Of Selectable; If There Is\",\n          onChangeText: function onChangeText(val) {\n            sete(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                numOfSelectable: val\n              });\n            });\n            newProductOptions.current[index].numOfSelectable = val;\n          },\n          value: e.numOfSelectable,\n          style: {\n            marginBottom: 25\n          }\n        }), e.optionsList.map(function (eInnerListStart, indexInnerList) {\n          var _useState7 = useState(eInnerListStart),\n            _useState8 = _slicedToArray(_useState7, 2),\n            eInnerList = _useState8[0],\n            seteInnerList = _useState8[1];\n          return _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              marginBottom: 25,\n              alignItems: \"center\"\n            },\n            children: [_jsx(TextInput, {\n              placeholder: \"Enter Option Label\",\n              onChangeText: function onChangeText(val) {\n                newProductOptions.current[index].optionsList[indexInnerList].label = val;\n                seteInnerList(function (prevState) {\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    label: val\n                  });\n                });\n              },\n              value: eInnerList.label\n            }), _jsx(TextInput, {\n              placeholder: \"Enter price increase\",\n              onChangeText: function onChangeText(val) {\n                newProductOptions.current[index].optionsList[indexInnerList].priceIncrease = val;\n                seteInnerList(function (prevState) {\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    priceIncrease: val\n                  });\n                });\n              },\n              value: eInnerList.priceIncrease,\n              style: {\n                marginLeft: 20,\n                marginRight: 20\n              }\n            }), _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                newProductOptions.current[index].optionsList.splice(indexInnerList, 1);\n                setnewProduct(function (prevState) {\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    options: newProductOptions.current\n                  });\n                });\n              },\n              children: _jsx(Text, {\n                style: {\n                  fontWeight: \"700\",\n                  color: \"red\"\n                },\n                children: \"X\"\n              })\n            })]\n          });\n        }), _jsx(Button, {\n          title: \"Add Option Choice\",\n          onPress: function onPress() {\n            newProductOptions.current[index].optionsList.push({\n              label: null,\n              priceIncrease: null\n            });\n            setcurrentY(window.pageYOffset);\n            setnewProduct(function (prevState) {\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                options: newProductOptions.current\n              });\n            });\n          },\n          style: {\n            marginBottom: 25\n          }\n        }), ifStatementList.map(function (ifStatement) {\n          return _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              marginBottom: 25\n            },\n            children: [_jsx(DropDown, {\n              label: \"Show if...\",\n              options: optionLbls,\n              setValue: function setValue(val) {\n                sete(function (prevState) {\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    selectedCaseKey: val\n                  });\n                });\n                newProductOptions.current[index].selectedCaseKey = val;\n              },\n              value: ifStatement.selectedCaseKey,\n              style: {\n                marginBottom: 25\n              }\n            }), _jsx(Text, {\n              children: \"\\\"=\\\"\"\n            }), _jsx(DropDown, {\n              label: \"Show if...\",\n              options: optionLblsValues,\n              setValue: function setValue(val) {\n                sete(function (prevState) {\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    selectedCaseValue: val\n                  });\n                });\n                newProductOptions.current[index].selectedCaseValue = val;\n              },\n              value: ifStatement.selectedCaseValue,\n              style: {\n                marginBottom: 25\n              }\n            })]\n          });\n        }), optionLbls.length > 1 && _jsx(Button, {\n          title: \"Add If Statement\",\n          onPress: function onPress() {\n            return setifStatementList(function (prev) {\n              return [].concat(_toConsumableArray(prev), [{\n                selectedCaseKey: null,\n                selectedCaseValue: null\n              }]);\n            });\n          }\n        })]\n      })\n    });\n  }\n};\nvar AddProduct = function AddProduct(_ref2) {\n  var route = _ref2.route,\n    navigation = _ref2.navigation;\n  var _ref3 = route.params ? route.params : {\n      existingProduct: null,\n      existingProductIndex: null\n    },\n    existingProduct = _ref3.existingProduct,\n    existingProductIndex = _ref3.existingProductIndex;\n  var catalog = userStoreState.use();\n  var _useState9 = useState(existingProduct ? existingProduct : {\n      name: null,\n      price: null,\n      catagory: null,\n      options: [],\n      description: null\n    }),\n    _useState10 = _slicedToArray(_useState9, 2),\n    newProduct = _useState10[0],\n    setnewProduct = _useState10[1];\n  var newProductOptions = useRef(existingProduct ? existingProduct.options : []);\n  var _useState11 = useState(0),\n    _useState12 = _slicedToArray(_useState11, 2),\n    indexOn = _useState12[0],\n    setindexOn = _useState12[1];\n\n  function handleDataUpdate(copyProductData) {\n    if (copyProductData) {\n      updateData(_toConsumableArray(catalog.categories), [].concat(_toConsumableArray(catalog.products), [copyProductData]));\n      navigation.goBack();\n    } else if (existingProduct) {\n      var copy = structuredClone(catalog.products);\n      var newProductUseRef = _objectSpread(_objectSpread({}, newProduct), {}, {\n        options: newProductOptions.current\n      });\n      copy[existingProductIndex] = newProductUseRef;\n      updateData(_toConsumableArray(catalog.categories), copy);\n      navigation.goBack();\n    } else {\n      updateData(_toConsumableArray(catalog.categories), [].concat(_toConsumableArray(catalog.products), [newProduct]));\n      navigation.goBack();\n    }\n  }\n  var OptionsAddingSection = function OptionsAddingSection() {\n    return _jsxs(View, {\n      children: [_jsx(FlatList\n      , {\n        getItemLayout: function getItemLayout(data, index) {\n          var _data$optionsList;\n          return {\n            length: index === indexOn ? 400 * ((_data$optionsList = data.optionsList) == null ? void 0 : _data$optionsList.length) : 100,\n            offset: 400 * index,\n            index: index\n          };\n        },\n        data: newProduct.options,\n        keyExtractor: function keyExtractor(item) {\n          var _item$id;\n          return (_item$id = item.id) == null ? void 0 : _item$id.toString();\n        },\n        renderItem: function renderItem(_ref4) {\n          var item = _ref4.item,\n            index = _ref4.index;\n          return _jsx(OptionView, {\n            item: item,\n            index: index,\n            newProduct: newProduct,\n            setnewProduct: setnewProduct,\n            newProductOptions: newProductOptions,\n            indexOn: indexOn,\n            setindexOn: setindexOn\n          });\n        }\n      }), _jsx(Button, {\n        title: \"Add Product Option\",\n        onPress: function onPress() {\n          newProductOptions.current.push({\n            label: null,\n            optionsList: [],\n            selectedCaseKey: null,\n            selectedCaseValue: null,\n            numOfSelectable: null,\n            id: Math.random().toString(36).substr(2, 9),\n            optionType: null\n          });\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              options: newProductOptions.current\n            });\n          });\n          setindexOn(newProductOptions.current.length - 1);\n        },\n        style: {\n          marginBottom: 25\n        }\n      })]\n    });\n  };\n  return _jsx(ScrollView, {\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      flex: 1\n    },\n    contentContainerStyle: {\n      width: \"93%\",\n      alignSelf: \"center\",\n      marginTop: 25\n    },\n    children: _jsxs(_Fragment, {\n      children: [_jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          padding: 20,\n          justifyContent: \"space-between\",\n          alignItems: \"center\"\n        },\n        children: [_jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.goBack();\n          },\n          children: _jsx(Text, {\n            style: {\n              marginBottom: 25,\n              fontWeight: \"700\",\n              color: \"red\"\n            },\n            children: \"X\"\n          })\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            var copy = structuredClone(newProduct);\n            copy.name = copy.name + \" Copy\";\n            handleDataUpdate(copy);\n          },\n          children: _jsx(Text, {\n            style: {\n              marginBottom: 25,\n              fontWeight: \"700\",\n              color: \"red\"\n            },\n            children: \"Copy\"\n          })\n        }), _jsx(Text, {\n          style: {\n            marginBottom: 25\n          },\n          children: \"AddProduct\"\n        })]\n      }), _jsx(TextInput, {\n        placeholder: \"Enter Product Name\",\n        onChangeText: function onChangeText(val) {\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              name: val\n            });\n          });\n        },\n        value: newProduct.name,\n        style: {\n          marginBottom: 25\n        }\n      }), _jsx(TextInput, {\n        placeholder: \"Enter any other items that come with this\",\n        onChangeText: function onChangeText(val) {\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              description: val\n            });\n          });\n        },\n        style: {\n          marginBottom: 25\n        },\n        value: newProduct.description\n      }), _jsx(TextInput, {\n        placeholder: \"Enter Product Price\",\n        onChangeText: function onChangeText(val) {\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              price: val\n            });\n          });\n        },\n        style: {\n          marginBottom: 25\n        },\n        value: newProduct.price\n      }), _jsx(DropDown, {\n        label: \"Choose catagory\",\n        options: catalog.categories,\n        setValue: function setValue(val) {\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              catagory: val\n            });\n          });\n        },\n        value: newProduct.catagory,\n        style: {\n          marginBottom: 25\n        }\n      }), _jsx(OptionsAddingSection, {}), _jsx(Button, {\n        title: \"Add/Save Product\",\n        onPress: function onPress() {\n          handleDataUpdate();\n        },\n        style: {\n          marginBottom: 25,\n          marginTop: 25,\n          backgroundColor: \"lightgreen\"\n        }\n      })]\n    })\n  });\n};\nexport default AddProduct;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","Button","TextInput","DropDown","userStoreState","updateData","OptionView","MyListItem","item","index","setnewProduct","newProduct","newProductOptions","indexOn","setindexOn","setcurrentY","memoizedItem","padding","margin","backgroundColor","flexDirection","justifyContent","height","label","current","push","prevState","options","length","marginBottom","fontWeight","color","splice","optionLblsValues","setoptionLblsValues","e","sete","ifStatementList","setifStatementList","optionLbls","map","el","selectedCaseKey","local","filter","localE","optionLblsValuesLocal","optionsList","val","optionType","console","log","numOfSelectable","eInnerListStart","indexInnerList","eInnerList","seteInnerList","alignItems","priceIncrease","marginLeft","marginRight","window","pageYOffset","ifStatement","selectedCaseValue","prev","AddProduct","route","navigation","params","existingProduct","existingProductIndex","catalog","use","name","price","catagory","description","handleDataUpdate","copyProductData","categories","products","goBack","copy","structuredClone","newProductUseRef","OptionsAddingSection","data","offset","id","toString","Math","random","substr","width","flex","alignSelf","marginTop","styles","StyleSheet","create"],"sources":["/Users/peterputros/Desktop/PosMate-1/components/TestAdd.tsx"],"sourcesContent":["import {\n  FlatList,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Button, TextInput } from \"@react-native-material/core\";\nimport DropDown from \"./DropDown\";\nimport { userStoreState } from \"state/state\";\nimport { updateData } from \"state/firebaseFunctions\";\nimport OptionView from \"./OptionView\";\n\nconst MyListItem = ({\n  item,\n  index,\n  setnewProduct,\n  newProduct,\n  newProductOptions,\n  indexOn,\n  setindexOn,\n  setcurrentY,\n}) => {\n  const memoizedItem = useMemo(() => item, [item]);\n\n  if (indexOn !== index) {\n    return (\n      <TouchableOpacity\n        onPress={() => setindexOn(index)}\n        style={{\n          padding: 25,\n          margin: 15,\n          backgroundColor: \"lightgrey\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          height: 100,\n        }}\n      >\n        <Text>{memoizedItem.label}</Text>\n        <TouchableOpacity\n          onPress={() => {\n            newProductOptions.current.push({\n              ...memoizedItem,\n              label: memoizedItem.label + \" Copy\",\n            });\n            setnewProduct((prevState) => ({\n              ...prevState,\n              options: newProductOptions.current,\n            }));\n            setindexOn(newProductOptions.current.length - 1);\n          }}\n        >\n          <Text\n            style={{\n              marginBottom: 25,\n              fontWeight: \"700\",\n              color: \"red\",\n            }}\n          >\n            Copy\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => {\n            newProductOptions.current.splice(index, 1);\n\n            setnewProduct((prevState) => ({\n              ...prevState,\n              options: newProductOptions.current,\n            }));\n            setindexOn(indexOn - 1);\n          }}\n        >\n          <Text\n            style={{\n              marginBottom: 25,\n              fontWeight: \"700\",\n              color: \"red\",\n            }}\n          >\n            X\n          </Text>\n        </TouchableOpacity>\n      </TouchableOpacity>\n    );\n  } else {\n    const [optionLblsValues, setoptionLblsValues] = useState([]);\n    const [e, sete] = useState(memoizedItem);\n    const [ifStatementList, setifStatementList] = useState([]);\n    var optionLbls = newProduct.options.map(function (el) {\n      if (el.label !== e.label && el.label !== null) {\n        return el.label;\n      }\n    });\n\n    useEffect(() => {\n      if (e.selectedCaseKey !== null) {\n        const local = newProduct.options.filter(\n          (localE) => localE.label == e.selectedCaseKey\n        );\n        const optionLblsValuesLocal =\n          local.length > 0 &&\n          local[0].optionsList.map(function (el) {\n            return el.label;\n          });\n        setoptionLblsValues(optionLblsValuesLocal);\n      }\n    }, [e]);\n\n    return (\n      <View>\n        <View\n          style={{\n            padding: 25,\n            margin: 15,\n            backgroundColor: \"lightgrey\",\n          }}\n        >\n          <TouchableOpacity\n            onPress={() => {\n              newProductOptions.current.push({\n                ...e,\n                label: e.label + \" Copy\",\n              });\n              setnewProduct((prevState) => ({\n                ...prevState,\n                options: newProductOptions.current,\n              }));\n              setindexOn(newProductOptions.current.length - 1);\n            }}\n          >\n            <Text\n              style={{\n                marginBottom: 25,\n                fontWeight: \"700\",\n                color: \"red\",\n              }}\n            >\n              Copy\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            onPress={() => {\n              newProductOptions.current.splice(index, 1);\n\n              setnewProduct((prevState) => ({\n                ...prevState,\n                options: newProductOptions.current,\n              }));\n              setindexOn(null);\n            }}\n          >\n            <Text\n              style={{\n                marginBottom: 25,\n                fontWeight: \"700\",\n                color: \"red\",\n              }}\n            >\n              X\n            </Text>\n          </TouchableOpacity>\n          <TextInput\n            placeholder=\"Enter Select List Label\"\n            onChangeText={(val) => {\n              sete((prevState) => ({ ...prevState, label: val }));\n              newProductOptions.current[index].label = val;\n            }}\n            value={e.label}\n            style={{ marginBottom: 25 }}\n          />\n          {/* optionType */}\n          <DropDown\n            label=\"Option Type\"\n            options={[\"Standard\", \"Dropdown\"]}\n            setValue={(val) => {\n              // sete((prevState) => ({\n              //   ...prevState,\n              //   optionType: val,\n              // }));\n              if (e.optionType) {\n                newProductOptions.current[index].optionType = val;\n              } else {\n                newProductOptions.current[index] = { ...e, optionType: val };\n                console.log(newProductOptions.current[index].optionType);\n              }\n              setnewProduct((prevState) => ({\n                ...prevState,\n                options: newProductOptions.current,\n              }));\n            }}\n            value={e.optionType}\n            style={{ marginBottom: 25 }}\n          />\n          <TextInput\n            placeholder=\"Enter Number Of Selectable; If There Is\"\n            onChangeText={(val) => {\n              sete((prevState) => ({ ...prevState, numOfSelectable: val }));\n              newProductOptions.current[index].numOfSelectable = val;\n            }}\n            value={e.numOfSelectable}\n            style={{ marginBottom: 25 }}\n          />\n          {e.optionsList.map((eInnerListStart, indexInnerList) => {\n            const [eInnerList, seteInnerList] = useState(eInnerListStart);\n\n            return (\n              <View\n                style={{\n                  flexDirection: \"row\",\n                  marginBottom: 25,\n                  alignItems: \"center\",\n                }}\n              >\n                <TextInput\n                  placeholder=\"Enter Option Label\"\n                  onChangeText={(val) => {\n                    newProductOptions.current[index].optionsList[\n                      indexInnerList\n                    ].label = val;\n                    seteInnerList((prevState) => ({\n                      ...prevState,\n                      label: val,\n                    }));\n                  }}\n                  value={eInnerList.label}\n                />\n                <TextInput\n                  placeholder=\"Enter price increase\"\n                  onChangeText={(val) => {\n                    newProductOptions.current[index].optionsList[\n                      indexInnerList\n                    ].priceIncrease = val;\n                    seteInnerList((prevState) => ({\n                      ...prevState,\n                      priceIncrease: val,\n                    }));\n                  }}\n                  value={eInnerList.priceIncrease}\n                  style={{ marginLeft: 20, marginRight: 20 }}\n                />\n                <TouchableOpacity\n                  onPress={() => {\n                    newProductOptions.current[index].optionsList.splice(\n                      indexInnerList,\n                      1\n                    );\n                    setnewProduct((prevState) => ({\n                      ...prevState,\n                      options: newProductOptions.current,\n                    }));\n                  }}\n                >\n                  <Text\n                    style={{\n                      fontWeight: \"700\",\n                      color: \"red\",\n                    }}\n                  >\n                    X\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            );\n          })}\n          <Button\n            title=\"Add Option Choice\"\n            onPress={() => {\n              newProductOptions.current[index].optionsList.push({\n                label: null,\n                priceIncrease: null,\n              });\n              setcurrentY(window.pageYOffset);\n              setnewProduct((prevState) => ({\n                ...prevState,\n                options: newProductOptions.current,\n              }));\n            }}\n            style={{ marginBottom: 25 }}\n          />\n          {ifStatementList.map((ifStatement) => {\n            return (\n              <View\n                style={{\n                  flexDirection: \"row\",\n                  justifyContent: \"space-between\",\n                  marginBottom: 25,\n                }}\n              >\n                <DropDown\n                  label=\"Show if...\"\n                  options={optionLbls}\n                  setValue={(val) => {\n                    sete((prevState) => ({\n                      ...prevState,\n                      selectedCaseKey: val,\n                    }));\n                    newProductOptions.current[index].selectedCaseKey = val;\n                  }}\n                  value={ifStatement.selectedCaseKey}\n                  style={{ marginBottom: 25 }}\n                />\n                <Text>\"=\"</Text>\n                <DropDown\n                  label=\"Show if...\"\n                  options={optionLblsValues}\n                  setValue={(val) => {\n                    sete((prevState) => ({\n                      ...prevState,\n                      selectedCaseValue: val,\n                    }));\n                    newProductOptions.current[index].selectedCaseValue = val;\n                  }}\n                  value={ifStatement.selectedCaseValue}\n                  style={{ marginBottom: 25 }}\n                />\n              </View>\n            );\n          })}\n          {optionLbls.length > 1 && (\n            <Button\n              title=\"Add If Statement\"\n              onPress={() =>\n                setifStatementList((prev) => [\n                  ...prev,\n                  { selectedCaseKey: null, selectedCaseValue: null },\n                ])\n              }\n            />\n          )}\n        </View>\n      </View>\n    );\n  }\n};\n\nconst AddProduct = ({ route, navigation }) => {\n  const { existingProduct, existingProductIndex } = route.params\n    ? route.params\n    : { existingProduct: null, existingProductIndex: null };\n\n  const catalog = userStoreState.use();\n  const [newProduct, setnewProduct] = useState(\n    existingProduct\n      ? existingProduct\n      : {\n          name: null,\n          price: null,\n          catagory: null,\n          options: [],\n          description: null,\n        }\n  );\n  const newProductOptions = useRef(\n    existingProduct ? existingProduct.options : []\n  );\n  const [indexOn, setindexOn] = useState(0);\n\n  // useEffect(() => {\n  //   //setTimeout(() => {\n  //   window.scrollTo({\n  //     top: currentY,\n  //     behavior: \"instant\",\n  //   });\n  //   //}, 500);\n  // }, [currentY]);\n\n  function handleDataUpdate(copyProductData) {\n    if (copyProductData) {\n      updateData(\n        [...catalog.categories],\n        [...catalog.products, copyProductData]\n      );\n      navigation.goBack();\n    } else if (existingProduct) {\n      let copy = structuredClone(catalog.products);\n      const newProductUseRef = {\n        ...newProduct,\n        options: newProductOptions.current,\n      };\n      copy[existingProductIndex] = newProductUseRef;\n      updateData([...catalog.categories], copy);\n      navigation.goBack();\n    } else {\n      updateData([...catalog.categories], [...catalog.products, newProduct]);\n      navigation.goBack();\n    }\n  }\n\n  const OptionsAddingSection = () => {\n    return (\n      <View>\n        <FlatList\n          // onLayout={() =>\n          //   window.scrollTo({\n          //     top: currentY,\n          //     behavior: \"instant\",\n          //   })\n          // }\n          getItemLayout={(data, index) => ({\n            length: index === indexOn ? 400 * data.optionsList?.length : 100,\n            offset: 400 * index,\n            index,\n          })}\n          data={newProduct.options}\n          keyExtractor={(item) => item.id?.toString()}\n          renderItem={({ item, index }) => (\n            <OptionView\n              item={item}\n              index={index}\n              newProduct={newProduct}\n              setnewProduct={setnewProduct}\n              newProductOptions={newProductOptions}\n              indexOn={indexOn}\n              setindexOn={setindexOn}\n            />\n          )}\n        />\n        <Button\n          title=\"Add Product Option\"\n          onPress={() => {\n            newProductOptions.current.push({\n              label: null,\n              optionsList: [],\n              selectedCaseKey: null,\n              selectedCaseValue: null,\n              numOfSelectable: null,\n              id: Math.random().toString(36).substr(2, 9),\n              optionType: null,\n            });\n            setnewProduct((prevState) => ({\n              ...prevState,\n              options: newProductOptions.current,\n            }));\n            setindexOn(newProductOptions.current.length - 1);\n          }}\n          style={{ marginBottom: 25 }}\n        />\n      </View>\n    );\n  };\n\n  return (\n    <ScrollView\n      style={{ width: \"100%\", height: \"100%\", flex: 1 }}\n      contentContainerStyle={{\n        width: \"93%\",\n        alignSelf: \"center\",\n        marginTop: 25,\n      }}\n    >\n      <>\n        <View\n          style={{\n            flexDirection: \"row\",\n            padding: 20,\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n          }}\n        >\n          <TouchableOpacity onPress={() => navigation.goBack()}>\n            <Text style={{ marginBottom: 25, fontWeight: \"700\", color: \"red\" }}>\n              X\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            onPress={() => {\n              let copy = structuredClone(newProduct);\n              copy.name = copy.name + \" Copy\";\n              handleDataUpdate(copy);\n            }}\n          >\n            <Text style={{ marginBottom: 25, fontWeight: \"700\", color: \"red\" }}>\n              Copy\n            </Text>\n          </TouchableOpacity>\n          <Text style={{ marginBottom: 25 }}>AddProduct</Text>\n        </View>\n        <TextInput\n          placeholder=\"Enter Product Name\"\n          onChangeText={(val) => {\n            setnewProduct((prevState) => ({ ...prevState, name: val }));\n          }}\n          value={newProduct.name}\n          style={{ marginBottom: 25 }}\n        />\n        <TextInput\n          placeholder=\"Enter any other items that come with this\"\n          onChangeText={(val) => {\n            setnewProduct((prevState) => ({ ...prevState, description: val }));\n          }}\n          style={{ marginBottom: 25 }}\n          value={newProduct.description}\n        />\n        <TextInput\n          placeholder=\"Enter Product Price\"\n          onChangeText={(val) => {\n            setnewProduct((prevState) => ({ ...prevState, price: val }));\n          }}\n          style={{ marginBottom: 25 }}\n          value={newProduct.price}\n        />\n        <DropDown\n          label=\"Choose catagory\"\n          options={catalog.categories}\n          setValue={(val) => {\n            setnewProduct((prevState) => ({ ...prevState, catagory: val }));\n          }}\n          value={newProduct.catagory}\n          style={{ marginBottom: 25 }}\n        />\n        <OptionsAddingSection />\n        <Button\n          title=\"Add/Save Product\"\n          onPress={() => {\n            handleDataUpdate();\n          }}\n          style={{\n            marginBottom: 25,\n            marginTop: 25,\n            backgroundColor: \"lightgreen\",\n          }}\n        />\n      </>\n    </ScrollView>\n  );\n};\n\nexport default AddProduct;\n\nconst styles = StyleSheet.create({});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}