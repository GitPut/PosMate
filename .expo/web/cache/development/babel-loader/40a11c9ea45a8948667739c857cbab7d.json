{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"react-select2-wrapper/css/select2.css\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Button, Switch, TextInput } from \"@react-native-material/core\";\nimport { deviceIdState, deviceTreeState, setDeviceTreeState, setMyDeviceDetailsState } from \"../../../../../state/state\";\nimport { auth, db } from \"../../../../../state/firebaseConfig\";\nimport ReactSelect from \"react-select\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport tw from 'twrnc';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DeviceSettings = function DeviceSettings() {\n  var deviceTree = deviceTreeState.use();\n  var myDeviceID = deviceIdState.use();\n  var fadeAnim = useRef(new Animated.Value(0)).current;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    viewVisible = _useState2[0],\n    setviewVisible = _useState2[1];\n  var fadeIn = function fadeIn() {\n    Animated.timing(fadeAnim, {\n      toValue: 1,\n      duration: 500,\n      useNativeDriver: false\n    }).start();\n  };\n  var resetLoader = function resetLoader() {\n    setviewVisible(true);\n    fadeIn();\n  };\n  var AddNewDevice = function () {\n    var _ref = _asyncToGenerator(function* () {\n      yield db.collection(\"users\").doc(auth.currentUser.uid).collection(\"checkout_sessions\").add({\n        price: 'price_1OgX1pCIw3L7DOwIIavoer1P',\n        quantity: 1,\n        success_url: window.location.href,\n        cancel_url: window.location.href\n      }).then(function (docRef) {\n        docRef.onSnapshot(function () {\n          var _ref2 = _asyncToGenerator(function* (snap) {\n            var _snap$data = snap.data(),\n              error = _snap$data.error,\n              sessionId = _snap$data.sessionId;\n            if (error) {\n              alert(\"An error occurred: \" + error.message);\n            }\n            if (sessionId) {\n              var stripe = yield loadStripe(\"pk_live_51MHqrvCIw3L7DOwI0ol9CTCSH7mQXTLKpxTWKzmwOY1MdKwaYwhdJq6WTpkWdBeql3sS44JmybynlRnaO2nSa1FK001dHiEOZO\");\n\n              console.log(\"redirecting\");\n              yield stripe.redirectToCheckout({\n                sessionId: sessionId\n              });\n            }\n          });\n          return function (_x) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      });\n    });\n    return function AddNewDevice() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return _jsx(\"div\", {\n    className: \"page-wrapper\",\n    children: _jsxs(\"div\", {\n      className: \"content\",\n      children: [_jsxs(View, {\n        style: styles.container,\n        children: [_jsx(View, {\n          style: styles.headerRowContainer,\n          children: _jsx(Text, {\n            style: styles.headerTxt,\n            children: \"Device Settings\"\n          })\n        }), _jsxs(ScrollView, {\n          style: styles.detailInputContainer,\n          children: [deviceTree.devices.map(function (device, index) {\n            var otherDeviceOptions = [];\n            deviceTree.devices.map(function (deviceSearch, index) {\n              if (deviceSearch.id !== device.id) {\n                otherDeviceOptions.push({\n                  value: deviceSearch.docID,\n                  label: deviceSearch.name\n                });\n              }\n            });\n            return _jsx(View, {\n              style: tw.style(['items-center', 'justify-center', 'flex-1', 'p-5', 'border', 'border-gray-200', 'rounded-md', 'mb-5', 'bg-white', 'shadow-md', 'w-11/12']),\n              children: _jsxs(View, {\n                style: {\n                  width: ''\n                },\n                children: [_jsxs(View, {\n                  children: [_jsx(Text, {\n                    style: tw.style(['text-sm', 'mb-2']),\n                    children: \"Device Name\"\n                  }), _jsx(TextInput, {\n                    placeholder: \"Enter device name\",\n                    value: device.name,\n                    onChangeText: function onChangeText(val) {\n                      var clone = _objectSpread({}, deviceTree);\n                      clone.devices[index].name = val;\n                      setDeviceTreeState(clone);\n                    },\n                    style: tw.style(['w-1/2', 'p-2', 'border', 'border-gray-300', 'rounded-md', 'mb-2'])\n                  })]\n                }), _jsxs(View, {\n                  style: tw.style(['flex', 'flex-row', 'items-center', 'mb-2', 'mt-2']),\n                  children: [_jsx(Text, {\n                    style: tw.style(['text-sm', 'mb-2', 'font-medium']),\n                    children: \"Device Id: \"\n                  }), _jsx(Text, {\n                    style: tw.style(['text-sm', 'mb-2']),\n                    children: device.id ? device.id.toUpperCase() : 'No Id set to this device'\n                  })]\n                }), _jsxs(View, {\n                  style: tw.style(['flex', 'flex-row', 'items-center', 'mb-2', 'mt-2']),\n                  children: [_jsx(Text, {\n                    style: tw.style(['text-sm', 'mb-2', 'font-medium']),\n                    children: \"Print Online Orders: \"\n                  }), _jsx(Switch, {\n                    value: device.printOnlineOrders,\n                    onValueChange: function onValueChange(val) {\n                      var clone = _objectSpread({}, deviceTree);\n                      clone.devices[index].printOnlineOrders = val;\n                      setDeviceTreeState(clone);\n                    }\n                  })]\n                }), _jsxs(View, {\n                  style: tw.style(['flex', 'flex-row', 'items-center', 'mb-2', 'mt-2']),\n                  children: [_jsx(Text, {\n                    style: tw.style(['text-sm', 'mb-2', 'font-medium']),\n                    children: \"Use Different Device To Print: \"\n                  }), _jsx(Switch, {\n                    value: device.useDifferentDeviceToPrint,\n                    onValueChange: function onValueChange(val) {\n                      var clone = _objectSpread({}, deviceTree);\n                      clone.devices[index].useDifferentDeviceToPrint = val;\n                      setDeviceTreeState(clone);\n                    }\n                  })]\n                }), !device.useDifferentDeviceToPrint ? _jsxs(View, {\n                  children: [_jsx(Text, {\n                    style: tw.style(['text-sm', 'mb-2']),\n                    children: \"Print To Printer\"\n                  }), _jsx(TextInput, {\n                    placeholder: \"Enter printer name\",\n                    value: device.printToPrinter,\n                    onChangeText: function onChangeText(val) {\n                      var clone = _objectSpread({}, deviceTree);\n                      clone.devices[index].printToPrinter = val;\n                      setDeviceTreeState(clone);\n                    },\n                    style: tw.style(['w-1/2', 'p-2', 'border', 'border-gray-300', 'rounded-md', 'mb-2'])\n                  })]\n                }) : _jsxs(View, {\n                  children: [_jsx(Text, {\n                    style: tw.style(['text-sm', 'mb-2']),\n                    children: \"Choose Device To Send Print To\"\n                  }), _jsx(\"select\", {\n                    style: tw.style(['w-1/2', 'p-2', 'border', 'border-gray-300', 'rounded-md', 'mb-2']),\n                    value: device.sendPrintToUserID,\n                    onChange: function onChange(e) {\n                      var clone = _objectSpread({}, deviceTree);\n                      clone.devices[index].sendPrintToUserID = e.target.value;\n                      setDeviceTreeState(clone);\n                    },\n                    children: otherDeviceOptions.map(function (device, index) {\n                      return _jsx(\"option\", {\n                        value: device.value,\n                        children: device.label\n                      }, index);\n                    })\n                  })]\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).update(device);\n                    var clone = _objectSpread({}, deviceTree);\n                    clone.devices[index] = device;\n                    setDeviceTreeState(clone);\n                    console.log('Updated Device');\n                    setMyDeviceDetailsState(device);\n                  },\n                  style: tw.style(['bg-blue-500', 'rounded-md', 'p-3', 'w-1/2', 'mt-2', 'mb-2']),\n                  children: _jsx(Text, {\n                    style: tw.style(['text-white', 'text-center', 'text-base']),\n                    children: \"Update Device\"\n                  })\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    if (deviceTree.devices.filter(function (deviceSearch) {\n                      return deviceSearch.id === myDeviceID;\n                    }).length > 0) {\n                      db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(deviceTree.devices.filter(function (deviceSearch) {\n                        return deviceSearch.id === myDeviceID;\n                      })[0].docID).update({\n                        id: null\n                      });\n                      var _clone = _objectSpread({}, deviceTree);\n                      _clone.devices.filter(function (deviceSearch) {\n                        return deviceSearch.id === myDeviceID;\n                      })[0].id = null;\n                      setDeviceTreeState(_clone);\n                    }\n                    db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).update({\n                      id: myDeviceID\n                    });\n                    var clone = _objectSpread({}, deviceTree);\n                    clone.devices[index].id = myDeviceID;\n                    setDeviceTreeState(clone);\n                    setMyDeviceDetailsState(device);\n                  },\n                  style: tw.style(['bg-blue-500', 'rounded-md', 'p-3', 'w-1/2', 'mt-2', 'mb-2']),\n                  children: _jsx(Text, {\n                    style: tw.style(['text-white', 'text-center', 'text-base']),\n                    children: \"Set To My ID\"\n                  })\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).delete();\n                    var clone = _objectSpread({}, deviceTree);\n                    clone = _objectSpread(_objectSpread({}, clone), {}, {\n                      devices: clone.devices.filter(function (deviceSearch) {\n                        return deviceSearch.docID !== device.docID;\n                      })\n                    });\n                    setDeviceTreeState(clone);\n                  },\n                  style: tw.style(['bg-red-500', 'rounded-md', 'p-3', 'w-1/2', 'mt-2', 'mb-2']),\n                  children: _jsx(Text, {\n                    style: tw.style(['text-white', 'text-center', 'text-base']),\n                    children: \"Delete Device\"\n                  })\n                })]\n              })\n            }, index);\n          }), deviceTree.devices.length < 2 + deviceTree.extraDevicesPayingFor ? _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              db.collection('users').doc(auth.currentUser.uid).collection('devices').add({\n                name: \"Device\" + deviceTree.devices.length,\n                id: null,\n                printToPrinter: null\n              }).then(function (docRef) {\n                var clone = _objectSpread({}, deviceTree);\n                clone.devices.push({\n                  name: \"Device\",\n                  id: null,\n                  printToPrinter: null,\n                  sendPrintToUserID: null,\n                  docID: docRef.id\n                });\n                setDeviceTreeState(clone);\n              });\n            },\n            style: tw.style(['bg-green-500', 'rounded-md', 'p-2', 'mt-2', 'mb-2']),\n            children: _jsx(Text, {\n              style: tw.style(['text-white', 'text-center']),\n              children: \"Add Device\"\n            })\n          }) : _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              resetLoader();\n              AddNewDevice();\n            },\n            style: tw.style(['bg-green-500', 'rounded-md', 'p-2', 'mt-2', 'mb-2']),\n            children: _jsx(Text, {\n              style: tw.style(['text-white', 'text-center']),\n              children: \"Pay For Another Device\"\n            })\n          })]\n        })]\n      }), viewVisible && _jsx(Modal, {\n        visible: true,\n        children: _jsx(Animated.View, {\n          style: {\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            backgroundColor: \"white\",\n            position: \"absolute\",\n            opacity: fadeAnim,\n            height: \"100%\",\n            width: \"100%\"\n          },\n          children: _jsx(Image, {\n            source: require(\"../../../../../assets/loading.gif\"),\n            style: {\n              width: 450,\n              height: 450,\n              resizeMode: \"contain\"\n            }\n          })\n        })\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"rgba(255,255,255,1)\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  headerRowContainer: {\n    width: \"90%\",\n    height: 60,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginBottom: 20\n  },\n  headerTxt: {\n    fontFamily: \"archivo-600\",\n    color: \"rgba(98,96,96,1)\",\n    fontSize: 20\n  },\n  billingBtn: {\n    width: 60,\n    height: 60,\n    backgroundColor: \"#E6E6E6\",\n    borderRadius: 30,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  billingIcon: {\n    color: \"rgba(128,128,128,1)\",\n    fontSize: 30\n  },\n  detailInputContainer: {\n    width: \"90%\",\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"rgba(155,152,152,1)\",\n    shadowColor: \"rgba(0,0,0,1)\",\n    shadowOffset: {\n      width: 3,\n      height: 3\n    },\n    elevation: 45,\n    shadowOpacity: 0.2,\n    shadowRadius: 15,\n    padding: 30,\n    minHeight: \"75%\",\n    marginTop: 15\n  },\n  materialStackedLabelTextbox1: {\n    height: 60,\n    width: 483\n  },\n  materialStackedLabelTextbox2: {\n    height: 60,\n    width: 483,\n    marginLeft: 43\n  },\n  materialStackedLabelTextbox1Row: {\n    height: 60,\n    flexDirection: \"row\",\n    marginTop: 23,\n    marginLeft: 36,\n    marginRight: 32\n  },\n  materialStackedLabelTextbox3: {\n    height: 60,\n    width: 483\n  },\n  materialStackedLabelTextbox5: {\n    height: 60,\n    width: 483,\n    marginLeft: 43\n  },\n  materialStackedLabelTextbox3Row: {\n    height: 60,\n    flexDirection: \"row\",\n    marginTop: 30,\n    marginLeft: 36,\n    marginRight: 32\n  },\n  materialStackedLabelTextbox4: {\n    height: 60,\n    width: 483\n  },\n  materialStackedLabelTextbox6: {\n    height: 60,\n    width: 483,\n    marginLeft: 43\n  },\n  materialStackedLabelTextbox4Row: {\n    height: 60,\n    flexDirection: \"row\",\n    marginTop: 29,\n    marginLeft: 36,\n    marginRight: 32\n  },\n  materialStackedLabelTextbox7: {\n    height: 60,\n    width: 483\n  },\n  materialButtonViolet2: {\n    height: 48,\n    width: 483,\n    marginLeft: 43,\n    marginTop: 12\n  },\n  materialStackedLabelTextbox7Row: {\n    height: 60,\n    flexDirection: \"row\",\n    marginTop: 14,\n    marginLeft: 36,\n    marginRight: 32\n  },\n  helperDownloadContainer: {\n    width: \"100%\",\n    height: 79,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    padding: 10\n  },\n  helperTxt: {\n    fontFamily: \"archivo-500\",\n    color: \"#121212\",\n    fontSize: 19,\n    width: 483,\n    height: 52\n  },\n  badgeWindows: {\n    width: 200,\n    height: 79\n  },\n  badgeMac: {\n    width: 200,\n    height: 79\n  }\n});\nexport default DeviceSettings;","map":{"version":3,"names":["React","useEffect","useRef","useState","Button","Switch","TextInput","deviceIdState","deviceTreeState","setDeviceTreeState","setMyDeviceDetailsState","auth","db","ReactSelect","loadStripe","tw","DeviceSettings","deviceTree","use","myDeviceID","fadeAnim","Animated","Value","current","viewVisible","setviewVisible","fadeIn","timing","toValue","duration","useNativeDriver","start","resetLoader","AddNewDevice","collection","doc","currentUser","uid","add","price","quantity","success_url","window","location","href","cancel_url","then","docRef","onSnapshot","snap","data","error","sessionId","alert","message","stripe","console","log","redirectToCheckout","styles","container","headerRowContainer","headerTxt","detailInputContainer","devices","map","device","index","otherDeviceOptions","deviceSearch","id","push","value","docID","label","name","style","width","val","clone","toUpperCase","printOnlineOrders","useDifferentDeviceToPrint","printToPrinter","sendPrintToUserID","e","target","update","filter","length","delete","extraDevicesPayingFor","alignItems","justifyContent","backgroundColor","position","opacity","height","require","resizeMode","StyleSheet","create","flexDirection","marginBottom","fontFamily","color","fontSize","billingBtn","borderRadius","billingIcon","borderWidth","borderColor","shadowColor","shadowOffset","elevation","shadowOpacity","shadowRadius","padding","minHeight","marginTop","materialStackedLabelTextbox1","materialStackedLabelTextbox2","marginLeft","materialStackedLabelTextbox1Row","marginRight","materialStackedLabelTextbox3","materialStackedLabelTextbox5","materialStackedLabelTextbox3Row","materialStackedLabelTextbox4","materialStackedLabelTextbox6","materialStackedLabelTextbox4Row","materialStackedLabelTextbox7","materialButtonViolet2","materialStackedLabelTextbox7Row","helperDownloadContainer","helperTxt","badgeWindows","badgeMac"],"sources":["/Users/peterputros/Desktop/PosMate/pages/authed/main/MainPage/settings/DeviceSettings.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"react-select2-wrapper/css/select2.css\";\nimport {\n    View,\n    Text,\n    ScrollView,\n    StyleSheet,\n    Animated,\n    Modal,\n    TouchableOpacity,\n} from \"react-native\";\nimport { Button, Switch, TextInput } from \"@react-native-material/core\";\nimport {\n    deviceIdState,\n    deviceTreeState,\n    setDeviceTreeState,\n    setMyDeviceDetailsState,\n} from \"state/state\";\nimport { auth, db } from \"state/firebaseConfig\";\nimport ReactSelect from \"react-select\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Image } from \"react-native\";\nimport tw from 'twrnc';\n\nconst DeviceSettings = () => {\n    const deviceTree = deviceTreeState.use()\n    const myDeviceID = deviceIdState.use()\n    const fadeAnim = useRef(new Animated.Value(0)).current;\n    const [viewVisible, setviewVisible] = useState(false);\n\n    const fadeIn = () => {\n        // Will change fadeAnim value to 0 in 3 seconds\n        Animated.timing(fadeAnim, {\n            toValue: 1,\n            duration: 500,\n            useNativeDriver: false,\n        }).start();\n    };\n\n    const resetLoader = () => {\n        setviewVisible(true);\n        fadeIn();\n    };\n\n    const AddNewDevice = async () => {\n        await db\n            .collection(\"users\")\n            .doc(auth.currentUser.uid)\n            .collection(\"checkout_sessions\")\n            .add({\n                price: 'price_1OgX1pCIw3L7DOwIIavoer1P', // todo price Id from your products price in the Stripe Dashboard\n                quantity: 1,\n                success_url: window.location.href, // return user to this screen on successful purchase\n                cancel_url: window.location.href, // return user to this screen on failed purchase\n            })\n            .then((docRef) => {\n                // Wait for the checkoutSession to get attached by the extension\n                docRef.onSnapshot(async (snap) => {\n                    const { error, sessionId } = snap.data();\n                    if (error) {\n                        // Show an error to your customer and inspect\n                        // your Cloud Function logs in the Firebase console.\n                        alert(`An error occurred: ${error.message}`);\n                    }\n\n                    if (sessionId) {\n                        // We have a session, let's redirect to Checkout\n                        // Init Stripe\n                        const stripe = await loadStripe(\n                            \"pk_live_51MHqrvCIw3L7DOwI0ol9CTCSH7mQXTLKpxTWKzmwOY1MdKwaYwhdJq6WTpkWdBeql3sS44JmybynlRnaO2nSa1FK001dHiEOZO\" // todo enter your public stripe key here\n                        );\n                        console.log(`redirecting`);\n                        await stripe.redirectToCheckout({ sessionId });\n                    }\n                });\n            });\n    }\n\n    //Make style better\n\n    return (\n        <div className=\"page-wrapper\">\n            <div className=\"content\">\n                <View style={styles.container}>\n                    <View style={styles.headerRowContainer}>\n                        <Text style={styles.headerTxt}>Device Settings</Text>\n                    </View>\n                    <ScrollView style={styles.detailInputContainer}>\n                        {deviceTree.devices.map((device, index) => {\n\n                            const otherDeviceOptions = []\n                            deviceTree.devices.map((deviceSearch, index) => {\n                                if (deviceSearch.id !== device.id) {\n                                    otherDeviceOptions.push({ value: deviceSearch.docID, label: deviceSearch.name })\n                                }\n                            })\n\n                            return (\n                                <View key={index} style={tw.style([\n                                    'items-center',\n                                    'justify-center',\n                                    'flex-1',\n                                    'p-5',\n                                    'border',\n                                    'border-gray-200',\n                                    'rounded-md',\n                                    'mb-5',\n                                    'bg-white',\n                                    'shadow-md',\n                                    'w-11/12',\n                                ])}\n                                >\n                                    <View style={{width: ''}}>\n                                        {/* <TextInput placeholder={`Name: ${device.name}`} value={device.name} onChangeText={val => {\n                                    const clone = { ...deviceTree }\n                                    clone.devices[index].name = val\n\n                                    setDeviceTreeState(clone)\n\n                                }}\n                                    style={{ marginBottom: 10 }}\n                                /> */}\n                                        <View>\n                                            <Text style={tw.style([\n                                                'text-sm',\n                                                'mb-2',\n\n                                            ])} >Device Name</Text>\n                                            <TextInput placeholder='Enter device name' value={device.name} onChangeText={val => {\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index].name = val\n                                                setDeviceTreeState(clone)\n                                            }}\n                                                style={tw.style(['w-1/2', 'p-2', 'border', 'border-gray-300', 'rounded-md', 'mb-2'])}\n                                            />\n                                        </View>\n                                        <View\n                                            style={tw.style([\n                                                'flex',\n                                                'flex-row',\n                                                'items-center',\n                                                'mb-2',\n                                                'mt-2'\n                                            ])}\n                                        >\n                                            <Text style={tw.style([\n                                                'text-sm',\n                                                'mb-2',\n                                                'font-medium'\n                                            ])} >Device Id: </Text>\n                                            <Text style={tw.style([\n                                                'text-sm',\n                                                'mb-2',\n                                            ])} >{device.id ? device.id.toUpperCase() : 'No Id set to this device'}</Text>\n                                        </View>\n                                        {/* <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}>\n                                    <Text style={{ marginRight: 10 }}>Use Different Device To Print: </Text>\n                                    <Switch value={device.useDifferentDeviceToPrint} onValueChange={val => {\n                                        const clone = { ...deviceTree }\n                                        clone.devices[index].useDifferentDeviceToPrint = val\n                                        setDeviceTreeState(clone)\n                                    }} />\n                                </View> */}\n                                        <View style={tw.style([\n                                            'flex',\n                                            'flex-row',\n                                            'items-center',\n                                            'mb-2',\n                                            'mt-2'\n                                        ])}>\n                                            <Text style={tw.style([\n                                                'text-sm',\n                                                'mb-2',\n                                                'font-medium'\n                                            ])} >Print Online Orders: </Text>\n                                            <Switch value={device.printOnlineOrders} onValueChange={val => {\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index].printOnlineOrders = val\n                                                setDeviceTreeState(clone)\n                                            }} />\n                                        </View>\n                                        <View style={tw.style([\n                                            'flex',\n                                            'flex-row',\n                                            'items-center',\n                                            'mb-2',\n                                            'mt-2'\n                                        ])}>\n                                            <Text style={tw.style([\n                                                'text-sm',\n                                                'mb-2',\n                                                'font-medium'\n                                            ])} >Use Different Device To Print: </Text>\n                                            <Switch value={device.useDifferentDeviceToPrint} onValueChange={val => {\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index].useDifferentDeviceToPrint = val\n                                                setDeviceTreeState(clone)\n                                            }} />\n                                        </View>\n                                        {/* {!device.useDifferentDeviceToPrint ? <TextInput placeholder={`Print To Printer: ${device.printToPrinter}`} value={device.printToPrinter} onChangeText={val => {\n                                    const clone = { ...deviceTree }\n                                    clone.devices[index].printToPrinter = val\n                                    setDeviceTreeState(clone)\n                                }}\n                                /> :\n                                    <ReactSelect\n                                        options={otherDeviceOptions}\n                                        value={\n                                            device.sendPrintToUserID\n                                        }\n                                        onChange={(val) => {\n                                            const clone = { ...deviceTree }\n                                            clone.devices[index].sendPrintToUserID = val\n                                            setDeviceTreeState(clone)\n                                        }}\n                                        placeholder={\"Choose Device To Send Print To\"}\n                                        menuPortalTarget={document.body}\n                                        styles={{\n                                            menuPortal: (base) => ({ ...base, zIndex: 9999 }),\n                                            control: (provided, state) => ({\n                                                ...provided,\n                                                background: \"#fff\",\n                                                borderColor: \"#9e9e9e\",\n                                                minHeight: \"52px\",\n                                                height: \"52px\",\n                                                boxShadow: state.isFocused ? null : null,\n                                            }),\n\n                                            valueContainer: (provided, state) => ({\n                                                ...provided,\n                                                height: \"52px\",\n                                                padding: \"0 6px\",\n                                            }),\n\n                                            input: (provided, state) => ({\n                                                ...provided,\n                                                margin: \"0px\",\n                                            }),\n                                            indicatorSeparator: (state) => ({\n                                                display: \"none\",\n                                            }),\n                                            indicatorsContainer: (provided, state) => ({\n                                                ...provided,\n                                                height: \"52px\",\n                                            }),\n                                        }}\n                                        menuPlacement=\"auto\"\n                                        menuPosition=\"fixed\"\n                                    />\n                                } */}\n                                        {!device.useDifferentDeviceToPrint ? <View>\n                                            <Text style={tw.style([\n                                                'text-sm',\n                                                'mb-2',\n                                            ])} >Print To Printer</Text>\n                                            <TextInput placeholder='Enter printer name' value={device.printToPrinter} onChangeText={val => {\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index].printToPrinter = val\n                                                setDeviceTreeState(clone)\n                                            }}\n                                                style={tw.style(['w-1/2', 'p-2', 'border', 'border-gray-300', 'rounded-md', 'mb-2'])}\n                                            />\n                                        </View> :\n                                            <View>\n                                                <Text style={tw.style([\n                                                    'text-sm',\n                                                    'mb-2',\n                                                ])} >Choose Device To Send Print To</Text>\n                                                {/* <ReactSelect\n                                            options={otherDeviceOptions}\n                                            value={\n                                                device.sendPrintToUserID\n                                            }\n                                            onChange={(val) => {\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index].sendPrintToUserID = val\n                                                setDeviceTreeState(clone)\n                                            }}\n                                            placeholder={\"Choose Device To Send Print To\"}\n                                            menuPortalTarget={document.body}\n                                            styles={{\n                                                menuPortal: (base) => ({ ...base, zIndex: 9999 }),\n                                                control: (provided, state) => ({\n                                                    ...provided,\n                                                    background: \"#fff\",\n                                                    borderColor: \"#9e9e9e\",\n                                                    minHeight: \"52px\",\n                                                    height: \"52px\",\n                                                    boxShadow: state.isFocused ? null : null,\n                                                }),\n\n                                                valueContainer: (provided, state) => ({\n                                                    ...provided,\n                                                    height: \"52px\",\n                                                    padding: \"0 6px\",\n                                                }),\n\n                                                input: (provided, state) => ({\n                                                    ...provided,\n                                                    margin: \"0px\",\n                                                }),\n                                                indicatorSeparator: (state) => ({\n                                                    display: \"none\",\n                                                }),\n                                                indicatorsContainer: (provided, state) => ({\n                                                    ...provided,\n                                                    height: \"52px\",\n                                                }),\n                                            }}\n                                            menuPlacement=\"auto\"\n                                            menuPosition=\"fixed\"\n                                        /> */}\n                                                <select\n                                                    style={tw.style([\n                                                        'w-1/2',\n                                                        'p-2',\n                                                        'border',\n                                                        'border-gray-300',\n                                                        'rounded-md',\n                                                        'mb-2'\n                                                    ])}\n                                                    value={device.sendPrintToUserID}\n                                                    onChange={(e) => {\n                                                        const clone = { ...deviceTree }\n                                                        clone.devices[index].sendPrintToUserID = e.target.value\n                                                        setDeviceTreeState(clone)\n                                                    }\n                                                    }\n                                                >\n                                                    {otherDeviceOptions.map((device, index) => {\n                                                        return (\n                                                            <option key={index} value={device.value}>{device.label}</option>\n                                                        )\n                                                    })}\n                                                </select>\n                                            </View>\n                                        }\n                                        {/* <View style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10, marginTop: 10 }}>\n                                    <Text>Would you like online orders to print to this device?</Text>\n                                    <Switch value={device.printOnlineOrders} onValueChange={val => {\n                                        const clone = { ...deviceTree }\n                                        clone.devices[index].printOnlineOrders = val\n                                        setDeviceTreeState(clone)\n                                    }} />\n                                </View> */}\n                                        {/* <Button\n                                    title=\"Update Device\"\n                                    onPress={() => {\n                                        db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).update(device)\n                                        const clone = { ...deviceTree }\n                                        clone.devices[index] = device\n                                        setDeviceTreeState(clone\n                                        )\n                                        console.log('Updated Device')\n                                        setMyDeviceDetailsState(device)\n                                    }}\n                                    style={{\n                                        marginBottom: 10\n                                    }}\n                                /> */}\n                                        <TouchableOpacity\n                                            onPress={() => {\n                                                db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).update(device)\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index] = device\n                                                setDeviceTreeState(clone\n                                                )\n                                                console.log('Updated Device')\n                                                setMyDeviceDetailsState(device)\n                                            }}\n                                            style={tw.style([\n                                                'bg-blue-500',\n                                                'rounded-md',\n                                                'p-3',\n                                                'w-1/2',\n                                                'mt-2',\n                                                'mb-2'\n                                            ])}\n                                        >\n                                            <Text style={tw.style([\n                                                'text-white',\n                                                'text-center',\n                                                'text-base'\n                                            ])} >Update Device</Text>\n                                        </TouchableOpacity>\n                                        {/* <Button\n                                    title=\"Set To My ID\"\n                                    onPress={() => {\n                                        if (deviceTree.devices.filter(deviceSearch => deviceSearch.id === myDeviceID).length > 0) {\n                                            db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(deviceTree.devices.filter(deviceSearch => deviceSearch.id === myDeviceID)[0].docID).update({ id: null })\n                                            const clone = { ...deviceTree }\n                                            clone.devices.filter(deviceSearch => deviceSearch.id === myDeviceID)[0].id = null\n                                            setDeviceTreeState(clone)\n                                        }\n                                        db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).update({ id: myDeviceID })\n                                        const clone = { ...deviceTree }\n                                        clone.devices[index].id = myDeviceID\n                                        setDeviceTreeState(clone)\n                                        setMyDeviceDetailsState(device)\n                                    }}\n                                    style={{\n                                        marginBottom: 10\n                                    }}\n                                /> */}\n                                        <TouchableOpacity\n                                            onPress={() => {\n                                                if (deviceTree.devices.filter(deviceSearch => deviceSearch.id === myDeviceID).length > 0) {\n                                                    db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(deviceTree.devices.filter(deviceSearch => deviceSearch.id === myDeviceID)[0].docID).update({ id: null })\n                                                    const clone = { ...deviceTree }\n                                                    clone.devices.filter(deviceSearch => deviceSearch.id === myDeviceID)[0].id = null\n                                                    setDeviceTreeState(clone)\n                                                }\n                                                db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).update({ id: myDeviceID })\n                                                const clone = { ...deviceTree }\n                                                clone.devices[index].id = myDeviceID\n                                                setDeviceTreeState(clone)\n                                                setMyDeviceDetailsState(device)\n                                            }}\n                                            style={tw.style([\n                                                'bg-blue-500',\n                                                'rounded-md',\n                                                'p-3',\n                                                'w-1/2',\n                                                'mt-2',\n                                                'mb-2'\n                                            ])}\n                                        >\n                                            <Text style={tw.style([\n                                                'text-white',\n                                                'text-center',\n                                                'text-base'\n                                            ])} >Set To My ID</Text>\n                                        </TouchableOpacity>\n                                        {/* <Button title=\"Delete Device\" onPress={() => {\n                                    db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).delete()\n                                    let clone = { ...deviceTree }\n                                    clone = { ...clone, devices: clone.devices.filter(deviceSearch => deviceSearch.docID !== device.docID) }\n                                    setDeviceTreeState(clone)\n                                }\n                                }\n                                    style={{\n                                        marginBottom: 10\n                                    }}\n                                /> */}\n                                        <TouchableOpacity\n                                            onPress={() => {\n                                                db.collection('users').doc(auth.currentUser.uid).collection('devices').doc(device.docID).delete()\n                                                let clone = { ...deviceTree }\n                                                clone = { ...clone, devices: clone.devices.filter(deviceSearch => deviceSearch.docID !== device.docID) }\n                                                setDeviceTreeState(clone)\n                                            }\n                                            }\n                                            style={tw.style([\n                                                'bg-red-500',\n                                                'rounded-md',\n                                                'p-3',\n                                                'w-1/2',\n                                                'mt-2',\n                                                'mb-2',\n                                            ])}\n                                        >\n                                            <Text style={tw.style([\n                                                'text-white',\n                                                'text-center',\n                                                'text-base'\n                                            ])} >Delete Device</Text>\n                                        </TouchableOpacity>\n                                    </View>\n                                </View>\n                            )\n                        })}\n                        {deviceTree.devices.length < 2 + deviceTree.extraDevicesPayingFor ?\n                            //     <Button title=\"Add Device\" onPress={() => {\n\n                            //     db.collection('users').doc(auth.currentUser.uid).collection('devices').add({ name: `Device${deviceTree.devices.length}`, id: null, printToPrinter: null }).then((docRef) => {\n                            //         const clone = { ...deviceTree }\n                            //         clone.devices.push({ name: \"Device\", id: null, printToPrinter: null, sendPrintToUserID: null, docID: docRef.id })\n                            //         setDeviceTreeState(clone)\n                            //     })\n                            // }} />\n                            <TouchableOpacity\n                                onPress={() => {\n\n                                    db.collection('users').doc(auth.currentUser.uid).collection('devices').add({ name: `Device${deviceTree.devices.length}`, id: null, printToPrinter: null }).then((docRef) => {\n                                        const clone = { ...deviceTree }\n                                        clone.devices.push({ name: \"Device\", id: null, printToPrinter: null, sendPrintToUserID: null, docID: docRef.id })\n                                        setDeviceTreeState(clone)\n                                    })\n                                }}\n                                style={tw.style([\n                                    'bg-green-500',\n                                    'rounded-md',\n                                    'p-2',\n                                    'mt-2',\n                                    'mb-2'\n                                ])}\n                            >\n                                <Text style={tw.style([\n                                    'text-white',\n                                    'text-center'\n                                ])} >Add Device</Text>\n                            </TouchableOpacity>\n                            :\n                            // <Button title=\"Pay For Another Device\" onPress={() => {\n                            //     resetLoader()\n                            //     AddNewDevice()\n                            // }\n                            // } />\n                            <TouchableOpacity\n                                onPress={() => {\n                                    resetLoader()\n                                    AddNewDevice()\n                                }}\n                                style={tw.style([\n                                    'bg-green-500',\n                                    'rounded-md',\n                                    'p-2',\n                                    'mt-2',\n                                    'mb-2'\n                                ])}\n                            >\n                                <Text style={tw.style([\n                                    'text-white',\n                                    'text-center'\n                                ])} >Pay For Another Device</Text>\n                            </TouchableOpacity>\n                        }\n                    </ScrollView>\n                </View>\n                {viewVisible && (\n                    <Modal visible={true}>\n                        <Animated.View\n                            style={{\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                                backgroundColor: \"white\",\n                                position: \"absolute\",\n                                opacity: fadeAnim,\n                                height: \"100%\",\n                                width: \"100%\",\n                            }}\n                        >\n                            <Image\n                                source={require(\"assets/loading.gif\")}\n                                style={{ width: 450, height: 450, resizeMode: \"contain\" }}\n                            />\n                        </Animated.View>\n                    </Modal>\n                )}\n            </div>\n        </div >\n    );\n\n\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: \"rgba(255,255,255,1)\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        height: \"100%\",\n    },\n    headerRowContainer: {\n        width: \"90%\",\n        height: 60,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        marginBottom: 20,\n    },\n    headerTxt: {\n        fontFamily: \"archivo-600\",\n        color: \"rgba(98,96,96,1)\",\n        fontSize: 20,\n    },\n    billingBtn: {\n        width: 60,\n        height: 60,\n        backgroundColor: \"#E6E6E6\",\n        borderRadius: 30,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    billingIcon: {\n        color: \"rgba(128,128,128,1)\",\n        fontSize: 30,\n    },\n    detailInputContainer: {\n        width: \"90%\",\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: \"rgba(155,152,152,1)\",\n        shadowColor: \"rgba(0,0,0,1)\",\n        shadowOffset: {\n            width: 3,\n            height: 3,\n        },\n        elevation: 45,\n        shadowOpacity: 0.2,\n        shadowRadius: 15,\n        padding: 30,\n        minHeight: \"75%\",\n        marginTop: 15,\n    },\n    materialStackedLabelTextbox1: {\n        height: 60,\n        width: 483,\n    },\n    materialStackedLabelTextbox2: {\n        height: 60,\n        width: 483,\n        marginLeft: 43,\n    },\n    materialStackedLabelTextbox1Row: {\n        height: 60,\n        flexDirection: \"row\",\n        marginTop: 23,\n        marginLeft: 36,\n        marginRight: 32,\n    },\n    materialStackedLabelTextbox3: {\n        height: 60,\n        width: 483,\n    },\n    materialStackedLabelTextbox5: {\n        height: 60,\n        width: 483,\n        marginLeft: 43,\n    },\n    materialStackedLabelTextbox3Row: {\n        height: 60,\n        flexDirection: \"row\",\n        marginTop: 30,\n        marginLeft: 36,\n        marginRight: 32,\n    },\n    materialStackedLabelTextbox4: {\n        height: 60,\n        width: 483,\n    },\n    materialStackedLabelTextbox6: {\n        height: 60,\n        width: 483,\n        marginLeft: 43,\n    },\n    materialStackedLabelTextbox4Row: {\n        height: 60,\n        flexDirection: \"row\",\n        marginTop: 29,\n        marginLeft: 36,\n        marginRight: 32,\n    },\n    materialStackedLabelTextbox7: {\n        height: 60,\n        width: 483,\n    },\n    materialButtonViolet2: {\n        height: 48,\n        width: 483,\n        marginLeft: 43,\n        marginTop: 12,\n    },\n    materialStackedLabelTextbox7Row: {\n        height: 60,\n        flexDirection: \"row\",\n        marginTop: 14,\n        marginLeft: 36,\n        marginRight: 32,\n    },\n    helperDownloadContainer: {\n        width: \"100%\",\n        height: 79,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        padding: 10,\n    },\n    helperTxt: {\n        fontFamily: \"archivo-500\",\n        color: \"#121212\",\n        fontSize: 19,\n        width: 483,\n        height: 52,\n    },\n    badgeWindows: {\n        width: 200,\n        height: 79,\n    },\n    badgeMac: {\n        width: 200,\n        height: 79,\n    },\n});\n\nexport default DeviceSettings;\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,uCAAuC;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU/C,SAASC,MAAM,EAAEC,MAAM,EAAEC,SAAS,QAAQ,6BAA6B;AACvE,SACIC,aAAa,EACbC,eAAe,EACfC,kBAAkB,EAClBC,uBAAuB;AAE3B,SAASC,IAAI,EAAEC,EAAE;AACjB,OAAOC,WAAW,MAAM,cAAc;AACtC,SAASC,UAAU,QAAQ,mBAAmB;AAAC;AAE/C,OAAOC,EAAE,MAAM,OAAO;AAAC;AAAA;AAEvB,IAAMC,cAAc,GAAG,SAAjBA,cAAc,GAAS;EACzB,IAAMC,UAAU,GAAGT,eAAe,CAACU,GAAG,EAAE;EACxC,IAAMC,UAAU,GAAGZ,aAAa,CAACW,GAAG,EAAE;EACtC,IAAME,QAAQ,GAAGlB,MAAM,CAAC,IAAImB,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EACtD,gBAAsCpB,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA9CqB,WAAW;IAAEC,cAAc;EAElC,IAAMC,MAAM,GAAG,SAATA,MAAM,GAAS;IAEjBL,QAAQ,CAACM,MAAM,CAACP,QAAQ,EAAE;MACtBQ,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,GAAG;MACbC,eAAe,EAAE;IACrB,CAAC,CAAC,CAACC,KAAK,EAAE;EACd,CAAC;EAED,IAAMC,WAAW,GAAG,SAAdA,WAAW,GAAS;IACtBP,cAAc,CAAC,IAAI,CAAC;IACpBC,MAAM,EAAE;EACZ,CAAC;EAED,IAAMO,YAAY;IAAA,6BAAG,aAAY;MAC7B,MAAMrB,EAAE,CACHsB,UAAU,CAAC,OAAO,CAAC,CACnBC,GAAG,CAACxB,IAAI,CAACyB,WAAW,CAACC,GAAG,CAAC,CACzBH,UAAU,CAAC,mBAAmB,CAAC,CAC/BI,GAAG,CAAC;QACDC,KAAK,EAAE,gCAAgC;QACvCC,QAAQ,EAAE,CAAC;QACXC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,IAAI;QACjCC,UAAU,EAAEH,MAAM,CAACC,QAAQ,CAACC;MAChC,CAAC,CAAC,CACDE,IAAI,CAAC,UAACC,MAAM,EAAK;QAEdA,MAAM,CAACC,UAAU;UAAA,8BAAC,WAAOC,IAAI,EAAK;YAC9B,iBAA6BA,IAAI,CAACC,IAAI,EAAE;cAAhCC,KAAK,cAALA,KAAK;cAAEC,SAAS,cAATA,SAAS;YACxB,IAAID,KAAK,EAAE;cAGPE,KAAK,yBAAuBF,KAAK,CAACG,OAAO,CAAG;YAChD;YAEA,IAAIF,SAAS,EAAE;cAGX,IAAMG,MAAM,SAASzC,UAAU,CAC3B,6GAA6G,CAChH;;cACD0C,OAAO,CAACC,GAAG,eAAe;cAC1B,MAAMF,MAAM,CAACG,kBAAkB,CAAC;gBAAEN,SAAS,EAATA;cAAU,CAAC,CAAC;YAClD;UACJ,CAAC;UAAA;YAAA;UAAA;QAAA,IAAC;MACN,CAAC,CAAC;IACV,CAAC;IAAA,gBAhCKnB,YAAY;MAAA;IAAA;EAAA,GAgCjB;;EAID,OACI;IAAK,SAAS,EAAC,cAAc;IAAA,UACzB;MAAK,SAAS,EAAC,SAAS;MAAA,WACpB,MAAC,IAAI;QAAC,KAAK,EAAE0B,MAAM,CAACC,SAAU;QAAA,WAC1B,KAAC,IAAI;UAAC,KAAK,EAAED,MAAM,CAACE,kBAAmB;UAAA,UACnC,KAAC,IAAI;YAAC,KAAK,EAAEF,MAAM,CAACG,SAAU;YAAA,UAAC;UAAe;QAAO,EAClD,EACP,MAAC,UAAU;UAAC,KAAK,EAAEH,MAAM,CAACI,oBAAqB;UAAA,WAC1C9C,UAAU,CAAC+C,OAAO,CAACC,GAAG,CAAC,UAACC,MAAM,EAAEC,KAAK,EAAK;YAEvC,IAAMC,kBAAkB,GAAG,EAAE;YAC7BnD,UAAU,CAAC+C,OAAO,CAACC,GAAG,CAAC,UAACI,YAAY,EAAEF,KAAK,EAAK;cAC5C,IAAIE,YAAY,CAACC,EAAE,KAAKJ,MAAM,CAACI,EAAE,EAAE;gBAC/BF,kBAAkB,CAACG,IAAI,CAAC;kBAAEC,KAAK,EAAEH,YAAY,CAACI,KAAK;kBAAEC,KAAK,EAAEL,YAAY,CAACM;gBAAK,CAAC,CAAC;cACpF;YACJ,CAAC,CAAC;YAEF,OACI,KAAC,IAAI;cAAa,KAAK,EAAE5D,EAAE,CAAC6D,KAAK,CAAC,CAC9B,cAAc,EACd,gBAAgB,EAChB,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,iBAAiB,EACjB,YAAY,EACZ,MAAM,EACN,UAAU,EACV,WAAW,EACX,SAAS,CACZ,CAAE;cAAA,UAEC,MAAC,IAAI;gBAAC,KAAK,EAAE;kBAACC,KAAK,EAAE;gBAAE,CAAE;gBAAA,WAUrB,MAAC,IAAI;kBAAA,WACD,KAAC,IAAI;oBAAC,KAAK,EAAE9D,EAAE,CAAC6D,KAAK,CAAC,CAClB,SAAS,EACT,MAAM,CAET,CAAE;oBAAA,UAAE;kBAAW,EAAO,EACvB,KAAC,SAAS;oBAAC,WAAW,EAAC,mBAAmB;oBAAC,KAAK,EAAEV,MAAM,CAACS,IAAK;oBAAC,YAAY,EAAE,sBAAAG,GAAG,EAAI;sBAChF,IAAMC,KAAK,qBAAQ9D,UAAU,CAAE;sBAC/B8D,KAAK,CAACf,OAAO,CAACG,KAAK,CAAC,CAACQ,IAAI,GAAGG,GAAG;sBAC/BrE,kBAAkB,CAACsE,KAAK,CAAC;oBAC7B,CAAE;oBACE,KAAK,EAAEhE,EAAE,CAAC6D,KAAK,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,CAAC;kBAAE,EACvF;gBAAA,EACC,EACP,MAAC,IAAI;kBACD,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CACZ,MAAM,EACN,UAAU,EACV,cAAc,EACd,MAAM,EACN,MAAM,CACT,CAAE;kBAAA,WAEH,KAAC,IAAI;oBAAC,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CAClB,SAAS,EACT,MAAM,EACN,aAAa,CAChB,CAAE;oBAAA,UAAE;kBAAW,EAAO,EACvB,KAAC,IAAI;oBAAC,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CAClB,SAAS,EACT,MAAM,CACT,CAAE;oBAAA,UAAGV,MAAM,CAACI,EAAE,GAAGJ,MAAM,CAACI,EAAE,CAACU,WAAW,EAAE,GAAG;kBAA0B,EAAQ;gBAAA,EAC3E,EASP,MAAC,IAAI;kBAAC,KAAK,EAAEjE,EAAE,CAAC6D,KAAK,CAAC,CAClB,MAAM,EACN,UAAU,EACV,cAAc,EACd,MAAM,EACN,MAAM,CACT,CAAE;kBAAA,WACC,KAAC,IAAI;oBAAC,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CAClB,SAAS,EACT,MAAM,EACN,aAAa,CAChB,CAAE;oBAAA,UAAE;kBAAqB,EAAO,EACjC,KAAC,MAAM;oBAAC,KAAK,EAAEV,MAAM,CAACe,iBAAkB;oBAAC,aAAa,EAAE,uBAAAH,GAAG,EAAI;sBAC3D,IAAMC,KAAK,qBAAQ9D,UAAU,CAAE;sBAC/B8D,KAAK,CAACf,OAAO,CAACG,KAAK,CAAC,CAACc,iBAAiB,GAAGH,GAAG;sBAC5CrE,kBAAkB,CAACsE,KAAK,CAAC;oBAC7B;kBAAE,EAAG;gBAAA,EACF,EACP,MAAC,IAAI;kBAAC,KAAK,EAAEhE,EAAE,CAAC6D,KAAK,CAAC,CAClB,MAAM,EACN,UAAU,EACV,cAAc,EACd,MAAM,EACN,MAAM,CACT,CAAE;kBAAA,WACC,KAAC,IAAI;oBAAC,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CAClB,SAAS,EACT,MAAM,EACN,aAAa,CAChB,CAAE;oBAAA,UAAE;kBAA+B,EAAO,EAC3C,KAAC,MAAM;oBAAC,KAAK,EAAEV,MAAM,CAACgB,yBAA0B;oBAAC,aAAa,EAAE,uBAAAJ,GAAG,EAAI;sBACnE,IAAMC,KAAK,qBAAQ9D,UAAU,CAAE;sBAC/B8D,KAAK,CAACf,OAAO,CAACG,KAAK,CAAC,CAACe,yBAAyB,GAAGJ,GAAG;sBACpDrE,kBAAkB,CAACsE,KAAK,CAAC;oBAC7B;kBAAE,EAAG;gBAAA,EACF,EAoDN,CAACb,MAAM,CAACgB,yBAAyB,GAAG,MAAC,IAAI;kBAAA,WACtC,KAAC,IAAI;oBAAC,KAAK,EAAEnE,EAAE,CAAC6D,KAAK,CAAC,CAClB,SAAS,EACT,MAAM,CACT,CAAE;oBAAA,UAAE;kBAAgB,EAAO,EAC5B,KAAC,SAAS;oBAAC,WAAW,EAAC,oBAAoB;oBAAC,KAAK,EAAEV,MAAM,CAACiB,cAAe;oBAAC,YAAY,EAAE,sBAAAL,GAAG,EAAI;sBAC3F,IAAMC,KAAK,qBAAQ9D,UAAU,CAAE;sBAC/B8D,KAAK,CAACf,OAAO,CAACG,KAAK,CAAC,CAACgB,cAAc,GAAGL,GAAG;sBACzCrE,kBAAkB,CAACsE,KAAK,CAAC;oBAC7B,CAAE;oBACE,KAAK,EAAEhE,EAAE,CAAC6D,KAAK,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,CAAC;kBAAE,EACvF;gBAAA,EACC,GACH,MAAC,IAAI;kBAAA,WACD,KAAC,IAAI;oBAAC,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CAClB,SAAS,EACT,MAAM,CACT,CAAE;oBAAA,UAAE;kBAA8B,EAAO,EA6C1C;oBACI,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CACZ,OAAO,EACP,KAAK,EACL,QAAQ,EACR,iBAAiB,EACjB,YAAY,EACZ,MAAM,CACT,CAAE;oBACH,KAAK,EAAEV,MAAM,CAACkB,iBAAkB;oBAChC,QAAQ,EAAE,kBAACC,CAAC,EAAK;sBACb,IAAMN,KAAK,qBAAQ9D,UAAU,CAAE;sBAC/B8D,KAAK,CAACf,OAAO,CAACG,KAAK,CAAC,CAACiB,iBAAiB,GAAGC,CAAC,CAACC,MAAM,CAACd,KAAK;sBACvD/D,kBAAkB,CAACsE,KAAK,CAAC;oBAC7B,CACC;oBAAA,UAEAX,kBAAkB,CAACH,GAAG,CAAC,UAACC,MAAM,EAAEC,KAAK,EAAK;sBACvC,OACI;wBAAoB,KAAK,EAAED,MAAM,CAACM,KAAM;wBAAA,UAAEN,MAAM,CAACQ;sBAAK,GAAzCP,KAAK,CAA8C;oBAExE,CAAC;kBAAC,EACG;gBAAA,EACN,EAyBX,KAAC,gBAAgB;kBACb,OAAO,EAAE,mBAAM;oBACXvD,EAAE,CAACsB,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACxB,IAAI,CAACyB,WAAW,CAACC,GAAG,CAAC,CAACH,UAAU,CAAC,SAAS,CAAC,CAACC,GAAG,CAAC+B,MAAM,CAACO,KAAK,CAAC,CAACc,MAAM,CAACrB,MAAM,CAAC;oBACvG,IAAMa,KAAK,qBAAQ9D,UAAU,CAAE;oBAC/B8D,KAAK,CAACf,OAAO,CAACG,KAAK,CAAC,GAAGD,MAAM;oBAC7BzD,kBAAkB,CAACsE,KAAK,CACvB;oBACDvB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;oBAC7B/C,uBAAuB,CAACwD,MAAM,CAAC;kBACnC,CAAE;kBACF,KAAK,EAAEnD,EAAE,CAAC6D,KAAK,CAAC,CACZ,aAAa,EACb,YAAY,EACZ,KAAK,EACL,OAAO,EACP,MAAM,EACN,MAAM,CACT,CAAE;kBAAA,UAEH,KAAC,IAAI;oBAAC,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CAClB,YAAY,EACZ,aAAa,EACb,WAAW,CACd,CAAE;oBAAA,UAAE;kBAAa;gBAAO,EACV,EAoBnB,KAAC,gBAAgB;kBACb,OAAO,EAAE,mBAAM;oBACX,IAAI3D,UAAU,CAAC+C,OAAO,CAACwB,MAAM,CAAC,UAAAnB,YAAY;sBAAA,OAAIA,YAAY,CAACC,EAAE,KAAKnD,UAAU;oBAAA,EAAC,CAACsE,MAAM,GAAG,CAAC,EAAE;sBACtF7E,EAAE,CAACsB,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACxB,IAAI,CAACyB,WAAW,CAACC,GAAG,CAAC,CAACH,UAAU,CAAC,SAAS,CAAC,CAACC,GAAG,CAAClB,UAAU,CAAC+C,OAAO,CAACwB,MAAM,CAAC,UAAAnB,YAAY;wBAAA,OAAIA,YAAY,CAACC,EAAE,KAAKnD,UAAU;sBAAA,EAAC,CAAC,CAAC,CAAC,CAACsD,KAAK,CAAC,CAACc,MAAM,CAAC;wBAAEjB,EAAE,EAAE;sBAAK,CAAC,CAAC;sBACnL,IAAMS,MAAK,qBAAQ9D,UAAU,CAAE;sBAC/B8D,MAAK,CAACf,OAAO,CAACwB,MAAM,CAAC,UAAAnB,YAAY;wBAAA,OAAIA,YAAY,CAACC,EAAE,KAAKnD,UAAU;sBAAA,EAAC,CAAC,CAAC,CAAC,CAACmD,EAAE,GAAG,IAAI;sBACjF7D,kBAAkB,CAACsE,MAAK,CAAC;oBAC7B;oBACAnE,EAAE,CAACsB,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACxB,IAAI,CAACyB,WAAW,CAACC,GAAG,CAAC,CAACH,UAAU,CAAC,SAAS,CAAC,CAACC,GAAG,CAAC+B,MAAM,CAACO,KAAK,CAAC,CAACc,MAAM,CAAC;sBAAEjB,EAAE,EAAEnD;oBAAW,CAAC,CAAC;oBACnH,IAAM4D,KAAK,qBAAQ9D,UAAU,CAAE;oBAC/B8D,KAAK,CAACf,OAAO,CAACG,KAAK,CAAC,CAACG,EAAE,GAAGnD,UAAU;oBACpCV,kBAAkB,CAACsE,KAAK,CAAC;oBACzBrE,uBAAuB,CAACwD,MAAM,CAAC;kBACnC,CAAE;kBACF,KAAK,EAAEnD,EAAE,CAAC6D,KAAK,CAAC,CACZ,aAAa,EACb,YAAY,EACZ,KAAK,EACL,OAAO,EACP,MAAM,EACN,MAAM,CACT,CAAE;kBAAA,UAEH,KAAC,IAAI;oBAAC,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CAClB,YAAY,EACZ,aAAa,EACb,WAAW,CACd,CAAE;oBAAA,UAAE;kBAAY;gBAAO,EACT,EAYnB,KAAC,gBAAgB;kBACb,OAAO,EAAE,mBAAM;oBACXhE,EAAE,CAACsB,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACxB,IAAI,CAACyB,WAAW,CAACC,GAAG,CAAC,CAACH,UAAU,CAAC,SAAS,CAAC,CAACC,GAAG,CAAC+B,MAAM,CAACO,KAAK,CAAC,CAACiB,MAAM,EAAE;oBACjG,IAAIX,KAAK,qBAAQ9D,UAAU,CAAE;oBAC7B8D,KAAK,mCAAQA,KAAK;sBAAEf,OAAO,EAAEe,KAAK,CAACf,OAAO,CAACwB,MAAM,CAAC,UAAAnB,YAAY;wBAAA,OAAIA,YAAY,CAACI,KAAK,KAAKP,MAAM,CAACO,KAAK;sBAAA;oBAAC,EAAE;oBACxGhE,kBAAkB,CAACsE,KAAK,CAAC;kBAC7B,CACC;kBACD,KAAK,EAAEhE,EAAE,CAAC6D,KAAK,CAAC,CACZ,YAAY,EACZ,YAAY,EACZ,KAAK,EACL,OAAO,EACP,MAAM,EACN,MAAM,CACT,CAAE;kBAAA,UAEH,KAAC,IAAI;oBAAC,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CAClB,YAAY,EACZ,aAAa,EACb,WAAW,CACd,CAAE;oBAAA,UAAE;kBAAa;gBAAO,EACV;cAAA;YAChB,GAjXAT,KAAK,CAkXT;UAEf,CAAC,CAAC,EACDlD,UAAU,CAAC+C,OAAO,CAACyB,MAAM,GAAG,CAAC,GAAGxE,UAAU,CAAC0E,qBAAqB,GAS7D,KAAC,gBAAgB;YACb,OAAO,EAAE,mBAAM;cAEX/E,EAAE,CAACsB,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACxB,IAAI,CAACyB,WAAW,CAACC,GAAG,CAAC,CAACH,UAAU,CAAC,SAAS,CAAC,CAACI,GAAG,CAAC;gBAAEqC,IAAI,aAAW1D,UAAU,CAAC+C,OAAO,CAACyB,MAAQ;gBAAEnB,EAAE,EAAE,IAAI;gBAAEa,cAAc,EAAE;cAAK,CAAC,CAAC,CAACrC,IAAI,CAAC,UAACC,MAAM,EAAK;gBACxK,IAAMgC,KAAK,qBAAQ9D,UAAU,CAAE;gBAC/B8D,KAAK,CAACf,OAAO,CAACO,IAAI,CAAC;kBAAEI,IAAI,EAAE,QAAQ;kBAAEL,EAAE,EAAE,IAAI;kBAAEa,cAAc,EAAE,IAAI;kBAAEC,iBAAiB,EAAE,IAAI;kBAAEX,KAAK,EAAE1B,MAAM,CAACuB;gBAAG,CAAC,CAAC;gBACjH7D,kBAAkB,CAACsE,KAAK,CAAC;cAC7B,CAAC,CAAC;YACN,CAAE;YACF,KAAK,EAAEhE,EAAE,CAAC6D,KAAK,CAAC,CACZ,cAAc,EACd,YAAY,EACZ,KAAK,EACL,MAAM,EACN,MAAM,CACT,CAAE;YAAA,UAEH,KAAC,IAAI;cAAC,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CAClB,YAAY,EACZ,aAAa,CAChB,CAAE;cAAA,UAAE;YAAU;UAAO,EACP,GAOnB,KAAC,gBAAgB;YACb,OAAO,EAAE,mBAAM;cACX5C,WAAW,EAAE;cACbC,YAAY,EAAE;YAClB,CAAE;YACF,KAAK,EAAElB,EAAE,CAAC6D,KAAK,CAAC,CACZ,cAAc,EACd,YAAY,EACZ,KAAK,EACL,MAAM,EACN,MAAM,CACT,CAAE;YAAA,UAEH,KAAC,IAAI;cAAC,KAAK,EAAE7D,EAAE,CAAC6D,KAAK,CAAC,CAClB,YAAY,EACZ,aAAa,CAChB,CAAE;cAAA,UAAE;YAAsB;UAAO,EACnB;QAAA,EAEd;MAAA,EACV,EACNpD,WAAW,IACR,KAAC,KAAK;QAAC,OAAO,EAAE,IAAK;QAAA,UACjB,KAAC,QAAQ,CAAC,IAAI;UACV,KAAK,EAAE;YACHoE,UAAU,EAAE,QAAQ;YACpBC,cAAc,EAAE,QAAQ;YACxBC,eAAe,EAAE,OAAO;YACxBC,QAAQ,EAAE,UAAU;YACpBC,OAAO,EAAE5E,QAAQ;YACjB6E,MAAM,EAAE,MAAM;YACdpB,KAAK,EAAE;UACX,CAAE;UAAA,UAEF,KAAC,KAAK;YACF,MAAM,EAAEqB,OAAO,qCAAuB;YACtC,KAAK,EAAE;cAAErB,KAAK,EAAE,GAAG;cAAEoB,MAAM,EAAE,GAAG;cAAEE,UAAU,EAAE;YAAU;UAAE;QAC5D;MACU,EAEvB;IAAA;EACC,EACH;AAIf,CAAC;AAED,IAAMxC,MAAM,GAAGyC,UAAU,CAACC,MAAM,CAAC;EAC7BzC,SAAS,EAAE;IACPkC,eAAe,EAAE,qBAAqB;IACtCF,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBhB,KAAK,EAAE,MAAM;IACboB,MAAM,EAAE;EACZ,CAAC;EACDpC,kBAAkB,EAAE;IAChBgB,KAAK,EAAE,KAAK;IACZoB,MAAM,EAAE,EAAE;IACVK,aAAa,EAAE,KAAK;IACpBV,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,eAAe;IAC/BU,YAAY,EAAE;EAClB,CAAC;EACDzC,SAAS,EAAE;IACP0C,UAAU,EAAE,aAAa;IACzBC,KAAK,EAAE,kBAAkB;IACzBC,QAAQ,EAAE;EACd,CAAC;EACDC,UAAU,EAAE;IACR9B,KAAK,EAAE,EAAE;IACToB,MAAM,EAAE,EAAE;IACVH,eAAe,EAAE,SAAS;IAC1Bc,YAAY,EAAE,EAAE;IAChBhB,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EACpB,CAAC;EACDgB,WAAW,EAAE;IACTJ,KAAK,EAAE,qBAAqB;IAC5BC,QAAQ,EAAE;EACd,CAAC;EACD3C,oBAAoB,EAAE;IAClBc,KAAK,EAAE,KAAK;IACZ+B,YAAY,EAAE,CAAC;IACfE,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,qBAAqB;IAClCC,WAAW,EAAE,eAAe;IAC5BC,YAAY,EAAE;MACVpC,KAAK,EAAE,CAAC;MACRoB,MAAM,EAAE;IACZ,CAAC;IACDiB,SAAS,EAAE,EAAE;IACbC,aAAa,EAAE,GAAG;IAClBC,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,KAAK;IAChBC,SAAS,EAAE;EACf,CAAC;EACDC,4BAA4B,EAAE;IAC1BvB,MAAM,EAAE,EAAE;IACVpB,KAAK,EAAE;EACX,CAAC;EACD4C,4BAA4B,EAAE;IAC1BxB,MAAM,EAAE,EAAE;IACVpB,KAAK,EAAE,GAAG;IACV6C,UAAU,EAAE;EAChB,CAAC;EACDC,+BAA+B,EAAE;IAC7B1B,MAAM,EAAE,EAAE;IACVK,aAAa,EAAE,KAAK;IACpBiB,SAAS,EAAE,EAAE;IACbG,UAAU,EAAE,EAAE;IACdE,WAAW,EAAE;EACjB,CAAC;EACDC,4BAA4B,EAAE;IAC1B5B,MAAM,EAAE,EAAE;IACVpB,KAAK,EAAE;EACX,CAAC;EACDiD,4BAA4B,EAAE;IAC1B7B,MAAM,EAAE,EAAE;IACVpB,KAAK,EAAE,GAAG;IACV6C,UAAU,EAAE;EAChB,CAAC;EACDK,+BAA+B,EAAE;IAC7B9B,MAAM,EAAE,EAAE;IACVK,aAAa,EAAE,KAAK;IACpBiB,SAAS,EAAE,EAAE;IACbG,UAAU,EAAE,EAAE;IACdE,WAAW,EAAE;EACjB,CAAC;EACDI,4BAA4B,EAAE;IAC1B/B,MAAM,EAAE,EAAE;IACVpB,KAAK,EAAE;EACX,CAAC;EACDoD,4BAA4B,EAAE;IAC1BhC,MAAM,EAAE,EAAE;IACVpB,KAAK,EAAE,GAAG;IACV6C,UAAU,EAAE;EAChB,CAAC;EACDQ,+BAA+B,EAAE;IAC7BjC,MAAM,EAAE,EAAE;IACVK,aAAa,EAAE,KAAK;IACpBiB,SAAS,EAAE,EAAE;IACbG,UAAU,EAAE,EAAE;IACdE,WAAW,EAAE;EACjB,CAAC;EACDO,4BAA4B,EAAE;IAC1BlC,MAAM,EAAE,EAAE;IACVpB,KAAK,EAAE;EACX,CAAC;EACDuD,qBAAqB,EAAE;IACnBnC,MAAM,EAAE,EAAE;IACVpB,KAAK,EAAE,GAAG;IACV6C,UAAU,EAAE,EAAE;IACdH,SAAS,EAAE;EACf,CAAC;EACDc,+BAA+B,EAAE;IAC7BpC,MAAM,EAAE,EAAE;IACVK,aAAa,EAAE,KAAK;IACpBiB,SAAS,EAAE,EAAE;IACbG,UAAU,EAAE,EAAE;IACdE,WAAW,EAAE;EACjB,CAAC;EACDU,uBAAuB,EAAE;IACrBzD,KAAK,EAAE,MAAM;IACboB,MAAM,EAAE,EAAE;IACVK,aAAa,EAAE,KAAK;IACpBV,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,eAAe;IAC/BwB,OAAO,EAAE;EACb,CAAC;EACDkB,SAAS,EAAE;IACP/B,UAAU,EAAE,aAAa;IACzBC,KAAK,EAAE,SAAS;IAChBC,QAAQ,EAAE,EAAE;IACZ7B,KAAK,EAAE,GAAG;IACVoB,MAAM,EAAE;EACZ,CAAC;EACDuC,YAAY,EAAE;IACV3D,KAAK,EAAE,GAAG;IACVoB,MAAM,EAAE;EACZ,CAAC;EACDwC,QAAQ,EAAE;IACN5D,KAAK,EAAE,GAAG;IACVoB,MAAM,EAAE;EACZ;AACJ,CAAC,CAAC;AAEF,eAAejF,cAAc"},"metadata":{},"sourceType":"module"}