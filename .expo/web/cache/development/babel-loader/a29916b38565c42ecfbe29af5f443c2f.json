{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport React, { useEffect } from \"react\";\nimport { Button } from \"@react-native-material/core\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ProductOptionMultiChoiceDropdown = function ProductOptionMultiChoiceDropdown(_ref) {\n  var myObjProfile = _ref.myObjProfile,\n    setmyObjProfile = _ref.setmyObjProfile,\n    index = _ref.index,\n    e = _ref.e,\n    scrollToItem = _ref.scrollToItem;\n  useEffect(function () {\n    first;\n    return function () {\n      second;\n    };\n  }, [third]);\n  return _jsx(View, {\n    style: {\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      width: \"100%\"\n    },\n    onLayout: firstLayoutAlign,\n    children: e.optionsList.map(function (selection, listIndex) {\n      return _jsx(View, {\n        style: [styles.multiOption, myObjProfile.options[index].optionsList[listIndex].selected == true ? {\n          backgroundColor: \"rgba(205,213,255,1)\",\n          borderWidth: 2,\n          borderColor: \"rgba(205,213,255,1)\"\n        } : {\n          borderWidth: 2,\n          borderColor: \"rgba(203,202,202,1)\"\n        }],\n        children: _jsxs(View, {\n          style: {\n            flexDirection: \"row\",\n            width: \"100%\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\"\n          },\n          children: [_jsx(Button, {\n            title: \"-\",\n            style: {\n              width: 30,\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            },\n            onPress: function onPress() {\n              var newMyObjProfile = structuredClone(myObjProfile);\n              var thisItemCountsAs = selection.countsAs ? parseInt(selection.countsAs) : 1;\n              if (newMyObjProfile.options[index].optionsList[listIndex].selectedTimes > 0) {\n                newMyObjProfile.options[index].optionsList[listIndex].selectedTimes -= 1 * thisItemCountsAs;\n              }\n              setmyObjProfile(newMyObjProfile);\n            }\n          }), _jsx(Text, {\n            style: {\n              padding: 5\n            },\n            children: myObjProfile.options[index].optionsList[listIndex].selectedTimes > 0 ? myObjProfile.options[index].optionsList[listIndex].selectedTimes + \" x \" + selection.label + \" \" + (selection.priceIncrease ? \"(+$\" + selection.priceIncrease + \")\" : \"\") : \"0 x \" + selection.label + \" \" + (selection.priceIncrease ? \"(+$\" + selection.priceIncrease + \")\" : \"\")\n          }), _jsx(Button, {\n            title: \"+\",\n            style: {\n              width: 30,\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            },\n            onPress: function onPress() {\n              var newMyObjProfile = structuredClone(myObjProfile);\n\n              var selectedItems = newMyObjProfile.options[index].optionsList.filter(function (op) {\n                return op.selectedTimes > 0;\n              });\n              var thisItemSelectedTimes = selection.selectedTimes ? parseInt(selection.selectedTimes) : 1;\n              var thisItemCountsAs = selection.countsAs ? parseInt(selection.countsAs) : 1;\n              var selectedTimesTotal = thisItemCountsAs;\n              selectedItems.map(function (op) {\n                selectedTimesTotal += op.countsAs ? parseInt(op.selectedTimes) * parseInt(op.countsAs) : parseInt(op.selectedTimes);\n              });\n              if (parseInt(e.numOfSelectable) >= selectedTimesTotal || !e.numOfSelectable || parseInt(e.numOfSelectable) === 0) {\n                console.log(\"selectedTimesTotal: \", selectedTimesTotal, \" e.numOfSelectable: \", e.numOfSelectable);\n                if (newMyObjProfile.options[index].optionsList[listIndex].selectedTimes) {\n                  newMyObjProfile.options[index].optionsList[listIndex].selectedTimes += 1;\n                } else {\n                  newMyObjProfile.options[index].optionsList[listIndex].selectedTimes = 1;\n                }\n                setmyObjProfile(newMyObjProfile);\n              } else {\n                console.log(\"Didnt Work \", \"selectedTimesTotal: \", selectedTimesTotal, \" e.numOfSelectable: \", e.numOfSelectable);\n              }\n            }\n          })]\n        })\n      }, listIndex);\n    })\n  });\n};\nexport default ProductOptionMultiChoiceDropdown;\nvar styles = StyleSheet.create({\n  multiOption: {\n    borderRadius: 10,\n    shadowColor: \"rgba(0,0,0,1)\",\n    shadowOffset: {\n      width: 3,\n      height: 3\n    },\n    elevation: 30,\n    shadowOpacity: 0.03,\n    shadowRadius: 10,\n    alignItems: \"center\",\n    justifyContent: \"space-around\",\n    padding: 5,\n    margin: 5,\n    width: \"32%\"\n  }\n});","map":{"version":3,"names":["React","useEffect","Button","ProductOptionMultiChoiceDropdown","myObjProfile","setmyObjProfile","index","e","scrollToItem","first","second","third","flexDirection","flexWrap","width","firstLayoutAlign","optionsList","map","selection","listIndex","styles","multiOption","options","selected","backgroundColor","borderWidth","borderColor","alignItems","justifyContent","newMyObjProfile","structuredClone","thisItemCountsAs","countsAs","parseInt","selectedTimes","padding","label","priceIncrease","selectedItems","filter","op","thisItemSelectedTimes","selectedTimesTotal","numOfSelectable","console","log","StyleSheet","create","borderRadius","shadowColor","shadowOffset","height","elevation","shadowOpacity","shadowRadius","margin"],"sources":["/Users/peterputros/Desktop/PosMate/components/product/ProductOptionMultiChoiceDropdown.tsx"],"sourcesContent":["import { View, Text, StyleSheet } from \"react-native\";\nimport React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { Button } from \"@react-native-material/core\";\n\nconst ProductOptionMultiChoiceDropdown = ({\n  myObjProfile,\n  setmyObjProfile,\n  index,\n  e,\n  scrollToItem,\n}) => {\n\n    useEffect(() => {\n      first\n    \n      return () => {\n        second\n      }\n    }, [third])\n    \n\n  return (\n    <View\n      style={{ flexDirection: \"row\", flexWrap: \"wrap\", width: \"100%\" }}\n      onLayout={firstLayoutAlign}\n    >\n      {e.optionsList.map((selection, listIndex) => {\n        return (\n          <View\n            key={listIndex}\n            style={[\n              styles.multiOption,\n              myObjProfile.options[index].optionsList[listIndex].selected ==\n              true\n                ? {\n                    backgroundColor: \"rgba(205,213,255,1)\",\n                    borderWidth: 2,\n                    borderColor: \"rgba(205,213,255,1)\",\n                  }\n                : {\n                    borderWidth: 2,\n                    borderColor: \"rgba(203,202,202,1)\",\n                  },\n            ]}\n          >\n            <View\n              style={{\n                flexDirection: \"row\",\n                width: \"100%\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Button\n                title=\"-\"\n                style={{\n                  width: 30,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n                onPress={() => {\n                  const newMyObjProfile = structuredClone(myObjProfile);\n                  //filter out all options[index].optionsList that have selectedTimes > 0 then map through and multiply by countsAs\n                  const thisItemCountsAs = selection.countsAs\n                    ? parseInt(selection.countsAs)\n                    : 1;\n\n                  if (\n                    newMyObjProfile.options[index].optionsList[listIndex]\n                      .selectedTimes > 0\n                  ) {\n                    newMyObjProfile.options[index].optionsList[\n                      listIndex\n                    ].selectedTimes -= 1 * thisItemCountsAs;\n                  }\n\n                  setmyObjProfile(newMyObjProfile);\n                }}\n              />\n              <Text style={{ padding: 5 }}>\n                {myObjProfile.options[index].optionsList[listIndex]\n                  .selectedTimes > 0\n                  ? `${\n                      myObjProfile.options[index].optionsList[listIndex]\n                        .selectedTimes\n                    } x ${selection.label} ${\n                      selection.priceIncrease\n                        ? `(+$${selection.priceIncrease})`\n                        : \"\"\n                    }`\n                  : `0 x ${selection.label} ${\n                      selection.priceIncrease\n                        ? `(+$${selection.priceIncrease})`\n                        : \"\"\n                    }`}\n              </Text>\n              <Button\n                title=\"+\"\n                style={{\n                  width: 30,\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                }}\n                onPress={() => {\n                  const newMyObjProfile = structuredClone(myObjProfile);\n                  //filter out all options[index].optionsList that have selectedTimes > 0 then map through and multiply by countsAs\n\n                  const selectedItems = newMyObjProfile.options[\n                    index\n                  ].optionsList.filter((op) => op.selectedTimes > 0);\n\n                  const thisItemSelectedTimes = selection.selectedTimes\n                    ? parseInt(selection.selectedTimes)\n                    : 1;\n                  const thisItemCountsAs = selection.countsAs\n                    ? parseInt(selection.countsAs)\n                    : 1;\n\n                  let selectedTimesTotal = thisItemCountsAs;\n\n                  selectedItems.map((op) => {\n                    selectedTimesTotal += op.countsAs\n                      ? parseInt(op.selectedTimes) * parseInt(op.countsAs)\n                      : parseInt(op.selectedTimes);\n                  });\n\n                  if (\n                    parseInt(e.numOfSelectable) >= selectedTimesTotal ||\n                    !e.numOfSelectable ||\n                    parseInt(e.numOfSelectable) === 0\n                  ) {\n                    console.log(\n                      \"selectedTimesTotal: \",\n                      selectedTimesTotal,\n                      \" e.numOfSelectable: \",\n                      e.numOfSelectable\n                    );\n                    if (\n                      newMyObjProfile.options[index].optionsList[listIndex]\n                        .selectedTimes\n                    ) {\n                      newMyObjProfile.options[index].optionsList[\n                        listIndex\n                      ].selectedTimes += 1;\n                    } else {\n                      newMyObjProfile.options[index].optionsList[\n                        listIndex\n                      ].selectedTimes = 1;\n                    }\n                    setmyObjProfile(newMyObjProfile);\n                  } else {\n                    console.log(\n                      \"Didnt Work \",\n                      \"selectedTimesTotal: \",\n                      selectedTimesTotal,\n                      \" e.numOfSelectable: \",\n                      e.numOfSelectable\n                    );\n                  }\n                }}\n              />\n            </View>\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nexport default ProductOptionMultiChoiceDropdown;\n\nconst styles = StyleSheet.create({\n  multiOption: {\n    borderRadius: 10,\n    shadowColor: \"rgba(0,0,0,1)\",\n    shadowOffset: {\n      width: 3,\n      height: 3,\n    },\n    elevation: 30,\n    shadowOpacity: 0.03,\n    shadowRadius: 10,\n    alignItems: \"center\",\n    justifyContent: \"space-around\",\n    padding: 5,\n    margin: 5,\n    width: \"32%\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}