{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from 'react';\nimport 'react-select2-wrapper/css/select2.css';\nimport { employeesState, setEmployeesState } from \"../../../../../state/state\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useHistory, useParams } from 'react-router-dom';\nimport { auth, db } from \"../../../../../state/firebaseConfig\";\nimport { Text } from '@react-native-material/core';\nimport { Entypo } from '@expo/vector-icons';\nimport tw from 'twrnc';\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar EditEmployee = function EditEmployee() {\n  var _useParams = useParams(),\n    employeeId = _useParams.employeeId;\n  var employees = employeesState.use();\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    employee = _useState2[0],\n    setemployee = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    dateSelected = _useState4[0],\n    setdateSelected = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    startTime = _useState6[0],\n    setstartTime = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    endTime = _useState8[0],\n    setendTime = _useState8[1];\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    allHours = _useState10[0],\n    setallHours = _useState10[1];\n  var _useState11 = useState([]),\n    _useState12 = _slicedToArray(_useState11, 2),\n    paidSelected = _useState12[0],\n    setpaidSelected = _useState12[1];\n  var _useState13 = useState([]),\n    _useState14 = _slicedToArray(_useState13, 2),\n    unPaidSelected = _useState14[0],\n    setunPaidSelected = _useState14[1];\n  var history = useHistory();\n  var _useState15 = useState(false),\n    _useState16 = _slicedToArray(_useState15, 2),\n    error = _useState16[0],\n    seterror = _useState16[1];\n  useEffect(function () {\n    if (employees.length > 0) {\n      var myEmployee = employees.filter(function (e) {\n        return e.id === employeeId;\n      })[0];\n      if (!myEmployee) {\n        history.push(\"/authed/report/employeesreport\");\n        return;\n      }\n      setemployee(myEmployee);\n      db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(myEmployee.id.toString()).collection(\"hours\").get().then(function (snapshot) {\n        console.log('Made it before empty check');\n        if (snapshot.empty) return;\n        var hours = [];\n        snapshot.forEach(function (doc) {\n          console.log('doc.data()', doc.data());\n          hours.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n            id: doc.id\n          }));\n        });\n        setallHours(hours);\n      });\n    } else {\n      history.push(\"/authed/report/employeesreport\");\n      return;\n    }\n  }, []);\n  useEffect(function () {\n    console.log('All Hours: ', allHours);\n    console.log('Paid Selected: ', paidSelected);\n    console.log('Unpaid Selected: ', unPaidSelected);\n  }, [allHours, paidSelected, unPaidSelected]);\n  function handleDataUpdate() {\n    if (!employee.name) {\n      seterror('Please enter a employee name');\n      return;\n    }\n    db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).update({\n      name: employee.name,\n      pin: employee.pin\n    });\n    var newEmployeesList = _toConsumableArray(employees);\n    var index = newEmployeesList.findIndex(function (e) {\n      return e.id === employee.id;\n    });\n    newEmployeesList[index] = employee;\n    setEmployeesState(newEmployeesList);\n  }\n  return _jsx(_Fragment, {\n    children: _jsx(\"div\", {\n      className: \"page-wrapper\",\n      children: _jsxs(\"div\", {\n        className: \"content\",\n        children: [_jsx(\"div\", {\n          className: \"page-header\",\n          children: _jsxs(\"div\", {\n            className: \"page-title\",\n            children: [_jsx(\"h4\", {\n              children: \"Employee Edit\"\n            }), _jsx(\"h6\", {\n              children: \"Edit your employee details\"\n            })]\n          })\n        }), employee && _jsx(\"div\", {\n          className: \"card\",\n          children: _jsx(\"div\", {\n            className: \"card-body\",\n            children: _jsxs(\"div\", {\n              className: \"row\",\n              children: [_jsxs(View, {\n                style: {\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  justifyContent: 'space-between'\n                },\n                children: [_jsxs(View, {\n                  style: {\n                    flexDirection: 'row',\n                    alignItems: 'center',\n                    width: '80%'\n                  },\n                  children: [_jsx(TouchableOpacity, {\n                    onPress: function onPress() {\n                      return history.push(\"/authed/report/employeesreport\");\n                    },\n                    children: _jsx(Entypo, {\n                      name: \"chevron-thin-left\",\n                      size: 24,\n                      color: \"black\"\n                    })\n                  }), _jsx(\"div\", {\n                    className: \"col-lg-3 col-sm-6 col-12\",\n                    style: {\n                      marginLeft: 20\n                    },\n                    children: _jsxs(\"div\", {\n                      className: \"form-group\",\n                      children: [_jsx(\"label\", {\n                        children: \"Employee Name\"\n                      }), _jsx(\"input\", {\n                        type: \"text\",\n                        placeholder: \"Employee Name\",\n                        value: employee == null ? void 0 : employee.name,\n                        onChange: function onChange(event) {\n                          return setemployee(function (prevState) {\n                            return _objectSpread(_objectSpread({}, prevState), {}, {\n                              name: event.target.value\n                            });\n                          });\n                        },\n                        onBlur: handleDataUpdate\n                      })]\n                    })\n                  }), _jsx(View, {\n                    style: {\n                      width: 10\n                    }\n                  }), _jsx(\"div\", {\n                    className: \"col-lg-3 col-sm-6 col-12\",\n                    children: _jsxs(\"div\", {\n                      className: \"form-group\",\n                      children: [_jsx(\"label\", {\n                        children: \"Employee Pin\"\n                      }), _jsx(\"input\", {\n                        type: \"text\",\n                        placeholder: \"Employee Pin\",\n                        value: employee == null ? void 0 : employee.pin,\n                        onChange: function onChange(event) {\n                          return setemployee(function (prevState) {\n                            return _objectSpread(_objectSpread({}, prevState), {}, {\n                              pin: event.target.value\n                            });\n                          });\n                        },\n                        onBlur: handleDataUpdate\n                      })]\n                    })\n                  })]\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).delete();\n                    var newEmployeesList = _toConsumableArray(employees);\n                    var filteredEmployeesList = newEmployeesList.filter(function (e) {\n                      return e.id !== employee.id;\n                    });\n                    setEmployeesState(filteredEmployeesList);\n                    history.push(\"/authed/report/employeesreport\");\n                  },\n                  style: tw.style(['bg-red-500', 'p-2', 'rounded-md']),\n                  children: _jsx(Text, {\n                    style: tw.style(['text-white']),\n                    children: \"Remove Employee\"\n                  })\n                })]\n              }), _jsxs(View, {\n                style: {\n                  marginBottom: 50\n                },\n                children: [_jsx(Text, {\n                  children: \"Add Hours\"\n                }), _jsxs(View, {\n                  style: {\n                    flexDirection: 'row',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    width: '100%',\n                    marginTop: 10\n                  },\n                  children: [_jsxs(View, {\n                    style: {\n                      flexDirection: 'row',\n                      alignItems: 'center'\n                    },\n                    children: [_jsx(Text, {\n                      children: \"Date:\"\n                    }), _jsx(\"div\", {\n                      children: _jsx(\"input\", {\n                        id: \"dateSelected\",\n                        \"aria-label\": \"Date\",\n                        type: \"date\",\n                        onChange: function onChange(event) {\n                          console.log('event.target.value', event.target.value);\n                          var date = new Date(event.target.value.replace(/-/g, '\\/'));\n                          setdateSelected(date);\n                        }\n                      })\n                    })]\n                  }), _jsxs(View, {\n                    style: {\n                      flexDirection: 'row',\n                      alignItems: 'center'\n                    },\n                    children: [_jsx(Text, {\n                      children: \"Start Time:\"\n                    }), _jsx(\"div\", {\n                      children: _jsx(\"input\", {\n                        id: \"startTime\",\n                        \"aria-label\": \"Time\",\n                        type: \"time\",\n                        onChange: function onChange(event) {\n                          console.log('Time target value: ', event.target.value);\n                          setstartTime(event.target.value);\n                        }\n                      })\n                    })]\n                  }), _jsxs(View, {\n                    style: {\n                      flexDirection: 'row',\n                      alignItems: 'center'\n                    },\n                    children: [_jsx(Text, {\n                      children: \"End Time:\"\n                    }), _jsx(\"div\", {\n                      children: _jsx(\"input\", {\n                        id: \"endTime\",\n                        \"aria-label\": \"Time\",\n                        type: \"time\",\n                        onChange: function onChange(event) {\n                          return setendTime(event.target.value);\n                        }\n                      })\n                    })]\n                  }), _jsx(TouchableOpacity, {\n                    onPress: function onPress() {\n                      if (!dateSelected || !startTime || !endTime) return;\n                      console.log('dateSelected in add button: ', dateSelected);\n                      db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").add({\n                        date: dateSelected,\n                        startTime: startTime,\n                        endTime: endTime,\n                        paid: false\n                      }).then(function (docRef) {\n                        setallHours([].concat(_toConsumableArray(allHours), [{\n                          date: dateSelected,\n                          startTime: startTime,\n                          endTime: endTime,\n                          id: docRef.id,\n                          paid: false\n                        }]));\n                      });\n                      setdateSelected(null);\n                      setstartTime(null);\n                      setendTime(null);\n                      document.getElementById('dateSelected').value = null;\n                      document.getElementById('startTime').value = null;\n                      document.getElementById('endTime').value = null;\n                    },\n                    style: tw.style(['bg-blue-500', 'p-2', 'rounded-md']),\n                    children: _jsx(Text, {\n                      style: tw.style(['text-white']),\n                      children: \"Add\"\n                    })\n                  })]\n                }), _jsxs(View, {\n                  style: {\n                    marginTop: 50\n                  },\n                  children: [_jsx(Text, {\n                    children: \"Unpaid\"\n                  }), _jsxs(View, {\n                    style: {\n                      flexDirection: 'row',\n                      alignItems: 'center',\n                      justifyContent: 'space-between',\n                      marginBottom: 20\n                    },\n                    children: [_jsx(View, {\n                      style: {\n                        alignItems: 'center',\n                        flex: 1\n                      },\n                      children: _jsx(\"input\", {\n                        id: \"unPaidCheckAll\",\n                        value: unPaidSelected.length === allHours.filter(function (e) {\n                          return !e.paid;\n                        }).length ? true : false,\n                        \"aria-label\": \"Checkbox\",\n                        type: \"checkbox\",\n                        onChange: function onChange(event) {\n                          if (unPaidSelected.length === allHours.filter(function (e) {\n                            return !e.paid;\n                          }).length) {\n                            setunPaidSelected([]);\n                          } else {\n                            setunPaidSelected(allHours.filter(function (e) {\n                              return !e.paid;\n                            }));\n                          }\n                        }\n                      })\n                    }), _jsxs(View, {\n                      style: {\n                        alignItems: 'center',\n                        flex: 2\n                      },\n                      children: [\" \", _jsx(Text, {\n                        children: \"Date\"\n                      }), \" \"]\n                    }), _jsxs(View, {\n                      style: {\n                        alignItems: 'center',\n                        flex: 1\n                      },\n                      children: [\" \", _jsx(Text, {\n                        children: \"Clock In\"\n                      })]\n                    }), _jsxs(View, {\n                      style: {\n                        alignItems: 'center',\n                        flex: 1\n                      },\n                      children: [\" \", _jsx(Text, {\n                        children: \"Clock Out\"\n                      })]\n                    }), _jsxs(View, {\n                      style: {\n                        alignItems: 'center',\n                        flex: 2,\n                        flexDirection: 'row',\n                        justifyContent: 'flex-end'\n                      },\n                      children: [_jsx(TouchableOpacity, {\n                        onPress: function onPress() {\n                          var newHours = _toConsumableArray(allHours);\n                          unPaidSelected.forEach(function (hour) {\n                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete();\n                            newHours.splice(allHours.indexOf(hour), 1);\n                          });\n                          setallHours(function (prev) {\n                            return prev.filter(function (e) {\n                              return !unPaidSelected.includes(e);\n                            });\n                          });\n                          setunPaidSelected([]);\n                          document.getElementById('unPaidCheckAll').checked = false;\n                        },\n                        style: tw.style(['bg-red-500', 'p-2', 'rounded-md']),\n                        children: _jsx(Text, {\n                          style: tw.style(['text-white']),\n                          children: \"Delete\"\n                        })\n                      }), _jsx(View, {\n                        style: {\n                          width: 10\n                        }\n                      }), _jsx(TouchableOpacity, {\n                        onPress: function onPress() {\n                          var newHours = _toConsumableArray(allHours);\n                          unPaidSelected.forEach(function (hour) {\n                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                              paid: true\n                            });\n                            newHours[allHours.indexOf(hour)].paid = true;\n                          });\n                          setallHours(newHours);\n                          setunPaidSelected([]);\n                          document.getElementById('unPaidCheckAll').checked = false;\n                        },\n                        style: tw.style(['bg-blue-500', 'p-2', 'rounded-md']),\n                        children: _jsx(Text, {\n                          style: tw.style(['text-white']),\n                          children: \"Mark as Paid\"\n                        })\n                      })]\n                    })]\n                  }), _jsx(View, {\n                    style: {\n                      width: '100%',\n                      height: 1,\n                      backgroundColor: 'black',\n                      marginBottom: 10\n                    }\n                  }), allHours.length > 0 && allHours.map(function (hour, index) {\n                    if (hour.paid) return;\n                    var date = hour.date.seconds ? new Date(hour.date.seconds * 1000) : new Date(hour.date);\n                    var isChecked = unPaidSelected.filter(function (e) {\n                      return e.id === hour.id;\n                    }).length > 0;\n                    var ref = document.getElementById(`unpaidSelected${index}`);\n                    if (ref) {\n                      if (isChecked) {\n                        document.getElementById(`unpaidSelected${index}`).checked = true;\n                      } else {\n                        document.getElementById(`unpaidSelected${index}`).checked = false;\n                      }\n                    }\n                    return _jsxs(View, {\n                      style: {\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                        marginBottom: 10\n                      },\n                      children: [_jsxs(View, {\n                        style: {\n                          alignItems: 'center',\n                          flex: 1\n                        },\n                        children: [\" \", _jsx(\"input\", {\n                          value: isChecked,\n                          id: `unpaidSelected${index}`,\n                          \"aria-label\": \"Checkbox\",\n                          type: \"checkbox\",\n                          onChange: function onChange(event) {\n                            if (isChecked) {\n                              setunPaidSelected(function (prev) {\n                                return prev.filter(function (item) {\n                                  return item !== hour;\n                                });\n                              });\n                            } else {\n                              setunPaidSelected(function (prev) {\n                                return [].concat(_toConsumableArray(prev), [hour]);\n                              });\n                            }\n                          }\n                        })]\n                      }), _jsxs(View, {\n                        style: {\n                          alignItems: 'center',\n                          flex: 2\n                        },\n                        children: [\" \", _jsx(Text, {\n                          children: date.toDateString()\n                        }), \" \"]\n                      }), _jsxs(View, {\n                        style: {\n                          alignItems: 'center',\n                          flex: 1\n                        },\n                        children: [\" \", _jsx(Text, {\n                          children: hour.startTime\n                        })]\n                      }), _jsxs(View, {\n                        style: {\n                          alignItems: 'center',\n                          flex: 1\n                        },\n                        children: [\" \", _jsx(Text, {\n                          children: hour.endTime\n                        })]\n                      }), _jsxs(View, {\n                        style: {\n                          alignItems: 'center',\n                          flex: 2,\n                          flexDirection: 'row',\n                          justifyContent: 'flex-end'\n                        },\n                        children: [_jsx(TouchableOpacity, {\n                          onPress: function onPress() {\n                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete();\n                            var newHours = _toConsumableArray(allHours);\n                            newHours.splice(index, 1);\n                            setallHours(newHours);\n                          },\n                          style: tw.style(['bg-red-500', 'p-2', 'rounded-md']),\n                          children: _jsx(Text, {\n                            style: tw.style(['text-white']),\n                            children: \"Delete\"\n                          })\n                        }), _jsx(View, {\n                          style: {\n                            width: 10\n                          }\n                        }), _jsx(TouchableOpacity, {\n                          onPress: function onPress() {\n                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                              paid: true\n                            });\n                            var newHours = _toConsumableArray(allHours);\n                            newHours[index].paid = true;\n                            setallHours(newHours);\n                          },\n                          style: tw.style(['bg-blue-500', 'p-2', 'rounded-md']),\n                          children: _jsx(Text, {\n                            style: tw.style(['text-white']),\n                            children: \"Mark as Paid\"\n                          })\n                        })]\n                      })]\n                    }, index);\n                  })]\n                }), _jsxs(View, {\n                  style: {\n                    marginTop: 50\n                  },\n                  children: [_jsx(Text, {\n                    children: \"Paid\"\n                  }), _jsxs(View, {\n                    style: {\n                      flexDirection: 'row',\n                      alignItems: 'center',\n                      justifyContent: 'space-between',\n                      marginBottom: 20\n                    },\n                    children: [_jsxs(View, {\n                      style: {\n                        alignItems: 'center',\n                        flex: 1\n                      },\n                      children: [\" \", _jsx(\"input\", {\n                        id: \"paidCheckAll\",\n                        value: paidSelected.length === allHours.filter(function (e) {\n                          return e.paid;\n                        }).length ? true : false,\n                        \"aria-label\": \"Checkbox\",\n                        type: \"checkbox\",\n                        onChange: function onChange(event) {\n                          if (paidSelected.length === allHours.filter(function (e) {\n                            return e.paid;\n                          }).length) {\n                            setpaidSelected([]);\n                          } else {\n                            setpaidSelected(allHours.filter(function (e) {\n                              return e.paid;\n                            }));\n                          }\n                        }\n                      })]\n                    }), _jsxs(View, {\n                      style: {\n                        alignItems: 'center',\n                        flex: 2\n                      },\n                      children: [\" \", _jsx(Text, {\n                        children: \"Date\"\n                      }), \" \"]\n                    }), _jsxs(View, {\n                      style: {\n                        alignItems: 'center',\n                        flex: 1\n                      },\n                      children: [\" \", _jsx(Text, {\n                        children: \"Clock In\"\n                      })]\n                    }), _jsxs(View, {\n                      style: {\n                        alignItems: 'center',\n                        flex: 1\n                      },\n                      children: [\" \", _jsx(Text, {\n                        children: \"Clock Out\"\n                      })]\n                    }), _jsxs(View, {\n                      style: {\n                        alignItems: 'center',\n                        flex: 2,\n                        flexDirection: 'row',\n                        justifyContent: 'flex-end'\n                      },\n                      children: [_jsx(TouchableOpacity, {\n                        onPress: function onPress() {\n                          var newHours = _toConsumableArray(allHours);\n                          paidSelected.forEach(function (hour) {\n                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete();\n                            newHours.splice(allHours.indexOf(hour), 1);\n                          });\n                          setallHours(function (prev) {\n                            return prev.filter(function (e) {\n                              return !paidSelected.includes(e);\n                            });\n                          });\n                          setpaidSelected([]);\n                          document.getElementById('paidCheckAll').checked = false;\n                        },\n                        style: tw.style(['bg-red-500', 'p-2', 'rounded-md']),\n                        children: _jsx(Text, {\n                          style: tw.style(['text-white']),\n                          children: \"Delete\"\n                        })\n                      }), _jsx(View, {\n                        style: {\n                          width: 10\n                        }\n                      }), _jsx(TouchableOpacity, {\n                        onPress: function onPress() {\n                          var newHours = _toConsumableArray(allHours);\n                          paidSelected.forEach(function (hour) {\n                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                              paid: false\n                            });\n                            newHours[allHours.indexOf(hour)].paid = false;\n                          });\n                          setallHours(newHours);\n                          setpaidSelected([]);\n                          document.getElementById('paidCheckAll').checked = false;\n                        },\n                        style: tw.style(['bg-blue-500', 'p-2', 'rounded-md']),\n                        children: _jsx(Text, {\n                          style: tw.style(['text-white']),\n                          children: \"Mark as unPaid\"\n                        })\n                      })]\n                    })]\n                  }), _jsx(View, {\n                    style: {\n                      width: '100%',\n                      height: 1,\n                      backgroundColor: 'black',\n                      marginBottom: 10\n                    }\n                  }), allHours.length > 0 && allHours.map(function (hour, index) {\n                    if (!hour.paid) return;\n                    var date = hour.date.seconds ? new Date(hour.date.seconds * 1000) : new Date(hour.date);\n                    var isChecked = paidSelected.filter(function (e) {\n                      return e.id === hour.id;\n                    }).length > 0;\n                    var ref = document.getElementById(`paidSelected${index}`);\n                    if (ref) {\n                      if (isChecked) {\n                        document.getElementById(`paidSelected${index}`).checked = true;\n                      } else {\n                        document.getElementById(`paidSelected${index}`).checked = false;\n                      }\n                    }\n                    return _jsxs(View, {\n                      style: {\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                        marginBottom: 10\n                      },\n                      children: [_jsxs(View, {\n                        style: {\n                          alignItems: 'center',\n                          flex: 1\n                        },\n                        children: [\" \", _jsx(\"input\", {\n                          value: isChecked,\n                          id: `paidSelected${index}`,\n                          \"aria-label\": \"Checkbox\",\n                          type: \"checkbox\",\n                          onChange: function onChange(event) {\n                            if (isChecked) {\n                              setpaidSelected(function (prev) {\n                                return prev.filter(function (item) {\n                                  return item !== hour;\n                                });\n                              });\n                            } else {\n                              setpaidSelected(function (prev) {\n                                return [].concat(_toConsumableArray(prev), [hour]);\n                              });\n                            }\n                          }\n                        })]\n                      }), _jsxs(View, {\n                        style: {\n                          alignItems: 'center',\n                          flex: 2\n                        },\n                        children: [\" \", _jsx(Text, {\n                          children: date.toDateString()\n                        }), \" \"]\n                      }), _jsxs(View, {\n                        style: {\n                          alignItems: 'center',\n                          flex: 1\n                        },\n                        children: [\" \", _jsx(Text, {\n                          children: hour.startTime\n                        })]\n                      }), _jsxs(View, {\n                        style: {\n                          alignItems: 'center',\n                          flex: 1\n                        },\n                        children: [\" \", _jsx(Text, {\n                          children: hour.endTime\n                        })]\n                      }), _jsxs(View, {\n                        style: {\n                          alignItems: 'center',\n                          flex: 2,\n                          flexDirection: 'row',\n                          justifyContent: 'flex-end'\n                        },\n                        children: [_jsx(TouchableOpacity, {\n                          onPress: function onPress() {\n                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete();\n                            var newHours = _toConsumableArray(allHours);\n                            newHours.splice(index, 1);\n                            setallHours(newHours);\n                          },\n                          style: tw.style(['bg-red-500', 'p-2', 'rounded-md']),\n                          children: _jsx(Text, {\n                            style: tw.style(['text-white']),\n                            children: \"Delete\"\n                          })\n                        }), _jsx(View, {\n                          style: {\n                            width: 10\n                          }\n                        }), _jsx(TouchableOpacity, {\n                          onPress: function onPress() {\n                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                              paid: false\n                            });\n                            var newHours = _toConsumableArray(allHours);\n                            newHours[index].paid = false;\n                            setallHours(newHours);\n                          },\n                          style: tw.style(['bg-blue-500', 'p-2', 'rounded-md']),\n                          children: _jsx(Text, {\n                            style: tw.style(['text-white']),\n                            children: \"Mark as unPaid\"\n                          })\n                        })]\n                      })]\n                    }, index);\n                  })]\n                })]\n              })]\n            })\n          })\n        }), _jsx(Modal, {\n          visible: error,\n          transparent: true,\n          children: _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return seterror(false);\n            },\n            style: {\n              height: \"100%\",\n              width: \"100%\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              padding: \"20%\",\n              backgroundColor: \"rgba(0,0,0,0.5)\"\n            },\n            children: _jsx(\"div\", {\n              \"data-wf-user-form-error\": \"true\",\n              className: \" error-message \",\n              children: _jsx(\"div\", {\n                className: \"user-form-error-msg\",\n                children: error\n              })\n            })\n          })\n        })]\n      })\n    })\n  });\n};\nexport default EditEmployee;","map":{"version":3,"names":["React","useEffect","useState","employeesState","setEmployeesState","Modal","TouchableOpacity","View","useHistory","useParams","auth","db","Text","Entypo","tw","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","EditEmployee","_useParams","employeeId","employees","use","_useState","_useState2","_slicedToArray","employee","setemployee","_useState3","_useState4","dateSelected","setdateSelected","_useState5","_useState6","startTime","setstartTime","_useState7","_useState8","endTime","setendTime","_useState9","_useState10","allHours","setallHours","_useState11","_useState12","paidSelected","setpaidSelected","_useState13","_useState14","unPaidSelected","setunPaidSelected","history","_useState15","_useState16","error","seterror","length","myEmployee","filter","e","id","push","collection","doc","currentUser","uid","toString","get","then","snapshot","console","log","empty","hours","forEach","data","_objectSpread","handleDataUpdate","name","update","pin","newEmployeesList","_toConsumableArray","index","findIndex","children","className","style","flexDirection","alignItems","justifyContent","width","onPress","size","color","marginLeft","type","placeholder","value","onChange","event","prevState","target","onBlur","delete","filteredEmployeesList","marginBottom","marginTop","date","Date","replace","add","paid","docRef","concat","document","getElementById","flex","newHours","hour","splice","indexOf","prev","includes","checked","height","backgroundColor","map","seconds","isChecked","ref","item","toDateString","visible","transparent","padding"],"sources":["/Users/peterputros/Desktop/PosMate/pages/authed/backendPos/MainPage/report/EditEmployee.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport 'react-select2-wrapper/css/select2.css';\nimport { employeesState, setEmployeesState } from 'state/state';\nimport { Modal, TouchableOpacity, View } from 'react-native';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { auth, db } from 'state/firebaseConfig';\nimport { Text } from '@react-native-material/core';\nimport { Entypo } from '@expo/vector-icons';\nimport tw from 'twrnc';\n\nconst EditEmployee = () => {\n    const { employeeId } = useParams()\n    const employees = employeesState.use()\n    const [employee, setemployee] = useState(null);\n    const [dateSelected, setdateSelected] = useState(null)\n    const [startTime, setstartTime] = useState(null)\n    const [endTime, setendTime] = useState(null)\n    const [allHours, setallHours] = useState([])\n    const [paidSelected, setpaidSelected] = useState([])\n    const [unPaidSelected, setunPaidSelected] = useState([])\n\n    const history = useHistory();\n    const [error, seterror] = useState(false)\n\n    useEffect(() => {\n        if (employees.length > 0) {\n            const myEmployee = employees.filter(e => e.id === employeeId)[0]\n\n            if (!myEmployee) {\n                history.push(\"/authed/report/employeesreport\")\n                return\n            }\n\n            setemployee(myEmployee)\n            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(myEmployee.id.toString()).collection(\"hours\").get().then((snapshot) => {\n                console.log('Made it before empty check')\n                if (snapshot.empty) return\n                const hours = []\n                snapshot.forEach((doc) => {\n                    console.log('doc.data()', doc.data())\n                    hours.push({ ...doc.data(), id: doc.id })\n                })\n                setallHours(hours)\n            }\n            )\n        } else {\n            history.push(\"/authed/report/employeesreport\")\n            return\n        }\n    }, [])\n\n    useEffect(() => {\n        console.log('All Hours: ', allHours)\n        console.log('Paid Selected: ', paidSelected)\n        console.log('Unpaid Selected: ', unPaidSelected)\n\n    }, [allHours, paidSelected, unPaidSelected])\n\n\n\n    function handleDataUpdate() {\n        if (!employee.name) {\n            seterror('Please enter a employee name')\n            return\n        }\n        db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).update({\n            name: employee.name,\n            pin: employee.pin\n        })\n        const newEmployeesList = [...employees]\n        const index = newEmployeesList.findIndex(e => e.id === employee.id)\n        newEmployeesList[index] = employee\n        setEmployeesState(newEmployeesList)\n        // history.push(\"/authed/report/employeesreport\")\n    }\n\n    return (\n        <>\n            <div className=\"page-wrapper\">\n                <div className=\"content\">\n                    <div className=\"page-header\">\n                        <div className=\"page-title\">\n                            <h4>Employee Edit</h4>\n                            <h6>Edit your employee details</h6>\n                        </div>\n                    </div>\n                    {/* /add */}\n                    {employee && <div className=\"card\">\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }}>\n                                    <View style={{ flexDirection: 'row', alignItems: 'center', width: '80%' }}>\n                                        <TouchableOpacity onPress={() => history.push(\"/authed/report/employeesreport\")} >\n                                            <Entypo name=\"chevron-thin-left\" size={24} color=\"black\" />\n                                        </TouchableOpacity>\n                                        <div className=\"col-lg-3 col-sm-6 col-12\" style={{ marginLeft: 20 }}>\n                                            <div className=\"form-group\">\n                                                <label>Employee Name</label>\n                                                <input type=\"text\" placeholder=\"Employee Name\" value={employee?.name} onChange={(event) => setemployee((prevState) => ({\n                                                    ...prevState,\n                                                    name: event.target.value,\n                                                }))} onBlur={handleDataUpdate} />\n                                            </div>\n                                        </div>\n                                        <View style={{ width: 10 }} />\n                                        <div className=\"col-lg-3 col-sm-6 col-12\">\n                                            <div className=\"form-group\">\n                                                <label>Employee Pin</label>\n                                                <input type=\"text\" placeholder=\"Employee Pin\" value={employee?.pin} onChange={(event) => setemployee((prevState) => ({\n                                                    ...prevState,\n                                                    pin: event.target.value,\n                                                }))} onBlur={handleDataUpdate} />\n                                            </div>\n                                        </div>\n                                    </View>\n\n                                    <TouchableOpacity\n                                        onPress={() => {\n                                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).delete()\n                                            const newEmployeesList = [...employees]\n                                            const filteredEmployeesList = newEmployeesList.filter(e => e.id !== employee.id)\n                                            setEmployeesState(filteredEmployeesList)\n                                            history.push(\"/authed/report/employeesreport\")\n                                        }}\n                                        style={tw.style(['bg-red-500', 'p-2', 'rounded-md'])}\n                                    >\n                                        <Text style={tw.style(['text-white'])}>Remove Employee</Text>\n                                    </TouchableOpacity>\n                                </View>\n\n                                <View style={{ marginBottom: 50 }}>\n                                    <Text>Add Hours</Text>\n                                    <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', width: '100%', marginTop: 10 }}>\n                                        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                                            <Text>Date:</Text>\n                                            <div>\n                                                <input id='dateSelected' aria-label=\"Date\" type=\"date\" onChange={(event) => {\n                                                    console.log('event.target.value', event.target.value)\n                                                    const date = new Date(event.target.value.replace(/-/g, '\\/'));\n                                                    setdateSelected(date)\n                                                }\n                                                } />\n                                            </div>\n                                        </View>\n                                        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                                            <Text>Start Time:</Text>\n                                            <div>\n                                                <input id='startTime' aria-label=\"Time\" type=\"time\" onChange={(event) => {\n                                                    console.log('Time target value: ', event.target.value)\n                                                    setstartTime(event.target.value)\n                                                }\n                                                } />\n                                            </div>\n                                        </View>\n                                        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                                            <Text>End Time:</Text>\n                                            <div>\n                                                <input id='endTime' aria-label=\"Time\" type=\"time\" onChange={event => setendTime(event.target.value)} />\n                                            </div>\n                                        </View>\n                                        <TouchableOpacity\n                                            onPress={() => {\n                                                if (!dateSelected || !startTime || !endTime) return\n                                                console.log('dateSelected in add button: ', dateSelected)\n                                                db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").add({\n                                                    date: dateSelected,\n                                                    startTime: startTime,\n                                                    endTime: endTime,\n                                                    paid: false\n                                                }).then((docRef) => {\n                                                    setallHours([...allHours, {\n                                                        date: dateSelected,\n                                                        startTime: startTime,\n                                                        endTime: endTime,\n                                                        id: docRef.id,\n                                                        paid: false\n                                                    }])\n                                                })\n                                                setdateSelected(null)\n                                                setstartTime(null)\n                                                setendTime(null)\n                                                document.getElementById('dateSelected').value = null\n                                                document.getElementById('startTime').value = null\n                                                document.getElementById('endTime').value = null\n                                            }}\n                                            style={tw.style(['bg-blue-500', 'p-2', 'rounded-md'])}\n                                        >\n                                            <Text style={tw.style(['text-white'])}>Add</Text>\n                                        </TouchableOpacity>\n                                    </View>\n                                    <View style={{ marginTop: 50 }}>\n                                        <Text>Unpaid</Text>\n                                        <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: 20 }}>\n                                            <View style={{ alignItems: 'center', flex: 1 }}>\n                                                <input id=\"unPaidCheckAll\" value={unPaidSelected.length === allHours.filter(e => !e.paid).length ? true : false} aria-label=\"Checkbox\" type=\"checkbox\" onChange={(event) => {\n                                                    if (unPaidSelected.length === allHours.filter(e => !e.paid).length) {\n                                                        setunPaidSelected([])\n                                                    } else {\n                                                        setunPaidSelected(allHours.filter(e => !e.paid))\n                                                    }\n                                                }} />\n                                            </View>\n                                            <View style={{ alignItems: 'center', flex: 2 }}> <Text>Date</Text> </View>\n                                            <View style={{ alignItems: 'center', flex: 1 }}> <Text>Clock In</Text></View>\n                                            <View style={{ alignItems: 'center', flex: 1 }}> <Text>Clock Out</Text></View>\n                                            <View style={{ alignItems: 'center', flex: 2, flexDirection: 'row', justifyContent: 'flex-end' }}>\n                                                <TouchableOpacity onPress={() => {\n                                                    const newHours = [...allHours]\n                                                    unPaidSelected.forEach(hour => {\n                                                        db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete()\n                                                        newHours.splice(allHours.indexOf(hour), 1)\n                                                    }\n                                                    )\n                                                    setallHours(prev => prev.filter(e => !unPaidSelected.includes(e)))\n                                                    setunPaidSelected([])\n                                                    document.getElementById('unPaidCheckAll').checked = false;\n                                                }}\n                                                    style={tw.style(['bg-red-500', 'p-2', 'rounded-md'])}\n                                                >\n                                                    <Text style={tw.style(['text-white'])}>Delete</Text>\n                                                </TouchableOpacity>\n                                                <View style={{ width: 10 }} />\n                                                {/* <Button title='Mark as Paid' onPress={() => {\n                                                    const newHours = [...allHours]\n                                                    unPaidSelected.forEach(hour => {\n                                                        db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                                                            paid: true\n                                                        })\n                                                        newHours[allHours.indexOf(hour)].paid = true\n                                                    }\n                                                    )\n                                                    setallHours(newHours)\n                                                    setunPaidSelected([])\n                                                    document.getElementById('unPaidCheckAll').checked = false;\n                                                }\n                                                } /> */}\n                                                <TouchableOpacity onPress={() => {\n                                                    const newHours = [...allHours]\n                                                    unPaidSelected.forEach(hour => {\n                                                        db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                                                            paid: true\n                                                        })\n                                                        newHours[allHours.indexOf(hour)].paid = true\n                                                    }\n                                                    )\n                                                    setallHours(newHours)\n                                                    setunPaidSelected([])\n                                                    document.getElementById('unPaidCheckAll').checked = false;\n                                                }}\n                                                    style={tw.style(['bg-blue-500', 'p-2', 'rounded-md'])}\n                                                >\n                                                    <Text style={tw.style(['text-white'])}>Mark as Paid</Text>\n                                                </TouchableOpacity>\n                                            </View>\n                                        </View>\n                                        <View style={{ width: '100%', height: 1, backgroundColor: 'black', marginBottom: 10 }} />\n                                        {allHours.length > 0 && allHours.map((hour, index) => {\n                                            if (hour.paid) return\n\n                                            const date = hour.date.seconds ? new Date(hour.date.seconds * 1000) : new Date(hour.date)\n                                            const isChecked = unPaidSelected.filter(e => e.id === hour.id).length > 0\n                                            const ref = document.getElementById(`unpaidSelected${index}`)\n\n                                            if (ref) {\n                                                if (isChecked) {\n                                                    document.getElementById(`unpaidSelected${index}`).checked = true;\n                                                } else {\n                                                    document.getElementById(`unpaidSelected${index}`).checked = false;\n                                                }\n                                            }\n\n                                            return (\n                                                <View key={index} style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: 10 }}>\n                                                    <View style={{ alignItems: 'center', flex: 1 }}> <input value={isChecked} id={`unpaidSelected${index}`} aria-label=\"Checkbox\" type=\"checkbox\" onChange={(event) => {\n                                                        if (isChecked) {\n                                                            setunPaidSelected(prev => prev.filter((item) => item !== hour))\n                                                        } else {\n                                                            setunPaidSelected(prev => [...prev, hour])\n                                                        }\n                                                    }} /></View>\n                                                    <View style={{ alignItems: 'center', flex: 2 }}> <Text>{date.toDateString()}</Text> </View>\n                                                    <View style={{ alignItems: 'center', flex: 1 }}> <Text>{hour.startTime}</Text></View>\n                                                    <View style={{ alignItems: 'center', flex: 1 }}> <Text>{hour.endTime}</Text></View>\n                                                    <View style={{ alignItems: 'center', flex: 2, flexDirection: 'row', justifyContent: 'flex-end' }}>\n                                                        {/* <Button title=\"Delete\" onPress={() => {\n                                                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete()\n                                                            const newHours = [...allHours]\n                                                            newHours.splice(index, 1)\n                                                            setallHours(newHours)\n                                                        }\n                                                        } /> */}\n                                                        <TouchableOpacity\n                                                            onPress={() => {\n                                                                db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete()\n                                                                const newHours = [...allHours]\n                                                                newHours.splice(index, 1)\n                                                                setallHours(newHours)\n                                                            }}\n                                                            style={tw.style(['bg-red-500', 'p-2', 'rounded-md'])}\n                                                        >\n                                                            <Text style={tw.style(['text-white'])}>Delete</Text>\n                                                        </TouchableOpacity>\n                                                        <View style={{ width: 10 }} />\n                                                        {/* <Button title='Mark as Paid' onPress={() => {\n                                                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                                                                paid: true\n                                                            })\n                                                            const newHours = [...allHours]\n                                                            newHours[index].paid = true\n                                                            setallHours(newHours)\n                                                        }\n                                                        } /> */}\n                                                        <TouchableOpacity onPress={() => {\n                                                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                                                                paid: true\n                                                            })\n                                                            const newHours = [...allHours]\n                                                            newHours[index].paid = true\n                                                            setallHours(newHours)\n                                                        }}\n                                                            style={tw.style(['bg-blue-500', 'p-2', 'rounded-md'])}\n                                                        >\n                                                            <Text style={tw.style(['text-white'])}>Mark as Paid</Text>\n                                                        </TouchableOpacity>\n                                                    </View>\n                                                </View>\n                                            )\n                                        }\n                                        )}\n                                    </View>\n                                    <View style={{ marginTop: 50 }}>\n                                        <Text>Paid</Text>\n                                        <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: 20 }}>\n                                            <View style={{ alignItems: 'center', flex: 1 }}> <input id=\"paidCheckAll\" value={paidSelected.length === allHours.filter(e => e.paid).length ? true : false} aria-label=\"Checkbox\" type=\"checkbox\" onChange={(event) => {\n                                                if (paidSelected.length === allHours.filter(e => e.paid).length) {\n                                                    setpaidSelected([])\n                                                } else {\n                                                    setpaidSelected(allHours.filter(e => e.paid))\n                                                }\n                                            }} /></View>\n                                            <View style={{ alignItems: 'center', flex: 2 }}> <Text>Date</Text> </View>\n                                            <View style={{ alignItems: 'center', flex: 1 }}> <Text>Clock In</Text></View>\n                                            <View style={{ alignItems: 'center', flex: 1 }}> <Text>Clock Out</Text></View>\n                                            <View style={{ alignItems: 'center', flex: 2, flexDirection: 'row', justifyContent: 'flex-end' }}>\n                                                {/* <Button title=\"Delete\" onPress={() => {\n                                                    const newHours = [...allHours]\n                                                    paidSelected.forEach(hour => {\n                                                        db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete()\n                                                        newHours.splice(allHours.indexOf(hour), 1)\n                                                    }\n                                                    )\n                                                    setallHours(prev => prev.filter(e => !paidSelected.includes(e)))\n                                                    setpaidSelected([])\n                                                    document.getElementById('paidCheckAll').checked = false;\n                                                }\n                                                } /> */}\n                                                <TouchableOpacity onPress={() => {\n                                                    const newHours = [...allHours]\n                                                    paidSelected.forEach(hour => {\n                                                        db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete()\n                                                        newHours.splice(allHours.indexOf(hour), 1)\n                                                    }\n                                                    )\n                                                    setallHours(prev => prev.filter(e => !paidSelected.includes(e)))\n                                                    setpaidSelected([])\n                                                    document.getElementById('paidCheckAll').checked = false;\n                                                }}\n                                                    style={tw.style(['bg-red-500', 'p-2', 'rounded-md'])}\n                                                >\n                                                    <Text style={tw.style(['text-white'])}>Delete</Text>\n                                                </TouchableOpacity>\n                                                <View style={{ width: 10 }} />\n                                                {/* <Button title='Mark as unPaid' onPress={() => {\n                                                    const newHours = [...allHours]\n                                                    paidSelected.forEach(hour => {\n                                                        db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                                                            paid: false\n                                                        })\n                                                        newHours[allHours.indexOf(hour)].paid = false\n                                                    }\n                                                    )\n                                                    setallHours(newHours)\n                                                    setpaidSelected([])\n                                                    document.getElementById('paidCheckAll').checked = false;\n                                                }\n                                                } /> */}\n                                                <TouchableOpacity\n                                                    onPress={() => {\n                                                    const newHours = [...allHours]\n                                                    paidSelected.forEach(hour => {\n                                                        db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                                                            paid: false\n                                                        })\n                                                        newHours[allHours.indexOf(hour)].paid = false\n                                                    }\n                                                    )\n                                                    setallHours(newHours)\n                                                    setpaidSelected([])\n                                                    document.getElementById('paidCheckAll').checked = false;\n                                                }}\n                                                    style={tw.style(['bg-blue-500', 'p-2', 'rounded-md'])}\n                                                >\n                                                    <Text style={tw.style(['text-white'])}>Mark as unPaid</Text>\n                                                </TouchableOpacity>\n                                            </View>\n                                        </View>\n                                        <View style={{ width: '100%', height: 1, backgroundColor: 'black', marginBottom: 10 }} />\n                                        {allHours.length > 0 && allHours.map((hour, index) => {\n                                            if (!hour.paid) return\n\n                                            const date = hour.date.seconds ? new Date(hour.date.seconds * 1000) : new Date(hour.date)\n                                            const isChecked = paidSelected.filter(e => e.id === hour.id).length > 0\n                                            const ref = document.getElementById(`paidSelected${index}`)\n\n                                            if (ref) {\n                                                if (isChecked) {\n                                                    document.getElementById(`paidSelected${index}`).checked = true;\n                                                } else {\n                                                    document.getElementById(`paidSelected${index}`).checked = false;\n                                                }\n                                            }\n\n                                            return (\n                                                <View key={index} style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', marginBottom: 10 }}>\n                                                    <View style={{ alignItems: 'center', flex: 1 }}> <input value={isChecked} id={`paidSelected${index}`} aria-label=\"Checkbox\" type=\"checkbox\" onChange={(event) => {\n                                                        if (isChecked) {\n                                                            setpaidSelected(prev => prev.filter((item) => item !== hour))\n                                                        } else {\n                                                            setpaidSelected(prev => [...prev, hour])\n                                                        }\n                                                    }} /></View>\n                                                    <View style={{ alignItems: 'center', flex: 2 }}> <Text>{date.toDateString()}</Text> </View>\n                                                    <View style={{ alignItems: 'center', flex: 1 }}> <Text>{hour.startTime}</Text></View>\n                                                    <View style={{ alignItems: 'center', flex: 1 }}> <Text>{hour.endTime}</Text></View>\n                                                    <View style={{ alignItems: 'center', flex: 2, flexDirection: 'row', justifyContent: 'flex-end' }}>\n                                                        {/* <Button title=\"Delete\" onPress={() => {\n                                                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete()\n                                                            const newHours = [...allHours]\n                                                            newHours.splice(index, 1)\n                                                            setallHours(newHours)\n                                                        }\n                                                        } /> */}\n                                                        <TouchableOpacity onPress={() => {\n                                                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).delete()\n                                                            const newHours = [...allHours]\n                                                            newHours.splice(index, 1)\n                                                            setallHours(newHours)\n                                                        }}\n                                                            style={tw.style(['bg-red-500', 'p-2', 'rounded-md'])}\n                                                        >\n                                                            <Text style={tw.style(['text-white'])}>Delete</Text>\n                                                        </TouchableOpacity>\n                                                        <View style={{ width: 10 }} />\n                                                        {/* <Button title='Mark as unPaid' onPress={() => {\n                                                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                                                                paid: false\n                                                            })\n                                                            const newHours = [...allHours]\n                                                            newHours[index].paid = false\n                                                            setallHours(newHours)\n                                                        }\n                                                        } /> */}\n                                                        <TouchableOpacity\n                                                            onPress={() => {\n                                                            db.collection(\"users\").doc(auth.currentUser.uid).collection(\"employees\").doc(employee.id.toString()).collection(\"hours\").doc(hour.id.toString()).update({\n                                                                paid: false\n                                                            })\n                                                            const newHours = [...allHours]\n                                                            newHours[index].paid = false\n                                                            setallHours(newHours)\n                                                        }}\n                                                            style={tw.style(['bg-blue-500', 'p-2', 'rounded-md'])}\n                                                        >\n                                                            <Text style={tw.style(['text-white'])}>Mark as unPaid</Text>\n                                                        </TouchableOpacity>\n                                                    </View>\n                                                </View>\n                                            )\n                                        }\n                                        )}\n                                    </View>\n                                </View>\n\n                                {/* <div className=\"col-lg-12\">\n                                    <button className=\"btn btn-submit me-2\" onClick={handleDataUpdate}>\n                                        Update\n                                    </button>\n                                    <Link style={{ textDecoration: 'none' }} to=\"/authed/report/employeesreport\" className=\"btn btn-cancel\">\n                                        Cancel\n                                    </Link>\n                                </div> */}\n                            </div>\n                        </div>\n                    </div>}\n                    <Modal visible={error} transparent={true}>\n                        <TouchableOpacity\n                            onPress={() => seterror(false)}\n                            style={{\n                                height: \"100%\",\n                                width: \"100%\",\n                                justifyContent: \"center\",\n                                alignItems: \"center\",\n                                padding: \"20%\",\n                                backgroundColor: \"rgba(0,0,0,0.5)\",\n                            }}\n                        >\n                            <div\n                                data-wf-user-form-error=\"true\"\n                                className=\" error-message \"\n                            >\n                                <div className=\"user-form-error-msg\">\n                                    {error}\n                                </div>\n                            </div>\n                        </TouchableOpacity>\n                    </Modal>\n                    {/* /add */}\n                </div>\n            </div>\n        </>\n    )\n}\nexport default EditEmployee;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}