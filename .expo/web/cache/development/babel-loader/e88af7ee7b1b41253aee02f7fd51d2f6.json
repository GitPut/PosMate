{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState } from \"react\";\nimport { Button } from \"@react-native-material/core\";\nimport { addCartState } from \"../state/state\";\nimport ProductOptionDropDown from \"./ProductOptionDropDown\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DisplayTest = function DisplayTest(_ref) {\n  var product = _ref.product,\n    productIndex = _ref.productIndex;\n  var myObj = product;\n  var _useState = useState(myObj),\n    _useState2 = _slicedToArray(_useState, 2),\n    myObjProfile = _useState2[0],\n    setmyObjProfile = _useState2[1];\n  var _useState3 = useState(myObj.price),\n    _useState4 = _slicedToArray(_useState3, 2),\n    total = _useState4[0],\n    settotal = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    modalVisible = _useState6[0],\n    setModalVisible = _useState6[1];\n  var _useState7 = useState({\n      option: null,\n      listIndex: null\n    }),\n    _useState8 = _slicedToArray(_useState7, 2),\n    optionVal = _useState8[0],\n    setoptionVal = _useState8[1];\n  var DisplayOption = function DisplayOption(_ref2) {\n    var e = _ref2.e,\n      index = _ref2.index;\n    var isSelected = false;\n    var selectedCaseList = myObjProfile.options.filter(function (op) {\n      return op.label == e.selectedCaseKey;\n    });\n    var selectedValueList;\n    if (selectedCaseList.length > 0) {\n      selectedValueList = selectedCaseList[0].optionsList.filter(function (opL) {\n        return opL.label == e.selectedCaseValue;\n      });\n      if (selectedValueList.length > 0) {\n        isSelected = selectedValueList[0].selected === true;\n      }\n    }\n    if (e.selectedCaseKey === null || isSelected) {\n      return _jsxs(View, {\n        style: {\n          marginBottom: 25,\n          width: \"100%\"\n        },\n        children: [_jsxs(Text, {\n          style: {\n            fontWeight: \"700\",\n            fontSize: 18\n          },\n          children: [\"Label: \", e.label]\n        }), _jsx(ProductOptionDropDown, {\n          label: e.label,\n          options: e.optionsList,\n          setValue: function setValue(_ref3) {\n            var option = _ref3.option,\n              listIndex = _ref3.listIndex;\n            setoptionVal(option);\n            var newMyObjProfile = structuredClone(myObjProfile);\n            if (!newMyObjProfile.options[index].optionsList[listIndex].selected == false) {\n              newMyObjProfile.options[index].optionsList[listIndex].selected = false;\n              settotal(function (prevState) {\n                return parseFloat(prevState) - parseFloat(newMyObjProfile.options[index].optionsList[listIndex].priceIncrease);\n              });\n            } else {\n              if (newMyObjProfile.options[index].optionsList.filter(function (op) {\n                return op.selected === true;\n              }).length < parseInt(e.numOfSelectable) || !e.numOfSelectable) {\n                newMyObjProfile.options[index].optionsList[listIndex].selected = true;\n                settotal(function (prevState) {\n                  return parseFloat(prevState) + parseFloat(newMyObjProfile.options[index].optionsList[listIndex].priceIncrease);\n                });\n              }\n            }\n            setmyObjProfile(newMyObjProfile);\n          },\n          value: optionVal,\n          style: {\n            marginBottom: 25\n          }\n        }), _jsx(View, {\n          style: {\n            flexWrap: \"wrap\",\n            flexDirection: \"row\"\n          },\n          children: e.optionsList.map(function (selection, listIndex) {\n            return _jsxs(TouchableOpacity, {\n              style: [myObjProfile.options[index].optionsList[listIndex].selected == true && {\n                backgroundColor: \"green\"\n              }, {\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                padding: 10,\n                margin: 5,\n                borderColor: \"black\",\n                borderWidth: 2\n              }],\n\n              onPress: function onPress() {\n                var newMyObjProfile = structuredClone(myObjProfile);\n                if (!newMyObjProfile.options[index].optionsList[listIndex].selected == false) {\n                  newMyObjProfile.options[index].optionsList[listIndex].selected = false;\n                  settotal(function (prevState) {\n                    return parseFloat(prevState) - parseFloat(newMyObjProfile.options[index].optionsList[listIndex].priceIncrease);\n                  });\n                } else {\n                  if (newMyObjProfile.options[index].optionsList.filter(function (op) {\n                    return op.selected === true;\n                  }).length < parseInt(e.numOfSelectable) || !e.numOfSelectable) {\n                    newMyObjProfile.options[index].optionsList[listIndex].selected = true;\n                    settotal(function (prevState) {\n                      return parseFloat(prevState) + parseFloat(newMyObjProfile.options[index].optionsList[listIndex].priceIncrease);\n                    });\n                  }\n                }\n                setmyObjProfile(newMyObjProfile);\n              },\n              children: [_jsxs(Text, {\n                style: styles.h2Black,\n                children: [\"Name: \", selection.label]\n              }), _jsx(View, {\n                style: {\n                  width: 20\n                }\n              }), _jsxs(Text, {\n                style: styles.h2Black,\n                children: [\"Price: $\", selection.priceIncrease]\n              })]\n            }, listIndex);\n          })\n        })]\n      }, index);\n    } else if (isSelected === false) {\n      var newMyObjProfile = structuredClone(myObjProfile);\n      var newSubtract = 0;\n      newMyObjProfile.options[index].optionsList.forEach(function (item, indexOfItem) {\n        if (item.selected === true) {\n          newSubtract += parseFloat(newMyObjProfile.options[index].optionsList[indexOfItem].priceIncrease);\n          newMyObjProfile.options[index].optionsList[indexOfItem].selected = false;\n        }\n      });\n      if (newSubtract > 0) {\n        settotal(function (prevState) {\n          return parseFloat(prevState) - newSubtract;\n        });\n        setmyObjProfile(newMyObjProfile);\n      }\n    }\n  };\n\n  var AddToCart = function AddToCart() {\n    var opsArray = [];\n    myObjProfile.options.forEach(function (op) {\n      var opWVal = op.label + \": \";\n      var numberOfSelected = op.optionsList.filter(function (f) {\n        return f.selected === true;\n      }).length;\n      if (numberOfSelected > 0) {\n        opWVal = op.label + \": \";\n        op.optionsList.map(function (e, index) {\n          if (e.selected === true) {\n            if (index < op.optionsList.length - 1 && numberOfSelected > 1) {\n              opWVal += e.label + \" , \";\n            } else {\n              opWVal += e.label;\n            }\n          }\n        });\n        opsArray.push(opWVal);\n      }\n    });\n    addCartState({\n      name: myObjProfile.name,\n      price: total.toFixed(2),\n      description: myObj.description,\n      options: opsArray\n    });\n    setModalVisible(false);\n    setmyObjProfile(myObj);\n    settotal(myObjProfile.price);\n  };\n  return _jsxs(View, {\n    children: [_jsx(Button, {\n      title: myObj.name,\n      onPress: function onPress() {\n        return setModalVisible(true);\n      },\n      style: styles.touchable\n    }), _jsx(Modal, {\n      visible: modalVisible,\n      children: _jsxs(ScrollView, {\n        style: styles.modalContainer,\n        children: [_jsxs(Text, {\n          style: styles.h2Black,\n          children: [\"Name: \", myObj.name]\n        }), _jsxs(Text, {\n          style: [{\n            marginBottom: 25\n          }, styles.h2Black],\n          children: [\"Price: \", total]\n        }), myObj.options.map(function (e, index) {\n          return _jsx(DisplayOption, {\n            e: e,\n            index: index\n          }, index);\n        }), _jsx(Button, {\n          title: \"Add To Cart\",\n          onPress: AddToCart,\n          style: styles.btn\n        }), _jsx(Button, {\n          title: \"Close\",\n          onPress: function onPress() {\n            return setModalVisible(false);\n          },\n          style: styles.btn\n        })]\n      })\n    })]\n  }, productIndex);\n};\nexport default DisplayTest;\nvar styles = StyleSheet.create({\n  sizeRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginBottom: 10\n  },\n  halfRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    width: \"50%\"\n  },\n  toppingsContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-between\",\n    marginBottom: 25,\n    marginTop: 25\n  },\n  touchable: {\n    margin: 25,\n    width: 300\n  },\n  modalContainer: {\n    padding: 50\n  },\n  btn: {\n    marginBottom: 25\n  },\n  dropDown: {\n    marginBottom: 25\n  },\n  h2White: {\n    fontSize: 17,\n    color: \"white\"\n  },\n  h2Black: {\n    fontSize: 20,\n    color: \"black\"\n  }\n});","map":{"version":3,"names":["React","useState","Button","addCartState","ProductOptionDropDown","DisplayTest","product","productIndex","myObj","myObjProfile","setmyObjProfile","price","total","settotal","modalVisible","setModalVisible","option","listIndex","optionVal","setoptionVal","DisplayOption","e","index","isSelected","selectedCaseList","options","filter","op","label","selectedCaseKey","selectedValueList","length","optionsList","opL","selectedCaseValue","selected","marginBottom","width","fontWeight","fontSize","newMyObjProfile","structuredClone","prevState","parseFloat","priceIncrease","parseInt","numOfSelectable","flexWrap","flexDirection","map","selection","backgroundColor","justifyContent","padding","margin","borderColor","borderWidth","styles","h2Black","newSubtract","forEach","item","indexOfItem","AddToCart","opsArray","opWVal","numberOfSelected","f","push","name","toFixed","description","touchable","modalContainer","btn","StyleSheet","create","sizeRow","alignItems","halfRow","toppingsContainer","flex","marginTop","dropDown","h2White","color"],"sources":["/Users/peterputros/Desktop/PosMate-1/components/DisplayTest.tsx"],"sourcesContent":["import {\n  Modal,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport React, { useState } from \"react\";\nimport { userStoreState } from \"state/state\";\nimport { Button } from \"@react-native-material/core\";\nimport { addCartState } from \"state/state\";\nimport ProductOptionDropDown from \"./ProductOptionDropDown\";\n\nconst DisplayTest = ({ product, productIndex }) => {\n  const myObj = product;\n  const [myObjProfile, setmyObjProfile] = useState(myObj);\n  const [total, settotal] = useState(myObj.price);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [optionVal, setoptionVal] = useState({\n    option: null,\n    listIndex: null,\n  });\n\n  const DisplayOption = ({ e, index }) => {\n    let isSelected = false;\n\n    const selectedCaseList = myObjProfile.options.filter(\n      (op) => op.label == e.selectedCaseKey\n    );\n\n    let selectedValueList;\n\n    if (selectedCaseList.length > 0) {\n      selectedValueList = selectedCaseList[0].optionsList.filter(\n        (opL) => opL.label == e.selectedCaseValue\n      );\n\n      if (selectedValueList.length > 0) {\n        isSelected = selectedValueList[0].selected === true;\n      }\n    }\n\n    if (e.selectedCaseKey === null || isSelected) {\n      // if (e.optionType === \"dropdown\") {\n      return (\n        <View\n          style={{\n            marginBottom: 25,\n            width: \"100%\",\n          }}\n          key={index}\n        >\n          <Text style={{ fontWeight: \"700\", fontSize: 18 }}>\n            Label: {e.label}\n          </Text>\n          <ProductOptionDropDown\n            label={e.label}\n            options={e.optionsList}\n            setValue={({ option, listIndex }) => {\n              setoptionVal(option);\n              const newMyObjProfile = structuredClone(myObjProfile);\n              if (\n                !newMyObjProfile.options[index].optionsList[listIndex]\n                  .selected == false\n              ) {\n                newMyObjProfile.options[index].optionsList[listIndex].selected =\n                  false;\n                settotal(\n                  (prevState) =>\n                    parseFloat(prevState) -\n                    parseFloat(\n                      newMyObjProfile.options[index].optionsList[listIndex]\n                        .priceIncrease\n                    )\n                );\n              } else {\n                if (\n                  newMyObjProfile.options[index].optionsList.filter(\n                    (op) => op.selected === true\n                  ).length < parseInt(e.numOfSelectable) ||\n                  !e.numOfSelectable\n                ) {\n                  newMyObjProfile.options[index].optionsList[\n                    listIndex\n                  ].selected = true;\n                  settotal(\n                    (prevState) =>\n                      parseFloat(prevState) +\n                      parseFloat(\n                        newMyObjProfile.options[index].optionsList[listIndex]\n                          .priceIncrease\n                      )\n                  );\n                }\n              }\n              setmyObjProfile(newMyObjProfile);\n            }}\n            value={optionVal}\n            style={{ marginBottom: 25 }}\n          />\n          <View style={{ flexWrap: \"wrap\", flexDirection: \"row\" }}>\n            {e.optionsList.map((selection, listIndex) => {\n              return (\n                <TouchableOpacity\n                  key={listIndex}\n                  style={[\n                    myObjProfile.options[index].optionsList[listIndex]\n                      .selected == true && {\n                      backgroundColor: \"green\",\n                    },\n                    {\n                      flexDirection: \"row\",\n                      justifyContent: \"space-between\",\n                      padding: 10,\n                      margin: 5,\n                      borderColor: \"black\",\n                      borderWidth: 2,\n                      // width: \"50%\",\n                    },\n                  ]}\n                  onPress={() => {\n                    const newMyObjProfile = structuredClone(myObjProfile);\n                    if (\n                      !newMyObjProfile.options[index].optionsList[listIndex]\n                        .selected == false\n                    ) {\n                      newMyObjProfile.options[index].optionsList[\n                        listIndex\n                      ].selected = false;\n                      settotal(\n                        (prevState) =>\n                          parseFloat(prevState) -\n                          parseFloat(\n                            newMyObjProfile.options[index].optionsList[\n                              listIndex\n                            ].priceIncrease\n                          )\n                      );\n                    } else {\n                      if (\n                        newMyObjProfile.options[index].optionsList.filter(\n                          (op) => op.selected === true\n                        ).length < parseInt(e.numOfSelectable) ||\n                        !e.numOfSelectable\n                      ) {\n                        newMyObjProfile.options[index].optionsList[\n                          listIndex\n                        ].selected = true;\n                        settotal(\n                          (prevState) =>\n                            parseFloat(prevState) +\n                            parseFloat(\n                              newMyObjProfile.options[index].optionsList[\n                                listIndex\n                              ].priceIncrease\n                            )\n                        );\n                      }\n                    }\n                    setmyObjProfile(newMyObjProfile);\n                  }}\n                >\n                  <Text style={styles.h2Black}>Name: {selection.label}</Text>\n                  <View style={{ width: 20 }} />\n                  <Text style={styles.h2Black}>\n                    Price: ${selection.priceIncrease}\n                  </Text>\n                </TouchableOpacity>\n              );\n            })}\n          </View>\n        </View>\n      );\n      // } else {\n      //   return (\n      //     <View\n      //       style={{\n      //         marginBottom: 25,\n      //         flexWrap: \"wrap\",\n      //         width: \"100%\",\n      //       }}\n      //       key={index}\n      //     >\n      //       <Text style={{ fontWeight: \"700\", fontSize: 18 }}>\n      //         Label: {e.label}\n      //       </Text>\n      //       <View style={{ flexWrap: \"wrap\", flexDirection: \"row\" }}>\n      //         {e.optionsList.map((selection, listIndex) => {\n      //           return (\n      //             <TouchableOpacity\n      //               key={listIndex}\n      //               style={[\n      //                 myObjProfile.options[index].optionsList[listIndex]\n      //                   .selected == true && {\n      //                   backgroundColor: \"green\",\n      //                 },\n      //                 {\n      //                   flexDirection: \"row\",\n      //                   justifyContent: \"space-between\",\n      //                   padding: 10,\n      //                   margin: 5,\n      //                   borderColor: \"black\",\n      //                   borderWidth: 2,\n      //                   // width: \"50%\",\n      //                 },\n      //               ]}\n      //               onPress={() => {\n      //                 const newMyObjProfile = structuredClone(myObjProfile);\n      //                 if (\n      //                   !newMyObjProfile.options[index].optionsList[listIndex]\n      //                     .selected == false\n      //                 ) {\n      //                   newMyObjProfile.options[index].optionsList[\n      //                     listIndex\n      //                   ].selected = false;\n      //                   settotal(\n      //                     (prevState) =>\n      //                       parseFloat(prevState) -\n      //                       parseFloat(\n      //                         newMyObjProfile.options[index].optionsList[\n      //                           listIndex\n      //                         ].priceIncrease\n      //                       )\n      //                   );\n      //                 } else {\n      //                   if (\n      //                     newMyObjProfile.options[index].optionsList.filter(\n      //                       (op) => op.selected === true\n      //                     ).length < parseInt(e.numOfSelectable) ||\n      //                     !e.numOfSelectable\n      //                   ) {\n      //                     newMyObjProfile.options[index].optionsList[\n      //                       listIndex\n      //                     ].selected = true;\n      //                     settotal(\n      //                       (prevState) =>\n      //                         parseFloat(prevState) +\n      //                         parseFloat(\n      //                           newMyObjProfile.options[index].optionsList[\n      //                             listIndex\n      //                           ].priceIncrease\n      //                         )\n      //                     );\n      //                   }\n      //                 }\n      //                 setmyObjProfile(newMyObjProfile);\n      //               }}\n      //             >\n      //               <Text style={styles.h2Black}>Name: {selection.label}</Text>\n      //               <View style={{ width: 20 }} />\n      //               <Text style={styles.h2Black}>\n      //                 Price: ${selection.priceIncrease}\n      //               </Text>\n      //             </TouchableOpacity>\n      //           );\n      //         })}\n      //       </View>\n      //     </View>\n      //   );\n      // }\n    } else if (isSelected === false) {\n      const newMyObjProfile = structuredClone(myObjProfile);\n      let newSubtract = 0;\n      newMyObjProfile.options[index].optionsList.forEach(\n        (item, indexOfItem) => {\n          if (item.selected === true) {\n            newSubtract += parseFloat(\n              newMyObjProfile.options[index].optionsList[indexOfItem]\n                .priceIncrease\n            );\n            newMyObjProfile.options[index].optionsList[indexOfItem].selected =\n              false;\n          }\n        }\n      );\n      if (newSubtract > 0) {\n        settotal((prevState) => parseFloat(prevState) - newSubtract);\n        setmyObjProfile(newMyObjProfile);\n      }\n    }\n    // return null;\n  };\n\n  const AddToCart = () => {\n    const opsArray = [];\n\n    myObjProfile.options.forEach((op) => {\n      let opWVal = `${op.label}: `;\n      const numberOfSelected = op.optionsList.filter(\n        (f) => f.selected === true\n      ).length;\n\n      if (numberOfSelected > 0) {\n        opWVal = `${op.label}: `;\n\n        op.optionsList.map((e, index) => {\n          if (e.selected === true) {\n            if (index < op.optionsList.length - 1 && numberOfSelected > 1) {\n              opWVal += e.label + \" , \";\n            } else {\n              opWVal += e.label;\n            }\n          }\n        });\n        opsArray.push(opWVal);\n      }\n    });\n\n    addCartState({\n      name: myObjProfile.name,\n      price: total.toFixed(2),\n      description: myObj.description,\n      options: opsArray,\n    });\n\n    setModalVisible(false);\n    setmyObjProfile(myObj);\n    settotal(myObjProfile.price);\n  };\n\n  return (\n    <View key={productIndex}>\n      <Button\n        title={myObj.name}\n        onPress={() => setModalVisible(true)}\n        style={styles.touchable}\n      />\n      <Modal visible={modalVisible}>\n        <ScrollView style={styles.modalContainer}>\n          <Text style={styles.h2Black}>Name: {myObj.name}</Text>\n          <Text style={[{ marginBottom: 25 }, styles.h2Black]}>\n            Price: {total}\n          </Text>\n          {myObj.options.map((e, index) => (\n            <DisplayOption e={e} index={index} key={index} />\n          ))}\n          <Button title=\"Add To Cart\" onPress={AddToCart} style={styles.btn} />\n          <Button\n            title=\"Close\"\n            onPress={() => setModalVisible(false)}\n            style={styles.btn}\n          />\n        </ScrollView>\n      </Modal>\n    </View>\n  );\n};\n\nexport default DisplayTest;\n\nconst styles = StyleSheet.create({\n  sizeRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginBottom: 10,\n  },\n  halfRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    width: \"50%\",\n  },\n  toppingsContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-between\",\n    marginBottom: 25,\n    marginTop: 25,\n  },\n  touchable: {\n    margin: 25,\n    width: 300,\n  },\n  modalContainer: {\n    padding: 50,\n  },\n  btn: {\n    marginBottom: 25,\n  },\n  dropDown: {\n    marginBottom: 25,\n  },\n  h2White: {\n    fontSize: 17,\n    color: \"white\",\n  },\n  h2Black: {\n    fontSize: 20,\n    color: \"black\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}