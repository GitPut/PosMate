{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport { Table } from \"antd\";\nimport \"./antd.css\";\nimport { itemRender, onShowSizeChange } from \"../components/pagination\";\nimport { Excel } from \"antd-table-saveas-excel\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Datatable = function Datatable(_ref) {\n  var props = _ref.props,\n    columns = _ref.columns,\n    dataSource = _ref.dataSource,\n    updateBaseSelectedRows = _ref.updateBaseSelectedRows,\n    setbaseSelectedRows = _ref.setbaseSelectedRows;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedRowKeys = _useState2[0],\n    setSelectedRowKeys = _useState2[1];\n  var onSelectChange = function onSelectChange(newSelectedRowKeys) {\n    console.log(\"selectedRowKeys changed: \", selectedRowKeys);\n    setSelectedRowKeys(newSelectedRowKeys);\n  };\n  useEffect(function () {\n    setbaseSelectedRows(selectedRowKeys);\n  }, [updateBaseSelectedRows]);\n  var testdataSource = [{\n    key: \"1\",\n    name: \"Mike\",\n    age: 32,\n    address: \"10 Downing Street\"\n  }, {\n    key: \"2\",\n    name: \"John\",\n    age: 42,\n    address: \"10 Downing Street\"\n  }];\n  var testcolumns = [{\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\"\n  }, {\n    title: \"Age\",\n    dataIndex: \"age\",\n    key: \"age\"\n  }, {\n    title: \"Address\",\n    dataIndex: \"address\",\n    key: \"address\"\n  }];\n  var handleClick = function handleClick() {\n    var excel = new Excel();\n    excel.addSheet(\"test\").addColumns(testcolumns).addDataSource(dataSource, {\n      str2Percent: true\n    }).saveAs(\"Excel.xlsx\");\n  };\n  var rowSelection = {\n    selectedRowKeys: selectedRowKeys,\n    onChange: onSelectChange\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Button, {\n      title: \"Export\",\n      onPress: handleClick\n    }), _jsx(Table, {\n      className: \"table datanew dataTable no-footer\",\n      rowSelection: rowSelection,\n      columns: columns,\n      dataSource: dataSource,\n      pagination: {\n        total: dataSource.length,\n        showTotal: function showTotal(total, range) {\n          return \" \" + range[0] + \" to \" + range[1] + \" of \" + total + \" items\";\n        },\n        showSizeChanger: true,\n        onShowSizeChange: onShowSizeChange\n      },\n      rowKey: function rowKey(record) {\n        return record.id;\n      }\n    }, props)]\n  });\n};\nexport default Datatable;","map":{"version":3,"names":["React","useEffect","useState","Table","itemRender","onShowSizeChange","Excel","Datatable","props","columns","dataSource","updateBaseSelectedRows","setbaseSelectedRows","selectedRowKeys","setSelectedRowKeys","onSelectChange","newSelectedRowKeys","console","log","testdataSource","key","name","age","address","testcolumns","title","dataIndex","handleClick","excel","addSheet","addColumns","addDataSource","str2Percent","saveAs","rowSelection","onChange","total","length","showTotal","range","showSizeChanger","record","id"],"sources":["/Users/peterputros/Desktop/PosMate/screens/authed/main/EntryFile/datatable.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Table } from \"antd\";\nimport \"./antd.css\";\nimport { itemRender, onShowSizeChange } from \"../components/pagination\";\nimport { Excel } from \"antd-table-saveas-excel\";\nimport { Button } from \"react-native\";\n\nconst Datatable = ({ props, columns, dataSource, updateBaseSelectedRows, setbaseSelectedRows }) => {\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const onSelectChange = (newSelectedRowKeys) => {\n    console.log(\"selectedRowKeys changed: \", selectedRowKeys);\n    setSelectedRowKeys(newSelectedRowKeys);\n  };\n\n  useEffect(() => {\n    setbaseSelectedRows(selectedRowKeys)\n  }, [updateBaseSelectedRows])\n\n\n  const testdataSource = [\n    {\n      key: \"1\",\n      name: \"Mike\",\n      age: 32,\n      address: \"10 Downing Street\"\n    },\n    {\n      key: \"2\",\n      name: \"John\",\n      age: 42,\n      address: \"10 Downing Street\"\n    }\n  ];\n\n  const testcolumns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"Age\",\n      dataIndex: \"age\",\n      key: \"age\"\n    },\n    {\n      title: \"Address\",\n      dataIndex: \"address\",\n      key: \"address\"\n    }\n  ];\n\n  const handleClick = () => {\n    const excel = new Excel();\n    excel\n      .addSheet(\"test\")\n      .addColumns(testcolumns)\n      .addDataSource(dataSource, {\n        str2Percent: true\n      })\n      .saveAs(\"Excel.xlsx\");\n  };\n\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n  };\n  return (\n    <>\n      <Button title=\"Export\" onPress={handleClick} />\n      <Table\n        key={props}\n        className=\"table datanew dataTable no-footer\"\n        rowSelection={rowSelection}\n        columns={columns}\n        dataSource={dataSource}\n        pagination={{\n          total: dataSource.length,\n          showTotal: (total, range) =>\n            ` ${range[0]} to ${range[1]} of ${total} items`,\n          showSizeChanger: true,\n          onShowSizeChange: onShowSizeChange,\n        }}\n        rowKey={(record) => record.id}\n      />\n    </>\n  );\n};\n\nexport default Datatable;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,KAAK,QAAQ,MAAM;AAC5B;AACA,SAASC,UAAU,EAAEC,gBAAgB;AACrC,SAASC,KAAK,QAAQ,yBAAyB;AAAC;AAAA;AAAA;AAAA;AAGhD,IAAMC,SAAS,GAAG,SAAZA,SAAS,OAAoF;EAAA,IAA9EC,KAAK,QAALA,KAAK;IAAEC,OAAO,QAAPA,OAAO;IAAEC,UAAU,QAAVA,UAAU;IAAEC,sBAAsB,QAAtBA,sBAAsB;IAAEC,mBAAmB,QAAnBA,mBAAmB;EAC1F,gBAA8CV,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAnDW,eAAe;IAAEC,kBAAkB;EAC1C,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,kBAAkB,EAAK;IAC7CC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEL,eAAe,CAAC;IACzDC,kBAAkB,CAACE,kBAAkB,CAAC;EACxC,CAAC;EAEDf,SAAS,CAAC,YAAM;IACdW,mBAAmB,CAACC,eAAe,CAAC;EACtC,CAAC,EAAE,CAACF,sBAAsB,CAAC,CAAC;EAG5B,IAAMQ,cAAc,GAAG,CACrB;IACEC,GAAG,EAAE,GAAG;IACRC,IAAI,EAAE,MAAM;IACZC,GAAG,EAAE,EAAE;IACPC,OAAO,EAAE;EACX,CAAC,EACD;IACEH,GAAG,EAAE,GAAG;IACRC,IAAI,EAAE,MAAM;IACZC,GAAG,EAAE,EAAE;IACPC,OAAO,EAAE;EACX,CAAC,CACF;EAED,IAAMC,WAAW,GAAG,CAClB;IACEC,KAAK,EAAE,MAAM;IACbC,SAAS,EAAE,MAAM;IACjBN,GAAG,EAAE;EACP,CAAC,EACD;IACEK,KAAK,EAAE,KAAK;IACZC,SAAS,EAAE,KAAK;IAChBN,GAAG,EAAE;EACP,CAAC,EACD;IACEK,KAAK,EAAE,SAAS;IAChBC,SAAS,EAAE,SAAS;IACpBN,GAAG,EAAE;EACP,CAAC,CACF;EAED,IAAMO,WAAW,GAAG,SAAdA,WAAW,GAAS;IACxB,IAAMC,KAAK,GAAG,IAAItB,KAAK,EAAE;IACzBsB,KAAK,CACFC,QAAQ,CAAC,MAAM,CAAC,CAChBC,UAAU,CAACN,WAAW,CAAC,CACvBO,aAAa,CAACrB,UAAU,EAAE;MACzBsB,WAAW,EAAE;IACf,CAAC,CAAC,CACDC,MAAM,CAAC,YAAY,CAAC;EACzB,CAAC;EAGD,IAAMC,YAAY,GAAG;IACnBrB,eAAe,EAAfA,eAAe;IACfsB,QAAQ,EAAEpB;EACZ,CAAC;EACD,OACE;IAAA,WACE,KAAC,MAAM;MAAC,KAAK,EAAC,QAAQ;MAAC,OAAO,EAAEY;IAAY,EAAG,EAC/C,KAAC,KAAK;MAEJ,SAAS,EAAC,mCAAmC;MAC7C,YAAY,EAAEO,YAAa;MAC3B,OAAO,EAAEzB,OAAQ;MACjB,UAAU,EAAEC,UAAW;MACvB,UAAU,EAAE;QACV0B,KAAK,EAAE1B,UAAU,CAAC2B,MAAM;QACxBC,SAAS,EAAE,mBAACF,KAAK,EAAEG,KAAK;UAAA,aAClBA,KAAK,CAAC,CAAC,CAAC,YAAOA,KAAK,CAAC,CAAC,CAAC,YAAOH,KAAK;QAAA,CAAQ;QACjDI,eAAe,EAAE,IAAI;QACrBnC,gBAAgB,EAAEA;MACpB,CAAE;MACF,MAAM,EAAE,gBAACoC,MAAM;QAAA,OAAKA,MAAM,CAACC,EAAE;MAAA;IAAC,GAZzBlC,KAAK,CAaV;EAAA,EACD;AAEP,CAAC;AAED,eAAeD,SAAS"},"metadata":{},"sourceType":"module"}