{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from \"react\";\nimport { Button, Text } from \"@react-native-material/core\";\nimport { storeDetailState, transListState } from \"../state/state\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar CompletePaymentPhoneOrder = function CompletePaymentPhoneOrder() {\n  var transList = transListState.use();\n  var storeDetails = storeDetailState.use();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: {\n        textAlign: \"center\",\n        margin: 25\n      },\n      children: \"Current Open Orders\"\n    }), _jsx(View, {\n      style: styles.contentContainer,\n      children: transList ? transList == null ? void 0 : transList.map(function (element, index) {\n        var _element$id, _element$id2;\n        if (((_element$id = element.id) == null ? void 0 : _element$id.substr(((_element$id2 = element.id) == null ? void 0 : _element$id2.length) - 1, 2)) === \"-l\" && element.completed === false) {\n          var _element$cart, _element$line_items;\n          var date = element.date ? new Date(element.date.seconds * 1000) : element.date_created ? new Date(element.date_created) : null;\n          return _jsxs(View, {\n            style: {\n              backgroundColor: \"grey\",\n              padding: 30,\n              margin: 10\n            },\n            children: [_jsx(Text, {\n              children: date.toLocaleString()\n            }), (_element$cart = element.cart) == null ? void 0 : _element$cart.map(function (cartItem, index) {\n              var _cartItem$options;\n              return _jsxs(View, {\n                style: {\n                  marginBottom: 20\n                },\n                children: [_jsxs(Text, {\n                  children: [\"Name: \", cartItem.name]\n                }), _jsxs(Text, {\n                  children: [\"Quantity: \", cartItem.quantity]\n                }), _jsxs(Text, {\n                  children: [\"Price: \", cartItem.price]\n                }), cartItem.options && ((_cartItem$options = cartItem.options) == null ? void 0 : _cartItem$options.map(function (option) {\n                  return _jsx(Text, {\n                    children: option\n                  });\n                }))]\n              }, index);\n            }), (_element$line_items = element.line_items) == null ? void 0 : _element$line_items.map(function (cartItem, index) {\n              var _cartItem$meta_data;\n              return _jsxs(View, {\n                style: {\n                  marginBottom: 20\n                },\n                children: [_jsxs(Text, {\n                  children: [\"Name: \", cartItem.name]\n                }), _jsxs(Text, {\n                  children: [\"Quantity: \", cartItem.quantity]\n                }), _jsxs(Text, {\n                  children: [\"Price: \", cartItem.price]\n                }), (_cartItem$meta_data = cartItem.meta_data) == null ? void 0 : _cartItem$meta_data.map(function (meta, index) {\n                  if (index === cartItem.meta_data.length - 1) return;\n                  return _jsx(Text, {\n                    children: meta.key + \" : \" + meta.value\n                  });\n                })]\n              }, index);\n            }), _jsx(Button, {\n              title: \"Complete\",\n              onPress: function onPress() {}\n            })]\n          }, index);\n        }\n      }) : _jsx(Text, {\n        children: \"No Orders Yet\"\n      })\n    })]\n  });\n};\nexport default CompletePaymentPhoneOrder;\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n    flex: 1,\n    height: \"100%\"\n  },\n  contentContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-between\",\n    paddingLeft: 50,\n    paddingRight: 50,\n    paddingBottom: 50,\n    height: \"100%\",\n    width: \"100%\",\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"names":["React","Button","Text","storeDetailState","transListState","CompletePaymentPhoneOrder","transList","use","storeDetails","styles","container","textAlign","margin","contentContainer","map","element","index","id","substr","length","completed","date","Date","seconds","date_created","backgroundColor","padding","toLocaleString","cart","cartItem","marginBottom","name","quantity","price","options","option","line_items","meta_data","meta","key","value","StyleSheet","create","flex","height","flexDirection","flexWrap","justifyContent","paddingLeft","paddingRight","paddingBottom","width","alignItems"],"sources":["/Users/peterputros/Desktop/PosMate-1/components/CompletePaymentPhoneOrder.tsx"],"sourcesContent":["import { ScrollView, StyleSheet, View } from \"react-native\";\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { Button, Text } from \"@react-native-material/core\";\nimport { storeDetailState, transListState } from \"state/state\";\n\nconst CompletePaymentPhoneOrder = () => {\n  const transList = transListState.use();\n  const storeDetails = storeDetailState.use();\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ textAlign: \"center\", margin: 25 }}>\n        Current Open Orders\n      </Text>\n      <View style={styles.contentContainer}>\n        {transList ? (\n                  transList?.map((element, index) => {\n                      if (element.id?.substr(element.id?.length - 1, 2) === \"-l\" &&\n                          element.completed === false) {\n\n                          const date = element.date\n                              ? new Date(element.date.seconds * 1000)\n                              : element.date_created\n                                  ? new Date(element.date_created)\n                                  : null;\n\n                          return (\n                              <View\n                                  style={{ backgroundColor: \"grey\", padding: 30, margin: 10 }}\n                                  key={index}\n                              >\n                                  <Text>{date.toLocaleString()}</Text>\n                                  {element.cart?.map((cartItem, index) => (\n                                      <View style={{ marginBottom: 20 }} key={index}>\n                                          <Text>Name: {cartItem.name}</Text>\n                                          <Text>Quantity: {cartItem.quantity}</Text>\n                                          <Text>Price: {cartItem.price}</Text>\n                                          {cartItem.options &&\n                                              cartItem.options?.map((option) => <Text>{option}</Text>)}\n                                      </View>\n                                  ))}\n                                  {element.line_items?.map((cartItem, index) => (\n                                      <View style={{ marginBottom: 20 }} key={index}>\n                                          <Text>Name: {cartItem.name}</Text>\n                                          <Text>Quantity: {cartItem.quantity}</Text>\n                                          <Text>Price: {cartItem.price}</Text>\n                                          {cartItem.meta_data?.map((meta, index) => {\n                                              if (index === cartItem.meta_data.length - 1) return;\n                                              return <Text>{`${meta.key} : ${meta.value}`}</Text>;\n                                          })}\n                                      </View>\n                                  ))}\n                                  <Button\n                                      title=\"Complete\"\n                                      onPress={() => { }}\n                                  />\n                                  \n                                  {/* <Button\n                                      title=\"Print\"\n                                      onPress={() => {\n                                          if (element.date) {\n                                              let total = 0;\n\n                                              let data = [\n                                                  \"\\x1B\" + \"\\x40\", // init\n                                                  \"\\x1B\" + \"\\x61\" + \"\\x31\", // center align\n                                                  storeDetails.name,\n                                                  \"\\x0A\",\n                                                  storeDetails.address + \"\\x0A\",\n                                                  storeDetails.website + \"\\x0A\", // text and line break\n                                                  storeDetails.phoneNumber + \"\\x0A\", // text and line break\n                                                  date.toLocaleDateString() +\n                                                  \" \" +\n                                                  date.toLocaleTimeString() +\n                                                  \"\\x0A\",\n                                                  \"\\x0A\",\n                                                  `Transaction # ${element.transNum}` + \"\\x0A\",\n                                                  \"\\x0A\",\n                                                  \"\\x0A\",\n                                                  \"\\x0A\",\n                                                  \"\\x1B\" + \"\\x61\" + \"\\x30\", // left align\n                                              ];\n\n                                              element.cart?.map((cartItem) => {\n                                                  total += parseFloat(cartItem.price);\n                                                  data.push(`Name: ${cartItem.name}`);\n                                                  data.push(\"\\x0A\");\n                                                  data.push(`Price: $${cartItem.price}`);\n\n                                                  if (cartItem.options) {\n                                                      data.push(\"\\x0A\");\n                                                      cartItem.options?.map((option) => {\n                                                          data.push(option);\n                                                          data.push(\"\\x0A\");\n                                                      });\n                                                  }\n                                                  data.push(\"\\x0A\" + \"\\x0A\");\n                                              });\n\n                                              total = total * 1.13;\n                                              total = total.toFixed(2);\n\n                                              //push ending\n                                              data.push(\n                                                  \"\\x0A\",\n                                                  \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" + \"\\x0A\",\n                                                  \"\\x0A\" + \"\\x0A\",\n                                                  \"Total Including (13% Tax): \" +\n                                                  \"$\" +\n                                                  total +\n                                                  \"\\x0A\" +\n                                                  \"\\x0A\",\n                                                  \"------------------------------------------\" + \"\\x0A\",\n                                                  \"\\x0A\", // line break\n                                                  \"\\x0A\", // line break\n                                                  \"\\x0A\", // line break\n                                                  \"\\x0A\", // line break\n                                                  \"\\x0A\", // line break\n                                                  \"\\x0A\", // line break\n                                                  //\"\\x1D\" + \"\\x56\" + \"\\x00\",\n                                                  \"\\x1D\" + \"\\x56\" + \"\\x30\"\n                                              );\n\n                                              fetch(\"http://localhost:8080/print\", {\n                                                  method: \"POST\",\n                                                  headers: {\n                                                      \"Content-Type\": \"application/json\",\n                                                  },\n                                                  body: JSON.stringify({\n                                                      printData: data,\n                                                      comSelected: storeDetails.comSelected,\n                                                  }),\n                                              })\n                                                  .then((response) => response.json())\n                                                  .then((respData) => {\n                                                      console.log(respData);\n                                                  })\n                                                  .catch((e) => alert(\"Error with printer\"));\n                                          } else {\n                                              const printData = [];\n\n                                              printData.push(\n                                                  \"\\x1B\" + \"\\x40\", // init\n                                                  \"\\x1B\" + \"\\x61\" + \"\\x31\", // center align\n                                                  storeDetails.name,\n                                                  \"\\x0A\",\n                                                  storeDetails.address + \"\\x0A\",\n                                                  storeDetails.website + \"\\x0A\", // text and line break\n                                                  storeDetails.phoneNumber + \"\\x0A\", // text and line break\n                                                  element.date_created + \"\\x0A\",\n                                                  \"\\x0A\",\n                                                  \"Online Order\" + \"\\x0A\", // text and line break\n                                                  `Transaction # ${element.number}` + \"\\x0A\",\n                                                  \"\\x0A\",\n                                                  \"\\x0A\",\n                                                  \"\\x0A\",\n                                                  \"\\x1B\" + \"\\x61\" + \"\\x30\" // left align\n                                              );\n\n                                              element.line_items?.map((cartItem) => {\n                                                  printData.push(\"\\x0A\");\n                                                  printData.push(`Name: ${cartItem.name}`);\n                                                  printData.push(\"\\x0A\");\n                                                  printData.push(`Quantity: ${cartItem.quantity}`);\n                                                  printData.push(\"\\x0A\");\n                                                  printData.push(`Price: $${cartItem.price}`);\n                                                  printData.push(\"\\x0A\");\n\n                                                  if (cartItem.meta_data) {\n                                                      cartItem.meta_data?.map((meta, index) => {\n                                                          if (index === 0) {\n                                                              printData.push(`${meta.key} : ${meta.value}`);\n                                                              if (\n                                                                  cartItem.meta_data[index + 1].key !== meta.key\n                                                              ) {\n                                                                  printData.push(\"\\x0A\");\n                                                              }\n                                                          } else {\n                                                              if (index !== cartItem.meta_data.length - 1) {\n                                                                  if (\n                                                                      cartItem.meta_data[index - 1].key === meta.key\n                                                                  ) {\n                                                                      printData.push(` , ${meta.value}`);\n                                                                  } else {\n                                                                      printData.push(`${meta.key} : ${meta.value}`);\n                                                                  }\n\n                                                                  if (\n                                                                      cartItem.meta_data[index + 1].key !== meta.key\n                                                                  ) {\n                                                                      printData.push(\"\\x0A\");\n                                                                  }\n                                                              }\n                                                          }\n                                                      });\n                                                  } else {\n                                                      printData.push(\"\\x0A\" + \"\\x0A\");\n                                                  }\n                                              });\n\n                                              printData.push(\"\\x0A\");\n                                              printData.push(\"\\x0A\");\n                                              printData.push(`Customer Details:`);\n                                              printData.push(\"\\x0A\");\n                                              printData.push(`Address: ${element.shipping.address_1}`);\n                                              printData.push(\"\\x0A\");\n                                              printData.push(`City: ${element.shipping.city}`);\n                                              printData.push(\"\\x0A\");\n                                              printData.push(\n                                                  `Zip/Postal Code: ${element.shipping.postcode}`\n                                              );\n                                              printData.push(\"\\x0A\");\n                                              printData.push(\n                                                  `Province/State: ${element.shipping.state}`\n                                              );\n                                              printData.push(\"\\x0A\");\n                                              printData.push(\n                                                  `Name: ${element.shipping.first_name} ${element.shipping.last_name}`\n                                              );\n                                              printData.push(\"\\x0A\");\n                                              element.shipping_lines.map((line) =>\n                                                  printData.push(`Shipping Method: ${line.method_title}`)\n                                              );\n                                              printData.push(\"\\x0A\");\n                                              printData.push(\"\\x0A\");\n\n                                              printData.push(\n                                                  \"\\x0A\",\n                                                  \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" + \"\\x0A\",\n                                                  \"\\x0A\" + \"\\x0A\",\n                                                  \"Payment Method: \" +\n                                                  element.payment_method_title +\n                                                  \"\\x0A\" +\n                                                  \"\\x0A\",\n                                                  \"Total Including (13% Tax): \" +\n                                                  \"$\" +\n                                                  (\n                                                      parseFloat(element.total) +\n                                                      parseFloat(element.total_tax)\n                                                  ).toFixed(2) +\n                                                  \"\\x0A\" +\n                                                  \"\\x0A\",\n                                                  \"------------------------------------------\" + \"\\x0A\",\n                                                  \"\\x0A\", // line break\n                                                  \"\\x0A\", // line break\n                                                  \"\\x0A\", // line break\n                                                  \"\\x0A\", // line break\n                                                  \"\\x0A\", // line break\n                                                  \"\\x0A\" // line break\n                                              );\n\n                                              printData.push(\"\\x1D\" + \"\\x56\" + \"\\x00\");\n\n                                              fetch(\"http://localhost:8080/print\", {\n                                                  method: \"POST\",\n                                                  headers: {\n                                                      \"Content-Type\": \"application/json\",\n                                                  },\n                                                  body: JSON.stringify({\n                                                      printData: printData,\n                                                      comSelected: storeDetails.comSelected,\n                                                  }),\n                                              })\n                                                  .then((response) => response.json())\n                                                  .then((respData) => {\n                                                      console.log(respData);\n                                                  })\n                                                  .catch((e) => alert(\"Error with printer\"));\n                                          }\n                                      }}\n                                  /> */}\n                              </View>\n                          );\n                      }\n                  \n          })\n        ) : (\n          <Text>No Orders Yet</Text>\n        )}\n      </View>\n    </View>\n  );\n};\n\nexport default CompletePaymentPhoneOrder;\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"white\",\n    flex: 1,\n    height: \"100%\",\n  },\n  contentContainer: {\n    flex: 1,\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-between\",\n    paddingLeft: 50,\n    paddingRight: 50,\n    paddingBottom: 50,\n    height: \"100%\",\n    width: \"100%\",\n    alignItems: \"center\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}