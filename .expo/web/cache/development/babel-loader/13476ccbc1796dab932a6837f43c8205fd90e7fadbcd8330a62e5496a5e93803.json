{"ast":null,"code":"export var Extrapolation = function (Extrapolation) {\n  Extrapolation[\"IDENTITY\"] = \"identity\";\n  Extrapolation[\"CLAMP\"] = \"clamp\";\n  Extrapolation[\"EXTEND\"] = \"extend\";\n  return Extrapolation;\n}({});\nvar _worklet_15627513880224_init_data = {\n  code: \"function getVal(type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {\\n  const {\\n    Extrapolation\\n  } = this._closure;\\n  switch (type) {\\n    case Extrapolation.IDENTITY:\\n      return x;\\n    case Extrapolation.CLAMP:\\n      if (coef * val < coef * leftEdgeOutput) {\\n        return leftEdgeOutput;\\n      }\\n      return rightEdgeOutput;\\n    case Extrapolation.EXTEND:\\n    default:\\n      return val;\\n  }\\n}\",\n  location: \"/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AAMA,eAASA,CAAOC,MAAIC,IAAEA,EAAIC,GAAEA,EAAGC,cAAEA,EAAcC,eAAEA,EAAeC,CAAGA;EAAAA;IAAAA;EAAAA;EAGjE,QAAQL,IAAI;IACV,KAAKM,aAAa,CAACC,QAAQ;MACzB,OAAOF,CAAC;IACV,KAAKC,aAAa,CAACE,KAAK;MACtB,IAAIP,IAAI,GAAGC,GAAG,GAAGD,IAAI,GAAGE,cAAc,EAAE;QACtC,OAAOA,cAAc;MACvB;MACA,OAAOC,eAAe;IACxB,KAAKE,aAAa,CAACG,MAAM;IACzB;MACE,OAAOP,GAAG;EAAA;AAEhB\\\",\\\"names\\\":[\\\"getVal\\\",\\\"type\\\",\\\"coef\\\",\\\"val\\\",\\\"leftEdgeOutput\\\",\\\"rightEdgeOutput\\\",\\\"x\\\",\\\"Extrapolation\\\",\\\"IDENTITY\\\",\\\"CLAMP\\\",\\\"EXTEND\\\"],\\\"sources\\\":[\\\"/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\\\"]}\"\n};\nvar getVal = function () {\n  var _e = [new global.Error(), -2, -27];\n  var _f = function _f(type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {\n    switch (type) {\n      case Extrapolation.IDENTITY:\n        return x;\n      case Extrapolation.CLAMP:\n        if (coef * val < coef * leftEdgeOutput) {\n          return leftEdgeOutput;\n        }\n        return rightEdgeOutput;\n      case Extrapolation.EXTEND:\n      default:\n        return val;\n    }\n  };\n  _f._closure = {\n    Extrapolation: Extrapolation\n  };\n  _f.__initData = _worklet_15627513880224_init_data;\n  _f.__workletHash = 15627513880224;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nvar _worklet_4592001914569_init_data = {\n  code: \"function isExtrapolate(value) {\\n  const {\\n    Extrapolation\\n  } = this._closure;\\n  return value === Extrapolation.EXTEND || value === Extrapolation.CLAMP || value === Extrapolation.IDENTITY;\\n}\",\n  location: \"/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AAsBA,sBAASA,CAAcC,OAAK;EAAA;IAAA;EAAA;EAG1B,OAAOA,KAAK,KAAKC,aAAa,CAACC,MAAM,IAAIF,KAAK,KAAKC,aAAa,CAACE,KAAK,IAAIH,KAAK,KAAKC,aAAa,CAACG,QAAQ;AAC5G\\\",\\\"names\\\":[\\\"isExtrapolate\\\",\\\"value\\\",\\\"Extrapolation\\\",\\\"EXTEND\\\",\\\"CLAMP\\\",\\\"IDENTITY\\\"],\\\"sources\\\":[\\\"/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\\\"]}\"\n};\nvar isExtrapolate = function () {\n  var _e = [new global.Error(), -2, -27];\n  var _f = function _f(value) {\n    return value === Extrapolation.EXTEND || value === Extrapolation.CLAMP || value === Extrapolation.IDENTITY;\n  };\n  _f._closure = {\n    Extrapolation: Extrapolation\n  };\n  _f.__initData = _worklet_4592001914569_init_data;\n  _f.__workletHash = 4592001914569;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nvar _worklet_11399977084709_init_data = {\n  code: \"function validateType(type) {\\n  const {\\n    Extrapolation,\\n    isExtrapolate\\n  } = this._closure;\\n  const extrapolationConfig = {\\n    extrapolateLeft: Extrapolation.EXTEND,\\n    extrapolateRight: Extrapolation.EXTEND\\n  };\\n  if (!type) {\\n    return extrapolationConfig;\\n  }\\n  if (typeof type === 'string') {\\n    if (!isExtrapolate(type)) {\\n      throw new Error(\\\"Reanimated: not supported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n        interpolate(value, [inputRange], [outputRange], \\\\\\\"clamp\\\\\\\")\\\");\\n    }\\n    extrapolationConfig.extrapolateLeft = type;\\n    extrapolationConfig.extrapolateRight = type;\\n    return extrapolationConfig;\\n  }\\n\\n  if (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft) || type.extrapolateRight && !isExtrapolate(type.extrapolateRight)) {\\n    throw new Error(\\\"Reanimated: not supported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\\\n Valid example:\\\\n      interpolate(value, [inputRange], [outputRange], {\\\\n        extrapolateLeft: Extrapolation.CLAMP,\\\\n        extrapolateRight: Extrapolation.IDENTITY\\\\n      }})\\\");\\n  }\\n  Object.assign(extrapolationConfig, type);\\n  return extrapolationConfig;\\n}\",\n  location: \"/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AA4BA;EAAA;IAAA;IAAA;EAAA;EACA;IACAA,eAASC,EAAYC,aAAO;IAG1BC;EACA;MACEH;IACAG,0BAAkBD;EACpB;EACA,IAAI,OAAOE;IACT,kBAAOC,QAAmB;MAC5B;IACA;IACEA,mBAAmBD,gBAAO;uBACT;IAEjB;;;EAIF;;EAEA;EACAE,MAAIF,OAAKJ,oBAAoBO;SAC3BF,mBAAe\\\",\\\"names\\\":[\\\"extrapolateLeft\\\",\\\"validateType\\\",\\\"Extrapolation\\\",\\\"extrapolateRight\\\",\\\"type\\\",\\\"extrapolationConfig\\\",\\\"Object\\\",\\\"isExtrapolate\\\"],\\\"sources\\\":[\\\"/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\\\"]}\"\n};\nvar validateType = function () {\n  var _e = [new global.Error(), -3, -27];\n  var _f = function _f(type) {\n    var extrapolationConfig = {\n      extrapolateLeft: Extrapolation.EXTEND,\n      extrapolateRight: Extrapolation.EXTEND\n    };\n    if (!type) {\n      return extrapolationConfig;\n    }\n    if (typeof type === 'string') {\n      if (!isExtrapolate(type)) {\n        throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`);\n      }\n      extrapolationConfig.extrapolateLeft = type;\n      extrapolationConfig.extrapolateRight = type;\n      return extrapolationConfig;\n    }\n\n    if (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft) || type.extrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n      throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`);\n    }\n    Object.assign(extrapolationConfig, type);\n    return extrapolationConfig;\n  };\n  _f._closure = {\n    Extrapolation: Extrapolation,\n    isExtrapolate: isExtrapolate\n  };\n  _f.__initData = _worklet_11399977084709_init_data;\n  _f.__workletHash = 11399977084709;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nvar _worklet_8807172494339_init_data = {\n  code: \"function internalInterpolate(x, narrowedInput, extrapolationConfig) {\\n  const {\\n    getVal\\n  } = this._closure;\\n  const {\\n    leftEdgeInput: leftEdgeInput,\\n    rightEdgeInput: rightEdgeInput,\\n    leftEdgeOutput: leftEdgeOutput,\\n    rightEdgeOutput: rightEdgeOutput\\n  } = narrowedInput;\\n  if (rightEdgeInput - leftEdgeInput === 0) return leftEdgeOutput;\\n  const progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\\n  const val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\\n  const coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\\n  if (coef * val < coef * leftEdgeOutput) {\\n    return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);\\n  } else if (coef * val > coef * rightEdgeOutput) {\\n    return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);\\n  }\\n  return val;\\n}\",\n  location: \"/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AA8DA,4BAASA,CAAoBC,CAACA,eAAEC,EAAaC,mBAAEA,EAAmB;EAAA;IAAA;EAAA;EAGhE,MAAM;IACJC,aAAa,EAAbA,aAAa;IACbC,cAAc,EAAdA,cAAc;IACdC,cAAc,EAAdA,cAAc;IACdC;EACF,CAAC,GAAGL,aAAa;EACjB,IAAIG,cAAc,GAAGD,aAAa,KAAK,CAAC,EAAE,OAAOE,cAAc;EAC/D,MAAME,QAAQ,GAAG,CAACP,CAAC,GAAGG,aAAa,KAAKC,cAAc,GAAGD,aAAa,CAAC;EACvE,MAAMK,GAAG,GAAGH,cAAc,GAAGE,QAAQ,IAAID,eAAe,GAAGD,cAAc,CAAC;EAC1E,MAAMI,IAAI,GAAGH,eAAe,IAAID,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC;EACvD,IAAII,IAAI,GAAGD,GAAG,GAAGC,IAAI,GAAGJ,cAAc,EAAE;IACtC,OAAOK,MAAM,CAACR,mBAAmB,CAACS,eAAe,EAAEF,IAAI,EAAED,GAAG,EAAEH,cAAc,EAAEC,eAAe,EAAEN,CAAC,CAAC;EACnG,CAAC,MAAM,IAAIS,IAAI,GAAGD,GAAG,GAAGC,IAAI,GAAGH,eAAe,EAAE;IAC9C,OAAOI,MAAM,CAACR,mBAAmB,CAACU,gBAAgB,EAAEH,IAAI,EAAED,GAAG,EAAEH,cAAc,EAAEC,eAAe,EAAEN,CAAC,CAAC;EACpG;EACA,OAAOQ,GAAG;AACZ\\\",\\\"names\\\":[\\\"internalInterpolate\\\",\\\"x\\\",\\\"narrowedInput\\\",\\\"extrapolationConfig\\\",\\\"leftEdgeInput\\\",\\\"rightEdgeInput\\\",\\\"leftEdgeOutput\\\",\\\"rightEdgeOutput\\\",\\\"progress\\\",\\\"val\\\",\\\"coef\\\",\\\"getVal\\\",\\\"extrapolateLeft\\\",\\\"extrapolateRight\\\"],\\\"sources\\\":[\\\"/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\\\"]}\"\n};\nvar internalInterpolate = function () {\n  var _e = [new global.Error(), -2, -27];\n  var _f = function _f(x, narrowedInput, extrapolationConfig) {\n    var leftEdgeInput = narrowedInput.leftEdgeInput,\n      rightEdgeInput = narrowedInput.rightEdgeInput,\n      leftEdgeOutput = narrowedInput.leftEdgeOutput,\n      rightEdgeOutput = narrowedInput.rightEdgeOutput;\n    if (rightEdgeInput - leftEdgeInput === 0) return leftEdgeOutput;\n    var progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n    var val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n    var coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n    if (coef * val < coef * leftEdgeOutput) {\n      return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n    } else if (coef * val > coef * rightEdgeOutput) {\n      return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);\n    }\n    return val;\n  };\n  _f._closure = {\n    getVal: getVal\n  };\n  _f.__initData = _worklet_8807172494339_init_data;\n  _f.__workletHash = 8807172494339;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();\nvar _worklet_4383905646518_init_data = {\n  code: \"function interpolate(x, input, output, type) {\\n  const {\\n    validateType,\\n    internalInterpolate\\n  } = this._closure;\\n  if (input.length < 2 || output.length < 2) {\\n    throw Error('Interpolation input and output should contain at least two values.');\\n  }\\n  const extrapolationConfig = validateType(type);\\n  const length = input.length;\\n  const narrowedInput = {\\n    leftEdgeInput: input[0],\\n    rightEdgeInput: input[1],\\n    leftEdgeOutput: output[0],\\n    rightEdgeOutput: output[1]\\n  };\\n  if (length > 2) {\\n    if (x > input[length - 1]) {\\n      narrowedInput.leftEdgeInput = input[length - 2];\\n      narrowedInput.rightEdgeInput = input[length - 1];\\n      narrowedInput.leftEdgeOutput = output[length - 2];\\n      narrowedInput.rightEdgeOutput = output[length - 1];\\n    } else {\\n      for (let i = 1; i < length; ++i) {\\n        if (x <= input[i]) {\\n          narrowedInput.leftEdgeInput = input[i - 1];\\n          narrowedInput.rightEdgeInput = input[i];\\n          narrowedInput.leftEdgeOutput = output[i - 1];\\n          narrowedInput.rightEdgeOutput = output[i];\\n          break;\\n        }\\n      }\\n    }\\n  }\\n  return internalInterpolate(x, narrowedInput, extrapolationConfig);\\n}\",\n  location: \"/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AAqFO,oBAASA,CAAYC,CAACA,OAAEC,EAAKC,MAAEA,EAAMC,IAAEA,EAAI;EAAA;IAAA;IAAA;EAAA;EAGhD,IAAIF,KAAK,CAACG,MAAM,GAAG,CAAC,IAAIF,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;IACzC,MAAMC,KAAK,CAAC,oEAAoE,CAAC;EACnF;EACA,MAAMC,mBAAmB,GAAGC,YAAY,CAACJ,IAAI,CAAC;EAC9C,MAAMC,MAAM,GAAGH,KAAK,CAACG,MAAM;EAC3B,MAAMI,aAAa,GAAG;IACpBC,aAAa,EAAER,KAAK,CAAC,CAAC,CAAC;IACvBS,cAAc,EAAET,KAAK,CAAC,CAAC,CAAC;IACxBU,cAAc,EAAET,MAAM,CAAC,CAAC,CAAC;IACzBU,eAAe,EAAEV,MAAM,CAAC,CAAC;EAC3B,CAAC;EACD,IAAIE,MAAM,GAAG,CAAC,EAAE;IACd,IAAIJ,CAAC,GAAGC,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC,EAAE;MACzBI,aAAa,CAACC,aAAa,GAAGR,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;MAC/CI,aAAa,CAACE,cAAc,GAAGT,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;MAChDI,aAAa,CAACG,cAAc,GAAGT,MAAM,CAACE,MAAM,GAAG,CAAC,CAAC;MACjDI,aAAa,CAACI,eAAe,GAAGV,MAAM,CAACE,MAAM,GAAG,CAAC,CAAC;IACpD,CAAC,MAAM;MACL,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,MAAM,EAAE,EAAES,CAAC,EAAE;QAC/B,IAAIb,CAAC,IAAIC,KAAK,CAACY,CAAC,CAAC,EAAE;UACjBL,aAAa,CAACC,aAAa,GAAGR,KAAK,CAACY,CAAC,GAAG,CAAC,CAAC;UAC1CL,aAAa,CAACE,cAAc,GAAGT,KAAK,CAACY,CAAC,CAAC;UACvCL,aAAa,CAACG,cAAc,GAAGT,MAAM,CAACW,CAAC,GAAG,CAAC,CAAC;UAC5CL,aAAa,CAACI,eAAe,GAAGV,MAAM,CAACW,CAAC,CAAC;UACzC;QACF;MACF;IACF;EACF;EACA,OAAOC,mBAAmB,CAACd,CAAC,EAAEQ,aAAa,EAAEF,mBAAmB,CAAC;AACnE\\\",\\\"names\\\":[\\\"interpolate\\\",\\\"x\\\",\\\"input\\\",\\\"output\\\",\\\"type\\\",\\\"length\\\",\\\"Error\\\",\\\"extrapolationConfig\\\",\\\"validateType\\\",\\\"narrowedInput\\\",\\\"leftEdgeInput\\\",\\\"rightEdgeInput\\\",\\\"leftEdgeOutput\\\",\\\"rightEdgeOutput\\\",\\\"i\\\",\\\"internalInterpolate\\\"],\\\"sources\\\":[\\\"/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.js\\\"]}\"\n};\nexport var interpolate = function () {\n  var _e = [new global.Error(), -3, -27];\n  var _f = function _f(x, input, output, type) {\n    if (input.length < 2 || output.length < 2) {\n      throw Error('Interpolation input and output should contain at least two values.');\n    }\n    var extrapolationConfig = validateType(type);\n    var length = input.length;\n    var narrowedInput = {\n      leftEdgeInput: input[0],\n      rightEdgeInput: input[1],\n      leftEdgeOutput: output[0],\n      rightEdgeOutput: output[1]\n    };\n    if (length > 2) {\n      if (x > input[length - 1]) {\n        narrowedInput.leftEdgeInput = input[length - 2];\n        narrowedInput.rightEdgeInput = input[length - 1];\n        narrowedInput.leftEdgeOutput = output[length - 2];\n        narrowedInput.rightEdgeOutput = output[length - 1];\n      } else {\n        for (var i = 1; i < length; ++i) {\n          if (x <= input[i]) {\n            narrowedInput.leftEdgeInput = input[i - 1];\n            narrowedInput.rightEdgeInput = input[i];\n            narrowedInput.leftEdgeOutput = output[i - 1];\n            narrowedInput.rightEdgeOutput = output[i];\n            break;\n          }\n        }\n      }\n    }\n    return internalInterpolate(x, narrowedInput, extrapolationConfig);\n  };\n  _f._closure = {\n    validateType: validateType,\n    internalInterpolate: internalInterpolate\n  };\n  _f.__initData = _worklet_4383905646518_init_data;\n  _f.__workletHash = 4383905646518;\n  _f.__stackDetails = _e;\n  _f.__version = \"3.3.0\";\n  return _f;\n}();","map":{"version":3,"mappings":"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","names":["Extrapolation","getVal","type","coef","val","leftEdgeOutput","rightEdgeOutput","x","IDENTITY","CLAMP","EXTEND","isExtrapolate","value","validateType","extrapolationConfig","extrapolateLeft","extrapolateRight","Error","Object","assign","internalInterpolate","narrowedInput","leftEdgeInput","rightEdgeInput","progress","interpolate","input","output","length","i"],"sources":["/Users/georgebadal/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/interpolation.ts"],"sourcesContent":["export enum Extrapolation {\n  IDENTITY = 'identity',\n  CLAMP = 'clamp',\n  EXTEND = 'extend',\n}\n\ninterface InterpolationNarrowedInput {\n  leftEdgeInput: number;\n  rightEdgeInput: number;\n  leftEdgeOutput: number;\n  rightEdgeOutput: number;\n}\n\nexport interface ExtrapolationConfig {\n  extrapolateLeft?: Extrapolation | string;\n  extrapolateRight?: Extrapolation | string;\n}\n\ninterface RequiredExtrapolationConfig {\n  extrapolateLeft: Extrapolation;\n  extrapolateRight: Extrapolation;\n}\n\nexport type ExtrapolationType =\n  | ExtrapolationConfig\n  | Extrapolation\n  | string\n  | undefined;\n\nfunction getVal(\n  type: Extrapolation,\n  coef: number,\n  val: number,\n  leftEdgeOutput: number,\n  rightEdgeOutput: number,\n  x: number\n): number {\n  'worklet';\n\n  switch (type) {\n    case Extrapolation.IDENTITY:\n      return x;\n    case Extrapolation.CLAMP:\n      if (coef * val < coef * leftEdgeOutput) {\n        return leftEdgeOutput;\n      }\n      return rightEdgeOutput;\n    case Extrapolation.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value: string): value is Extrapolation {\n  'worklet';\n\n  return (\n    value === Extrapolation.EXTEND ||\n    value === Extrapolation.CLAMP ||\n    value === Extrapolation.IDENTITY\n  );\n}\n\n// validates extrapolations type\n// if type is correct, converts it to ExtrapolationConfig\nfunction validateType(type: ExtrapolationType): RequiredExtrapolationConfig {\n  'worklet';\n  // initialize extrapolationConfig with default extrapolation\n  const extrapolationConfig: RequiredExtrapolationConfig = {\n    extrapolateLeft: Extrapolation.EXTEND,\n    extrapolateRight: Extrapolation.EXTEND,\n  };\n\n  if (!type) {\n    return extrapolationConfig;\n  }\n\n  if (typeof type === 'string') {\n    if (!isExtrapolate(type)) {\n      throw new Error(\n        `Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n        interpolate(value, [inputRange], [outputRange], \"clamp\")`\n      );\n    }\n    extrapolationConfig.extrapolateLeft = type;\n    extrapolationConfig.extrapolateRight = type;\n    return extrapolationConfig;\n  }\n\n  // otherwise type is extrapolation config object\n  if (\n    (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft)) ||\n    (type.extrapolateRight && !isExtrapolate(type.extrapolateRight))\n  ) {\n    throw new Error(\n      `Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\\n Valid example:\n      interpolate(value, [inputRange], [outputRange], {\n        extrapolateLeft: Extrapolation.CLAMP,\n        extrapolateRight: Extrapolation.IDENTITY\n      }})`\n    );\n  }\n\n  Object.assign(extrapolationConfig, type);\n  return extrapolationConfig;\n}\n\nfunction internalInterpolate(\n  x: number,\n  narrowedInput: InterpolationNarrowedInput,\n  extrapolationConfig: RequiredExtrapolationConfig\n) {\n  'worklet';\n  const { leftEdgeInput, rightEdgeInput, leftEdgeOutput, rightEdgeOutput } =\n    narrowedInput;\n  if (rightEdgeInput - leftEdgeInput === 0) return leftEdgeOutput;\n  const progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);\n  const val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);\n  const coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;\n\n  if (coef * val < coef * leftEdgeOutput) {\n    return getVal(\n      extrapolationConfig.extrapolateLeft,\n      coef,\n      val,\n      leftEdgeOutput,\n      rightEdgeOutput,\n      x\n    );\n  } else if (coef * val > coef * rightEdgeOutput) {\n    return getVal(\n      extrapolationConfig.extrapolateRight,\n      coef,\n      val,\n      leftEdgeOutput,\n      rightEdgeOutput,\n      x\n    );\n  }\n\n  return val;\n}\n\n// TODO: support default values in worklets:\n// e.g. function interpolate(x, input, output, type = Extrapolatation.CLAMP)\nexport function interpolate(\n  x: number,\n  input: readonly number[],\n  output: readonly number[],\n  type?: ExtrapolationType\n): number {\n  'worklet';\n  if (input.length < 2 || output.length < 2) {\n    throw Error(\n      'Interpolation input and output should contain at least two values.'\n    );\n  }\n\n  const extrapolationConfig = validateType(type);\n  const length = input.length;\n  const narrowedInput: InterpolationNarrowedInput = {\n    leftEdgeInput: input[0],\n    rightEdgeInput: input[1],\n    leftEdgeOutput: output[0],\n    rightEdgeOutput: output[1],\n  };\n  if (length > 2) {\n    if (x > input[length - 1]) {\n      narrowedInput.leftEdgeInput = input[length - 2];\n      narrowedInput.rightEdgeInput = input[length - 1];\n      narrowedInput.leftEdgeOutput = output[length - 2];\n      narrowedInput.rightEdgeOutput = output[length - 1];\n    } else {\n      for (let i = 1; i < length; ++i) {\n        if (x <= input[i]) {\n          narrowedInput.leftEdgeInput = input[i - 1];\n          narrowedInput.rightEdgeInput = input[i];\n          narrowedInput.leftEdgeOutput = output[i - 1];\n          narrowedInput.rightEdgeOutput = output[i];\n          break;\n        }\n      }\n    }\n  }\n\n  return internalInterpolate(x, narrowedInput, extrapolationConfig);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}