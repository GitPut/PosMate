{"ast":null,"code":"import { useEvent, useHandler } from \"./Hooks\";\nexport var EventType = function (EventType) {\n  EventType[EventType[\"UNDETERMINED\"] = 0] = \"UNDETERMINED\";\n  EventType[EventType[\"FAILED\"] = 1] = \"FAILED\";\n  EventType[EventType[\"BEGAN\"] = 2] = \"BEGAN\";\n  EventType[EventType[\"CANCELLED\"] = 3] = \"CANCELLED\";\n  EventType[EventType[\"ACTIVE\"] = 4] = \"ACTIVE\";\n  EventType[EventType[\"END\"] = 5] = \"END\";\n  return EventType;\n}({});\nvar _worklet_7959857095227_init_data = {\n  code: \"function anonymous(e) {\\n  const {\\n    useWeb,\\n    EventType,\\n    handlers,\\n    context\\n  } = this._closure;\\n  const event = useWeb ? e.nativeEvent : e;\\n  if (event.state === EventType.BEGAN && handlers.onStart) {\\n    handlers.onStart(event, context);\\n  }\\n  if (event.state === EventType.ACTIVE && handlers.onActive) {\\n    handlers.onActive(event, context);\\n  }\\n  if (event.oldState === EventType.ACTIVE && event.state === EventType.END && handlers.onEnd) {\\n    handlers.onEnd(event, context);\\n  }\\n  if (event.oldState === EventType.BEGAN && event.state === EventType.FAILED && handlers.onFail) {\\n    handlers.onFail(event, context);\\n  }\\n  if (event.oldState === EventType.ACTIVE && event.state === EventType.CANCELLED && handlers.onCancel) {\\n    handlers.onCancel(event, context);\\n  }\\n  if ((event.oldState === EventType.BEGAN || event.oldState === EventType.ACTIVE) && event.state !== EventType.BEGAN && event.state !== EventType.ACTIVE && handlers.onFinish) {\\n    handlers.onFinish(event, context, event.state === EventType.CANCELLED || event.state === EventType.FAILED);\\n  }\\n}\",\n  location: \"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedGestureHandler.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"mappings\\\":\\\"AAgBkBA,SAACC,SAAI;EAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAGnB,MAAMC,KAAK,GAAGC,MAAM,GAAGH,CAAC,CAACI,WAAW,GAAGJ,CAAC;EACxC,IAAIE,KAAK,CAACG,KAAK,KAAKC,SAAS,CAACC,KAAK,IAAIC,QAAQ,CAACC,OAAO,EAAE;IACvDD,QAAQ,CAACC,OAAO,CAACP,KAAK,EAAEQ,OAAO,CAAC;EAClC;EACA,IAAIR,KAAK,CAACG,KAAK,KAAKC,SAAS,CAACK,MAAM,IAAIH,QAAQ,CAACI,QAAQ,EAAE;IACzDJ,QAAQ,CAACI,QAAQ,CAACV,KAAK,EAAEQ,OAAO,CAAC;EACnC;EACA,IAAIR,KAAK,CAACW,QAAQ,KAAKP,SAAS,CAACK,MAAM,IAAIT,KAAK,CAACG,KAAK,KAAKC,SAAS,CAACQ,GAAG,IAAIN,QAAQ,CAACO,KAAK,EAAE;IAC1FP,QAAQ,CAACO,KAAK,CAACb,KAAK,EAAEQ,OAAO,CAAC;EAChC;EACA,IAAIR,KAAK,CAACW,QAAQ,KAAKP,SAAS,CAACC,KAAK,IAAIL,KAAK,CAACG,KAAK,KAAKC,SAAS,CAACU,MAAM,IAAIR,QAAQ,CAACS,MAAM,EAAE;IAC7FT,QAAQ,CAACS,MAAM,CAACf,KAAK,EAAEQ,OAAO,CAAC;EACjC;EACA,IAAIR,KAAK,CAACW,QAAQ,KAAKP,SAAS,CAACK,MAAM,IAAIT,KAAK,CAACG,KAAK,KAAKC,SAAS,CAACY,SAAS,IAAIV,QAAQ,CAACW,QAAQ,EAAE;IACnGX,QAAQ,CAACW,QAAQ,CAACjB,KAAK,EAAEQ,OAAO,CAAC;EACnC;EACA,IAAI,CAACR,KAAK,CAACW,QAAQ,KAAKP,SAAS,CAACC,KAAK,IAAIL,KAAK,CAACW,QAAQ,KAAKP,SAAS,CAACK,MAAM,KAAKT,KAAK,CAACG,KAAK,KAAKC,SAAS,CAACC,KAAK,IAAIL,KAAK,CAACG,KAAK,KAAKC,SAAS,CAACK,MAAM,IAAIH,QAAQ,CAACY,QAAQ,EAAE;IAC3KZ,QAAQ,CAACY,QAAQ,CAAClB,KAAK,EAAEQ,OAAO,EAAER,KAAK,CAACG,KAAK,KAAKC,SAAS,CAACY,SAAS,IAAIhB,KAAK,CAACG,KAAK,KAAKC,SAAS,CAACU,MAAM,CAAC;EAC5G;AACF\\\",\\\"names\\\":[\\\"e\\\",\\\"anonymous\\\",\\\"event\\\",\\\"useWeb\\\",\\\"nativeEvent\\\",\\\"state\\\",\\\"EventType\\\",\\\"BEGAN\\\",\\\"handlers\\\",\\\"onStart\\\",\\\"context\\\",\\\"ACTIVE\\\",\\\"onActive\\\",\\\"oldState\\\",\\\"END\\\",\\\"onEnd\\\",\\\"FAILED\\\",\\\"onFail\\\",\\\"CANCELLED\\\",\\\"onCancel\\\",\\\"onFinish\\\"],\\\"sources\\\":[\\\"/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedGestureHandler.js\\\"]}\"\n};\nexport function useAnimatedGestureHandler(handlers, dependencies) {\n  var _useHandler = useHandler(handlers, dependencies),\n    context = _useHandler.context,\n    doDependenciesDiffer = _useHandler.doDependenciesDiffer,\n    useWeb = _useHandler.useWeb;\n  var handler = function () {\n    var _e = [new global.Error(), -5, -27];\n    var _f = function _f(e) {\n      var event = useWeb ? e.nativeEvent : e;\n      if (event.state === EventType.BEGAN && handlers.onStart) {\n        handlers.onStart(event, context);\n      }\n      if (event.state === EventType.ACTIVE && handlers.onActive) {\n        handlers.onActive(event, context);\n      }\n      if (event.oldState === EventType.ACTIVE && event.state === EventType.END && handlers.onEnd) {\n        handlers.onEnd(event, context);\n      }\n      if (event.oldState === EventType.BEGAN && event.state === EventType.FAILED && handlers.onFail) {\n        handlers.onFail(event, context);\n      }\n      if (event.oldState === EventType.ACTIVE && event.state === EventType.CANCELLED && handlers.onCancel) {\n        handlers.onCancel(event, context);\n      }\n      if ((event.oldState === EventType.BEGAN || event.oldState === EventType.ACTIVE) && event.state !== EventType.BEGAN && event.state !== EventType.ACTIVE && handlers.onFinish) {\n        handlers.onFinish(event, context, event.state === EventType.CANCELLED || event.state === EventType.FAILED);\n      }\n    };\n    _f._closure = {\n      useWeb: useWeb,\n      EventType: EventType,\n      handlers: handlers,\n      context: context\n    };\n    _f.__initData = _worklet_7959857095227_init_data;\n    _f.__workletHash = 7959857095227;\n    _f.__stackDetails = _e;\n    _f.__version = \"3.3.0\";\n    return _f;\n  }();\n  if (useWeb) {\n    return handler;\n  }\n  return useEvent(handler, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], doDependenciesDiffer);\n}","map":{"version":3,"mappings":"AAIA,SAASA,QAAQ,EAAEC,UAAU;AAgB7B,WAAYC,SAAS,aAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAATA,SAAS,CAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAAA;EAAA;EAAA;EAAA;AAAA;AAqBrB,OAAO,SAASC,yBAAyBA,CAIvCC,QAAsC,EACtCC,YAA6B,EACuC;EACpE,kBAAkDJ,UAAU,CAC1DG,QAAQ,EACRC,YAAY,CACb;IAHOC,OAAO,eAAPA,OAAO;IAAEC,oBAAoB,eAApBA,oBAAoB;IAAEC;EAKvC,IAAMC,OAAO;IAAA;IAAA,qBAAIC,CAAI,EAAK;MAExB,IAAMC,KAAK,GAAGH,MAAM,GAAGE,CAAC,CAACE,WAAW,GAAGF,CAAC;MAExC,IAAIC,KAAK,CAACE,KAAK,KAAKX,SAAS,CAACY,KAAK,IAAIV,QAAQ,CAACW,OAAO,EAAE;QACvDX,QAAQ,CAACW,OAAO,CAACJ,KAAK,EAAEL,OAAO,CAAC;MAClC;MACA,IAAIK,KAAK,CAACE,KAAK,KAAKX,SAAS,CAACc,MAAM,IAAIZ,QAAQ,CAACa,QAAQ,EAAE;QACzDb,QAAQ,CAACa,QAAQ,CAACN,KAAK,EAAEL,OAAO,CAAC;MACnC;MACA,IACEK,KAAK,CAACO,QAAQ,KAAKhB,SAAS,CAACc,MAAM,IACnCL,KAAK,CAACE,KAAK,KAAKX,SAAS,CAACiB,GAAG,IAC7Bf,QAAQ,CAACgB,KAAK,EACd;QACAhB,QAAQ,CAACgB,KAAK,CAACT,KAAK,EAAEL,OAAO,CAAC;MAChC;MACA,IACEK,KAAK,CAACO,QAAQ,KAAKhB,SAAS,CAACY,KAAK,IAClCH,KAAK,CAACE,KAAK,KAAKX,SAAS,CAACmB,MAAM,IAChCjB,QAAQ,CAACkB,MAAM,EACf;QACAlB,QAAQ,CAACkB,MAAM,CAACX,KAAK,EAAEL,OAAO,CAAC;MACjC;MACA,IACEK,KAAK,CAACO,QAAQ,KAAKhB,SAAS,CAACc,MAAM,IACnCL,KAAK,CAACE,KAAK,KAAKX,SAAS,CAACqB,SAAS,IACnCnB,QAAQ,CAACoB,QAAQ,EACjB;QACApB,QAAQ,CAACoB,QAAQ,CAACb,KAAK,EAAEL,OAAO,CAAC;MACnC;MACA,IACE,CAACK,KAAK,CAACO,QAAQ,KAAKhB,SAAS,CAACY,KAAK,IACjCH,KAAK,CAACO,QAAQ,KAAKhB,SAAS,CAACc,MAAM,KACrCL,KAAK,CAACE,KAAK,KAAKX,SAAS,CAACY,KAAK,IAC/BH,KAAK,CAACE,KAAK,KAAKX,SAAS,CAACc,MAAM,IAChCZ,QAAQ,CAACqB,QAAQ,EACjB;QACArB,QAAQ,CAACqB,QAAQ,CACfd,KAAK,EACLL,OAAO,EACPK,KAAK,CAACE,KAAK,KAAKX,SAAS,CAACqB,SAAS,IAAIZ,KAAK,CAACE,KAAK,KAAKX,SAAS,CAACmB,MAAM,CACxE;MACH;IACF,CAAC;IAAA;MAAA,QA7ESnB,MAAS;MAAA;;;;;;;;;KA6ElB;EAED,IAAIM,MAAM,EAAE;IACV,OAAOC,OAAO;EAChB;EAEA,OAAOT,QAAQ,CACbS,OAAO,EACP,CAAC,6BAA6B,EAAE,uBAAuB,CAAC,EACxDF,oBAAoB,CACrB;AACH","names":["useEvent","useHandler","EventType","useAnimatedGestureHandler","handlers","dependencies","context","doDependenciesDiffer","useWeb","handler","e","event","nativeEvent","state","BEGAN","onStart","ACTIVE","onActive","oldState","END","onEnd","FAILED","onFail","CANCELLED","onCancel","onFinish"],"sources":["/Users/peterputros/Desktop/PosMate/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedGestureHandler.ts"],"sourcesContent":["import { MutableRefObject } from 'react';\nimport { Context, WorkletFunction } from '../commonTypes';\nimport WorkletEventHandler from '../WorkletEventHandler';\nimport { DependencyList } from './commonTypes';\nimport { useEvent, useHandler } from './Hooks';\n\ninterface Handler<T, TContext extends Context> extends WorkletFunction {\n  (event: T, context: TContext, isCanceledOrFailed?: boolean): void;\n}\n\nexport interface GestureHandlers<T, TContext extends Context> {\n  [key: string]: Handler<T, TContext> | undefined;\n  onStart?: Handler<T, TContext>;\n  onActive?: Handler<T, TContext>;\n  onEnd?: Handler<T, TContext>;\n  onFail?: Handler<T, TContext>;\n  onCancel?: Handler<T, TContext>;\n  onFinish?: Handler<T, TContext>;\n}\n\nexport enum EventType {\n  UNDETERMINED = 0,\n  FAILED,\n  BEGAN,\n  CANCELLED,\n  ACTIVE,\n  END,\n}\n\nexport interface GestureHandlerStateChangeNativeEvent {\n  handlerTag: number;\n  numberOfPointers: number;\n  state: EventType;\n  oldState: EventType;\n}\n\nexport interface GestureHandlerEvent<T>\n  extends GestureHandlerStateChangeNativeEvent {\n  nativeEvent: T;\n}\n\nexport function useAnimatedGestureHandler<\n  T extends GestureHandlerEvent<T>,\n  TContext extends Context\n>(\n  handlers: GestureHandlers<T, TContext>,\n  dependencies?: DependencyList\n): MutableRefObject<WorkletEventHandler<T> | null> | ((e: T) => void) {\n  const { context, doDependenciesDiffer, useWeb } = useHandler<T, TContext>(\n    handlers,\n    dependencies\n  );\n\n  const handler = (e: T) => {\n    'worklet';\n    const event = useWeb ? e.nativeEvent : e;\n\n    if (event.state === EventType.BEGAN && handlers.onStart) {\n      handlers.onStart(event, context);\n    }\n    if (event.state === EventType.ACTIVE && handlers.onActive) {\n      handlers.onActive(event, context);\n    }\n    if (\n      event.oldState === EventType.ACTIVE &&\n      event.state === EventType.END &&\n      handlers.onEnd\n    ) {\n      handlers.onEnd(event, context);\n    }\n    if (\n      event.oldState === EventType.BEGAN &&\n      event.state === EventType.FAILED &&\n      handlers.onFail\n    ) {\n      handlers.onFail(event, context);\n    }\n    if (\n      event.oldState === EventType.ACTIVE &&\n      event.state === EventType.CANCELLED &&\n      handlers.onCancel\n    ) {\n      handlers.onCancel(event, context);\n    }\n    if (\n      (event.oldState === EventType.BEGAN ||\n        event.oldState === EventType.ACTIVE) &&\n      event.state !== EventType.BEGAN &&\n      event.state !== EventType.ACTIVE &&\n      handlers.onFinish\n    ) {\n      handlers.onFinish(\n        event,\n        context,\n        event.state === EventType.CANCELLED || event.state === EventType.FAILED\n      );\n    }\n  };\n\n  if (useWeb) {\n    return handler;\n  }\n\n  return useEvent<T>(\n    handler,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    doDependenciesDiffer\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}