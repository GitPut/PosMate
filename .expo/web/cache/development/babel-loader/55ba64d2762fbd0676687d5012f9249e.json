{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport { Table } from \"antd\";\nimport \"./antd.css\";\nimport { itemRender, onShowSizeChange } from \"../components/pagination\";\nimport { Excel } from \"antd-table-saveas-excel\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Datatable = function Datatable(_ref) {\n  var props = _ref.props,\n    columns = _ref.columns,\n    dataSource = _ref.dataSource,\n    updateBaseSelectedRows = _ref.updateBaseSelectedRows,\n    setbaseSelectedRows = _ref.setbaseSelectedRows;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedRowKeys = _useState2[0],\n    setSelectedRowKeys = _useState2[1];\n  var onSelectChange = function onSelectChange(newSelectedRowKeys) {\n    console.log(\"selectedRowKeys changed: \", selectedRowKeys);\n    setSelectedRowKeys(newSelectedRowKeys);\n  };\n  useEffect(function () {\n    handleClick();\n  }, [updateBaseSelectedRows]);\n  var handleClick = function handleClick() {\n    var excel = new Excel();\n    excel.addSheet(\"test\").addColumns(columns).addDataSource(dataSource, {\n      str2Percent: true\n    }).saveAs(\"Excel.xlsx\");\n  };\n  var rowSelection = {\n    selectedRowKeys: selectedRowKeys,\n    onChange: onSelectChange\n  };\n  return _jsx(Table, {\n    className: \"table datanew dataTable no-footer\",\n    rowSelection: rowSelection,\n    columns: columns,\n    dataSource: dataSource,\n    pagination: {\n      total: dataSource.length,\n      showTotal: function showTotal(total, range) {\n        return \" \" + range[0] + \" to \" + range[1] + \" of \" + total + \" items\";\n      },\n      showSizeChanger: true,\n      onShowSizeChange: onShowSizeChange\n    },\n    rowKey: function rowKey(record) {\n      return record.id;\n    }\n  }, props);\n};\nexport default Datatable;","map":{"version":3,"names":["React","useEffect","useState","Table","itemRender","onShowSizeChange","Excel","Datatable","props","columns","dataSource","updateBaseSelectedRows","setbaseSelectedRows","selectedRowKeys","setSelectedRowKeys","onSelectChange","newSelectedRowKeys","console","log","handleClick","excel","addSheet","addColumns","addDataSource","str2Percent","saveAs","rowSelection","onChange","total","length","showTotal","range","showSizeChanger","record","id"],"sources":["/Users/peterputros/Desktop/PosMate/screens/authed/main/EntryFile/datatable.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Table } from \"antd\";\nimport \"./antd.css\";\nimport { itemRender, onShowSizeChange } from \"../components/pagination\";\nimport { Excel } from \"antd-table-saveas-excel\";\n\nconst Datatable = ({ props, columns, dataSource, updateBaseSelectedRows, setbaseSelectedRows }) => {\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const onSelectChange = (newSelectedRowKeys) => {\n    console.log(\"selectedRowKeys changed: \", selectedRowKeys);\n    setSelectedRowKeys(newSelectedRowKeys);\n  };\n\n  useEffect(() => {\n    //setbaseSelectedRows(selectedRowKeys)\n    handleClick()\n  }, [updateBaseSelectedRows])\n\n  const handleClick = () => {\n    const excel = new Excel();\n    excel\n      .addSheet(\"test\")\n      .addColumns(columns)\n      .addDataSource(dataSource, {\n        str2Percent: true\n      })\n      .saveAs(\"Excel.xlsx\");\n  };\n\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n  };\n  return (\n    <Table\n      key={props}\n      className=\"table datanew dataTable no-footer\"\n      rowSelection={rowSelection}\n      columns={columns}\n      dataSource={dataSource}\n      pagination={{\n        total: dataSource.length,\n        showTotal: (total, range) =>\n          ` ${range[0]} to ${range[1]} of ${total} items`,\n        showSizeChanger: true,\n        onShowSizeChange: onShowSizeChange,\n      }}\n      rowKey={(record) => record.id}\n    />\n  );\n};\n\nexport default Datatable;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,KAAK,QAAQ,MAAM;AAC5B;AACA,SAASC,UAAU,EAAEC,gBAAgB;AACrC,SAASC,KAAK,QAAQ,yBAAyB;AAAC;AAEhD,IAAMC,SAAS,GAAG,SAAZA,SAAS,OAAoF;EAAA,IAA9EC,KAAK,QAALA,KAAK;IAAEC,OAAO,QAAPA,OAAO;IAAEC,UAAU,QAAVA,UAAU;IAAEC,sBAAsB,QAAtBA,sBAAsB;IAAEC,mBAAmB,QAAnBA,mBAAmB;EAC1F,gBAA8CV,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAnDW,eAAe;IAAEC,kBAAkB;EAC1C,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,kBAAkB,EAAK;IAC7CC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEL,eAAe,CAAC;IACzDC,kBAAkB,CAACE,kBAAkB,CAAC;EACxC,CAAC;EAEDf,SAAS,CAAC,YAAM;IAEdkB,WAAW,EAAE;EACf,CAAC,EAAE,CAACR,sBAAsB,CAAC,CAAC;EAE5B,IAAMQ,WAAW,GAAG,SAAdA,WAAW,GAAS;IACxB,IAAMC,KAAK,GAAG,IAAId,KAAK,EAAE;IACzBc,KAAK,CACFC,QAAQ,CAAC,MAAM,CAAC,CAChBC,UAAU,CAACb,OAAO,CAAC,CACnBc,aAAa,CAACb,UAAU,EAAE;MACzBc,WAAW,EAAE;IACf,CAAC,CAAC,CACDC,MAAM,CAAC,YAAY,CAAC;EACzB,CAAC;EAGD,IAAMC,YAAY,GAAG;IACnBb,eAAe,EAAfA,eAAe;IACfc,QAAQ,EAAEZ;EACZ,CAAC;EACD,OACE,KAAC,KAAK;IAEJ,SAAS,EAAC,mCAAmC;IAC7C,YAAY,EAAEW,YAAa;IAC3B,OAAO,EAAEjB,OAAQ;IACjB,UAAU,EAAEC,UAAW;IACvB,UAAU,EAAE;MACVkB,KAAK,EAAElB,UAAU,CAACmB,MAAM;MACxBC,SAAS,EAAE,mBAACF,KAAK,EAAEG,KAAK;QAAA,aAClBA,KAAK,CAAC,CAAC,CAAC,YAAOA,KAAK,CAAC,CAAC,CAAC,YAAOH,KAAK;MAAA,CAAQ;MACjDI,eAAe,EAAE,IAAI;MACrB3B,gBAAgB,EAAEA;IACpB,CAAE;IACF,MAAM,EAAE,gBAAC4B,MAAM;MAAA,OAAKA,MAAM,CAACC,EAAE;IAAA;EAAC,GAZzB1B,KAAK,CAaV;AAEN,CAAC;AAED,eAAeD,SAAS"},"metadata":{},"sourceType":"module"}