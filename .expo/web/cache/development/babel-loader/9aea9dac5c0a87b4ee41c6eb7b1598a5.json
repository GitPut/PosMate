{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport React, { useEffect, useRef } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TutorialStep = function TutorialStep(props) {\n  var children = props.children;\n  var childRef = useRef();\n\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    x = _useState2[0],\n    setX = _useState2[1];\n\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    y = _useState4[0],\n    setY = _useState4[1];\n\n  var getPosition = function getPosition() {\n    var x = childRef.current.offsetLeft;\n    setX(x);\n    var y = childRef.current.offsetTop;\n    setY(y);\n  };\n\n  useEffect(function () {\n    getPosition();\n  }, []);\n\n  useEffect(function () {\n    window.addEventListener(\"resize\", getPosition);\n  }, []);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Modal, {\n      transparent: true,\n      children: _jsx(View, {\n        style: {\n          backgroundColor: \"rgba(0,0,0,0.5)\",\n          position: \"absolute\",\n          height: \"100%\",\n          width: \"100%\"\n        }\n      })\n    }), _jsx(View, {\n      ref: childRef,\n      children: children\n    })]\n  });\n};\nexport default TutorialStep;","map":{"version":3,"names":["React","useEffect","useRef","TutorialStep","props","children","childRef","useState","x","setX","y","setY","getPosition","current","offsetLeft","offsetTop","window","addEventListener","backgroundColor","position","height","width"],"sources":["/Users/peterputros/Desktop/PosMate/components/tutorial/TutorialStep.tsx"],"sourcesContent":["import { View, Text, Modal } from \"react-native\";\nimport React, { useEffect, useRef } from \"react\";\n\nconst TutorialStep = (props) => {\n  const { children } = props;\n  const childRef = useRef();\n\n  // X\n  const [x, setX] = useState();\n\n  // Y\n  const [y, setY] = useState();\n\n  // This function calculate X and Y\n  const getPosition = () => {\n    const x = childRef.current.offsetLeft;\n    setX(x);\n\n    const y = childRef.current.offsetTop;\n    setY(y);\n  };\n\n  // Get the position of the red box in the beginning\n  useEffect(() => {\n    getPosition();\n  }, []);\n\n  // Re-calculate X and Y of the red box when the window is resized by the user\n  useEffect(() => {\n    window.addEventListener(\"resize\", getPosition);\n  }, []);\n\n  return (\n    <>\n      <Modal transparent>\n        <View\n          style={{\n            backgroundColor: \"rgba(0,0,0,0.5)\",\n            position: \"absolute\",\n            height: \"100%\",\n            width: \"100%\",\n          }}\n              />\n              \n      </Modal>\n      <View ref={childRef}>{children}</View>\n    </>\n  );\n};\n\nexport default TutorialStep;\n"],"mappings":";;;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC;AAAA;AAAA;AAEjD,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAK,EAAK;EAC9B,IAAQC,QAAQ,GAAKD,KAAK,CAAlBC,QAAQ;EAChB,IAAMC,QAAQ,GAAGJ,MAAM,EAAE;;EAGzB,gBAAkBK,QAAQ,EAAE;IAAA;IAArBC,CAAC;IAAEC,IAAI;;EAGd,iBAAkBF,QAAQ,EAAE;IAAA;IAArBG,CAAC;IAAEC,IAAI;;EAGd,IAAMC,WAAW,GAAG,SAAdA,WAAW,GAAS;IACxB,IAAMJ,CAAC,GAAGF,QAAQ,CAACO,OAAO,CAACC,UAAU;IACrCL,IAAI,CAACD,CAAC,CAAC;IAEP,IAAME,CAAC,GAAGJ,QAAQ,CAACO,OAAO,CAACE,SAAS;IACpCJ,IAAI,CAACD,CAAC,CAAC;EACT,CAAC;;EAGDT,SAAS,CAAC,YAAM;IACdW,WAAW,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;;EAGNX,SAAS,CAAC,YAAM;IACde,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEL,WAAW,CAAC;EAChD,CAAC,EAAE,EAAE,CAAC;EAEN,OACE;IAAA,WACE,KAAC,KAAK;MAAC,WAAW;MAAA,UAChB,KAAC,IAAI;QACH,KAAK,EAAE;UACLM,eAAe,EAAE,iBAAiB;UAClCC,QAAQ,EAAE,UAAU;UACpBC,MAAM,EAAE,MAAM;UACdC,KAAK,EAAE;QACT;MAAE;IACI,EAEF,EACR,KAAC,IAAI;MAAC,GAAG,EAAEf,QAAS;MAAA,UAAED;IAAQ,EAAQ;EAAA,EACrC;AAEP,CAAC;AAED,eAAeF,YAAY"},"metadata":{},"sourceType":"module"}