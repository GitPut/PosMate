{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, TextInput } from \"@react-native-material/core\";\nimport DropDown from \"./DropDown\";\nimport { userStoreState } from \"../state/state\";\nimport { updateData } from \"../state/firebaseFunctions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AddProduct = function AddProduct(_ref) {\n  var setProductModal = _ref.setProductModal,\n    setisModalVisible = _ref.setisModalVisible,\n    existingProduct = _ref.existingProduct,\n    existingProductIndex = _ref.existingProductIndex;\n  var catalog = userStoreState.use();\n  var _useState = useState(existingProduct ? existingProduct : {\n      name: null,\n      price: null,\n      catagory: null,\n      options: [],\n      description: null\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    newProduct = _useState2[0],\n    setnewProduct = _useState2[1];\n  var _useState3 = useState({\n      index: null,\n      inputName: null,\n      innerList: null,\n      cursor: null\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    autoFocusOn = _useState4[0],\n    setautoFocusOn = _useState4[1];\n  function handleDataUpdate(copyProductData) {\n    if (copyProductData) {\n      updateData(_toConsumableArray(catalog.categories), [].concat(_toConsumableArray(catalog.products), [copyProductData]));\n    } else if (existingProduct) {\n      var copy = structuredClone(catalog.products);\n      copy[existingProductIndex] = newProduct;\n      updateData(_toConsumableArray(catalog.categories), copy);\n    } else {\n      updateData(_toConsumableArray(catalog.categories), [].concat(_toConsumableArray(catalog.products), [newProduct]));\n    }\n    setisModalVisible(true);\n  }\n\n  var OptionsAddingSection = function OptionsAddingSection() {\n    return _jsxs(View, {\n      children: [newProduct.options.map(function (e, index) {\n        var _useState5 = useState([]),\n          _useState6 = _slicedToArray(_useState5, 2),\n          optionLblsValues = _useState6[0],\n          setoptionLblsValues = _useState6[1];\n        var _useState7 = useState([]),\n          _useState8 = _slicedToArray(_useState7, 2),\n          optionLbls = _useState8[0],\n          setoptionLbls = _useState8[1];\n        useEffect(function () {\n          if (newProduct.options.length > 1) {\n            var optionLblsLocal = [];\n            newProduct.options.forEach(function (checkUseE) {\n              if (checkUseE.label !== e.label) optionLblsLocal.push(checkUseE.label);\n            });\n            setoptionLbls(optionLblsLocal);\n          }\n        }, []);\n        useEffect(function () {\n          if (e.selectedCaseKey !== null) {\n            var local = newProduct.options.filter(function (localE) {\n              return localE.label == e.selectedCaseKey;\n            });\n            var optionLblsValuesLocal = [];\n            local[0].optionsList.forEach(function (eVals) {\n              optionLblsValuesLocal.push(eVals.label);\n            });\n            setoptionLblsValues(optionLblsValuesLocal);\n          }\n        }, [optionLbls]);\n        return _jsxs(View, {\n          style: {\n            padding: 25,\n            margin: 15,\n            backgroundColor: \"lightgrey\"\n          },\n          children: [_jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              var copy = structuredClone(newProduct);\n              copy.options.push(_objectSpread(_objectSpread({}, e), {}, {\n                label: e.label + \" Copy\"\n              }));\n              setautoFocusOn({\n                index: cop,\n                inputName: \"label\",\n                innerList: false,\n                cursor: e.target.selectionStart,\n                cursorEnd: e.target.selectionEnd\n              });\n              setnewProduct(function (prevState) {\n                return _objectSpread(_objectSpread({}, prevState), {}, {\n                  options: copy.options\n                });\n              });\n            },\n            children: _jsx(Text, {\n              style: {\n                marginBottom: 25,\n                fontWeight: \"700\",\n                color: \"red\"\n              },\n              children: \"Copy\"\n            })\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              var copy = structuredClone(newProduct);\n              copy.options.splice(index, 1);\n              setnewProduct(function (prevState) {\n                return _objectSpread(_objectSpread({}, prevState), {}, {\n                  options: copy.options\n                });\n              });\n            },\n            children: _jsx(Text, {\n              style: {\n                marginBottom: 25,\n                fontWeight: \"700\",\n                color: \"red\"\n              },\n              children: \"X\"\n            })\n          }), _jsx(TextInput, {\n            placeholder: \"Enter Select List Label\",\n            onChange: function onChange(e) {\n              var val = e.nativeEvent.text;\n              var newOptionsList = _toConsumableArray(newProduct.options);\n              newOptionsList[index].label = val;\n              setautoFocusOn({\n                index: index,\n                inputName: \"label\",\n                innerList: false,\n                cursor: e.target.selectionStart,\n                cursorEnd: e.target.selectionEnd\n              });\n              setnewProduct(function (prevState) {\n                return _objectSpread(_objectSpread({}, prevState), {}, {\n                  options: newOptionsList\n                });\n              });\n            },\n            onFocus: function onFocus(e) {\n              e.target.selectionStart = autoFocusOn.cursor;\n              e.target.selectionEnd = autoFocusOn.cursorEnd;\n            },\n            value: e.label,\n            autoFocus: autoFocusOn.index === index && autoFocusOn.innerList === false && autoFocusOn.inputName === \"label\",\n            style: {\n              marginBottom: 25\n            }\n          }), _jsx(TextInput, {\n            placeholder: \"Enter Number Of Selectable; If There Is\",\n            onChange: function onChange(e) {\n              var val = e.nativeEvent.text;\n              var newOptionsList = _toConsumableArray(newProduct.options);\n              newOptionsList[index].numOfSelectable = val;\n              setautoFocusOn({\n                index: index,\n                inputName: \"numOfSelectable\",\n                innerList: false,\n                cursor: e.target.selectionStart,\n                cursorEnd: e.target.selectionEnd\n              });\n              setnewProduct(function (prevState) {\n                return _objectSpread(_objectSpread({}, prevState), {}, {\n                  options: newOptionsList\n                });\n              });\n            },\n            onFocus: function onFocus(e) {\n              e.target.selectionStart = autoFocusOn.cursor;\n              e.target.selectionEnd = autoFocusOn.cursorEnd;\n            },\n            value: e.numOfSelectable,\n            autoFocus: autoFocusOn.index === index && autoFocusOn.innerList === false && autoFocusOn.inputName === \"numOfSelectable\",\n            style: {\n              marginBottom: 25\n            }\n          }), e.optionsList.map(function (eInnerList, indexInnerList) {\n            return _jsxs(View, {\n              style: {\n                flexDirection: \"row\",\n                marginBottom: 25,\n                alignItems: \"center\"\n              },\n              children: [_jsx(TextInput, {\n                placeholder: \"Enter Option Label\",\n                onChange: function onChange(e) {\n                  var val = e.nativeEvent.text;\n                  var newOptionsList = structuredClone(newProduct);\n                  newOptionsList.options[index].optionsList[indexInnerList].label = val;\n                  setautoFocusOn({\n                    index: index,\n                    inputName: \"label\",\n                    innerList: true,\n                    indexInnerList: indexInnerList,\n                    cursor: e.target.selectionStart,\n                    cursorEnd: e.target.selectionEnd\n                  });\n                  setnewProduct(newOptionsList);\n                },\n                onFocus: function onFocus(e) {\n                  e.target.selectionStart = autoFocusOn.cursor;\n                  e.target.selectionEnd = autoFocusOn.cursorEnd;\n                },\n                value: eInnerList.label,\n                autoFocus: autoFocusOn.index === index && autoFocusOn.innerList === true && autoFocusOn.inputName === \"label\" && autoFocusOn.indexInnerList === indexInnerList\n              }), _jsx(TextInput, {\n                placeholder: \"Enter price increase\",\n                onChange: function onChange(e) {\n                  var val = e.nativeEvent.text;\n                  var newOptionsList = structuredClone(newProduct);\n                  newOptionsList.options[index].optionsList[indexInnerList].priceIncrease = val;\n                  setautoFocusOn({\n                    index: index,\n                    inputName: \"priceIncrease\",\n                    innerList: true,\n                    indexInnerList: indexInnerList,\n                    cursor: e.target.selectionStart,\n                    cursorEnd: e.target.selectionEnd\n                  });\n                  setnewProduct(newOptionsList);\n                },\n                onFocus: function onFocus(e) {\n                  e.target.selectionStart = autoFocusOn.cursor;\n                  e.target.selectionEnd = autoFocusOn.cursorEnd;\n                },\n                value: eInnerList.priceIncrease,\n                autoFocus: autoFocusOn.index === index && autoFocusOn.innerList === true && autoFocusOn.inputName === \"priceIncrease\" && autoFocusOn.indexInnerList === indexInnerList,\n                style: {\n                  marginLeft: 20,\n                  marginRight: 20\n                }\n              }), _jsx(TouchableOpacity, {\n                onPress: function onPress() {\n                  var copy = structuredClone(newProduct);\n                  copy.options[index].optionsList.splice(indexInnerList, 1);\n                  setnewProduct(function (prevState) {\n                    return _objectSpread(_objectSpread({}, prevState), {}, {\n                      options: copy.options\n                    });\n                  });\n                  setnewProduct(function (prevState) {\n                    return _objectSpread(_objectSpread({}, prevState), {}, {\n                      options: copy.options\n                    });\n                  });\n                },\n                children: _jsx(Text, {\n                  style: {\n                    fontWeight: \"700\",\n                    color: \"red\"\n                  },\n                  children: \"X\"\n                })\n              })]\n            });\n          }), _jsx(Button, {\n            title: \"Add Option Choice\",\n            onPress: function onPress() {\n              var newOptionsList = _toConsumableArray(newProduct.options);\n              newOptionsList[index].optionsList.push({\n                label: null,\n                priceIncrease: null\n              });\n              setnewProduct(function (prevState) {\n                return _objectSpread(_objectSpread({}, prevState), {}, {\n                  options: newOptionsList\n                });\n              });\n              setautoFocusOn({\n                index: index,\n                inputName: \"label\",\n                innerList: true,\n                indexInnerList: newOptionsList[index].optionsList.length - 1\n              });\n            },\n\n            style: {\n              marginBottom: 25\n            }\n          }), optionLbls.length > 1 && _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              justifyContent: \"space-between\",\n              marginBottom: 25\n            },\n            children: [_jsx(DropDown, {\n              label: \"Show if...\",\n              options: optionLbls,\n              setValue: function setValue(val) {\n                var newOptionsList = _toConsumableArray(newProduct.options);\n                newOptionsList[index].selectedCaseKey = val;\n                setnewProduct(function (prevState) {\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    options: newOptionsList\n                  });\n                });\n                setautoFocusOn({\n                  index: null,\n                  inputName: null,\n                  innerList: null,\n                  indexInnerList: null\n                });\n              },\n              value: e.selectedCaseKey,\n              style: {\n                marginBottom: 25\n              }\n            }), _jsx(Text, {\n              children: \"\\\"=\\\"\"\n            }), _jsx(DropDown, {\n              label: \"Show if...\",\n              options: optionLblsValues,\n              setValue: function setValue(val) {\n                var newOptionsList = _toConsumableArray(newProduct.options);\n                newOptionsList[index].selectedCaseValue = val;\n                setnewProduct(function (prevState) {\n                  return _objectSpread(_objectSpread({}, prevState), {}, {\n                    options: newOptionsList\n                  });\n                });\n\n                setautoFocusOn({\n                  index: null,\n                  inputName: null,\n                  innerList: null,\n                  indexInnerList: null\n                });\n              },\n              value: e.selectedCaseValue,\n              style: {\n                marginBottom: 25\n              }\n            })]\n          })]\n        });\n      }), _jsx(Button, {\n        title: \"Add Product Option\",\n        onPress: function onPress() {\n\n          setnewProduct(function (prevState) {\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              options: [].concat(_toConsumableArray(prevState.options), [{\n                label: null,\n                optionsList: [],\n                selectedCaseKey: null,\n                selectedCaseValue: null,\n                numOfSelectable: null\n              }])\n            });\n          });\n\n          setautoFocusOn({\n            index: newProduct.options.length,\n            inputName: \"label\",\n            innerList: false,\n            indexInnerList: null\n          });\n        },\n        style: {\n          marginBottom: 25\n        }\n      })]\n    });\n  };\n  return _jsxs(ScrollView, {\n    contentContainerStyle: {\n      width: \"93%\",\n      alignSelf: \"center\",\n      marginTop: 25\n    },\n    children: [_jsxs(View, {\n      style: {\n        flexDirection: \"row\",\n        padding: 20,\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n      },\n      children: [_jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return setProductModal(false);\n        },\n        children: _jsx(Text, {\n          style: {\n            marginBottom: 25,\n            fontWeight: \"700\",\n            color: \"red\"\n          },\n          children: \"X\"\n        })\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          var copy = structuredClone(newProduct);\n          copy.name = copy.name + \" Copy\";\n          handleDataUpdate(copy);\n        },\n        children: _jsx(Text, {\n          style: {\n            marginBottom: 25,\n            fontWeight: \"700\",\n            color: \"red\"\n          },\n          children: \"Copy\"\n        })\n      }), _jsx(Text, {\n        style: {\n          marginBottom: 25\n        },\n        children: \"AddProduct\"\n      })]\n    }), _jsx(TextInput, {\n      placeholder: \"Enter Product Name\",\n      onChangeText: function onChangeText(val) {\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            name: val\n          });\n        });\n      },\n      value: newProduct.name,\n      style: {\n        marginBottom: 25\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Enter any other items that come with this\",\n      onChangeText: function onChangeText(val) {\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            description: val\n          });\n        });\n      },\n      style: {\n        marginBottom: 25\n      },\n      value: newProduct.description\n    }), _jsx(TextInput, {\n      placeholder: \"Enter Product Price\",\n      onChangeText: function onChangeText(val) {\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            price: val\n          });\n        });\n      },\n      style: {\n        marginBottom: 25\n      },\n      value: newProduct.price\n    }), _jsx(DropDown, {\n      label: \"Choose catagory\",\n      options: catalog.categories,\n      setValue: function setValue(val) {\n        setnewProduct(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            catagory: val\n          });\n        });\n      },\n      value: newProduct.catagory,\n      style: {\n        marginBottom: 25\n      }\n    }), _jsx(OptionsAddingSection, {}), _jsx(Button, {\n      title: \"Add/Save Product\",\n      onPress: function onPress() {\n        return handleDataUpdate();\n      },\n      style: {\n        marginBottom: 25,\n        marginTop: 25,\n        backgroundColor: \"lightgreen\"\n      }\n    })]\n  });\n};\nexport default AddProduct;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useEffect","useState","Button","TextInput","DropDown","userStoreState","updateData","AddProduct","setProductModal","setisModalVisible","existingProduct","existingProductIndex","catalog","use","name","price","catagory","options","description","newProduct","setnewProduct","index","inputName","innerList","cursor","autoFocusOn","setautoFocusOn","handleDataUpdate","copyProductData","categories","products","copy","structuredClone","OptionsAddingSection","map","e","optionLblsValues","setoptionLblsValues","optionLbls","setoptionLbls","length","optionLblsLocal","forEach","checkUseE","label","push","selectedCaseKey","local","filter","localE","optionLblsValuesLocal","optionsList","eVals","padding","margin","backgroundColor","cop","target","selectionStart","cursorEnd","selectionEnd","prevState","marginBottom","fontWeight","color","splice","val","nativeEvent","text","newOptionsList","numOfSelectable","eInnerList","indexInnerList","flexDirection","alignItems","priceIncrease","marginLeft","marginRight","justifyContent","selectedCaseValue","width","alignSelf","marginTop","styles","StyleSheet","create"],"sources":["/Users/peterputros/Desktop/PosMate-1/components/AddProduct.tsx"],"sourcesContent":["import {\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Button, TextInput } from \"@react-native-material/core\";\nimport DropDown from \"./DropDown\";\nimport { userStoreState } from \"state/state\";\nimport { updateData } from \"state/firebaseFunctions\";\n\nconst AddProduct = ({\n  setProductModal,\n  setisModalVisible,\n  existingProduct,\n  existingProductIndex,\n}) => {\n  const catalog = userStoreState.use();\n  const [newProduct, setnewProduct] = useState(\n    existingProduct\n      ? existingProduct\n      : {\n          name: null,\n          price: null,\n          catagory: null,\n          options: [],\n          description: null,\n        }\n  );\n  const [autoFocusOn, setautoFocusOn] = useState({\n    index: null,\n    inputName: null,\n    innerList: null,\n    cursor: null,\n  });\n\n  function handleDataUpdate(copyProductData) {\n    if (copyProductData) {\n      updateData(\n        [...catalog.categories],\n        [...catalog.products, copyProductData]\n      );\n    } else if (existingProduct) {\n      let copy = structuredClone(catalog.products);\n      copy[existingProductIndex] = newProduct;\n\n      updateData([...catalog.categories], copy);\n    } else {\n      updateData([...catalog.categories], [...catalog.products, newProduct]);\n    }\n    setisModalVisible(true);\n  }\n\n  // useEffect(() => {\n  //   const scrollPosition = sessionStorage.getItem(\"scrollPosition\");\n  //   if (scrollPosition) {\n  //     window.scrollTo(0, parseInt(scrollPosition));\n  //     sessionStorage.removeItem(\"scrollPosition\");\n  //   }\n  // }, [newProduct]);\n\n  const OptionsAddingSection = () => {\n    return (\n      <View>\n        {newProduct.options.map((e, index) => {\n          const [optionLblsValues, setoptionLblsValues] = useState([]);\n          const [optionLbls, setoptionLbls] = useState([]);\n\n          useEffect(() => {\n            //setnewProduct(newProductSaved.current);\n            if (newProduct.options.length > 1) {\n              const optionLblsLocal = [];\n              newProduct.options.forEach((checkUseE) => {\n                if (checkUseE.label !== e.label)\n                  optionLblsLocal.push(checkUseE.label);\n              });\n              setoptionLbls(optionLblsLocal);\n            }\n          }, []);\n\n          useEffect(() => {\n            if (e.selectedCaseKey !== null) {\n              const local = newProduct.options.filter(\n                (localE) => localE.label == e.selectedCaseKey\n              );\n              const optionLblsValuesLocal = [];\n              local[0].optionsList.forEach((eVals) => {\n                optionLblsValuesLocal.push(eVals.label);\n              });\n              setoptionLblsValues(optionLblsValuesLocal);\n            }\n          }, [optionLbls]);\n\n          return (\n            <View\n              style={{\n                padding: 25,\n                margin: 15,\n                backgroundColor: \"lightgrey\",\n              }}\n            >\n              <TouchableOpacity\n                onPress={() => {\n                  const copy = structuredClone(newProduct);\n                  copy.options.push({\n                    ...e,\n                    label: e.label + \" Copy\",\n                  });\nsetautoFocusOn({\n  index: cop,\n  inputName: \"label\",\n  innerList: false,\n  cursor: e.target.selectionStart,\n  cursorEnd: e.target.selectionEnd,\n});\n                  setnewProduct((prevState) => ({\n                    ...prevState,\n                    options: copy.options,\n                  }));\n                }}\n              >\n                <Text\n                  style={{\n                    marginBottom: 25,\n                    fontWeight: \"700\",\n                    color: \"red\",\n                  }}\n                >\n                  Copy\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                onPress={() => {\n                  const copy = structuredClone(newProduct);\n                  copy.options.splice(index, 1);\n\n                  setnewProduct((prevState) => ({\n                    ...prevState,\n                    options: copy.options,\n                  }));\n                }}\n              >\n                <Text\n                  style={{\n                    marginBottom: 25,\n                    fontWeight: \"700\",\n                    color: \"red\",\n                  }}\n                >\n                  X\n                </Text>\n              </TouchableOpacity>\n              <TextInput\n                placeholder=\"Enter Select List Label\"\n                onChange={(e) => {\n                  const val = e.nativeEvent.text;\n                  const newOptionsList = [...newProduct.options];\n                  newOptionsList[index].label = val;\n                  setautoFocusOn({\n                    index: index,\n                    inputName: \"label\",\n                    innerList: false,\n                    cursor: e.target.selectionStart,\n                    cursorEnd: e.target.selectionEnd,\n                  });\n                  // sessionStorage.setItem(\"scrollPosition\", window.pageYOffset);\n                  setnewProduct((prevState) => ({\n                    ...prevState,\n                    options: newOptionsList,\n                  }));\n                }}\n                onFocus={(e) => {\n                  e.target.selectionStart = autoFocusOn.cursor;\n                  e.target.selectionEnd = autoFocusOn.cursorEnd;\n                }}\n                value={e.label}\n                autoFocus={\n                  autoFocusOn.index === index &&\n                  autoFocusOn.innerList === false &&\n                  autoFocusOn.inputName === \"label\"\n                }\n                style={{ marginBottom: 25 }}\n              />\n              <TextInput\n                placeholder=\"Enter Number Of Selectable; If There Is\"\n                onChange={(e) => {\n                  const val = e.nativeEvent.text;\n                  const newOptionsList = [...newProduct.options];\n                  newOptionsList[index].numOfSelectable = val;\n                  setautoFocusOn({\n                    index: index,\n                    inputName: \"numOfSelectable\",\n                    innerList: false,\n                    cursor: e.target.selectionStart,\n                    cursorEnd: e.target.selectionEnd,\n                  });\n                  // sessionStorage.setItem(\"scrollPosition\", window.pageYOffset);\n                  setnewProduct((prevState) => ({\n                    ...prevState,\n                    options: newOptionsList,\n                  }));\n                }}\n                onFocus={(e) => {\n                  e.target.selectionStart = autoFocusOn.cursor;\n                  e.target.selectionEnd = autoFocusOn.cursorEnd;\n                }}\n                value={e.numOfSelectable}\n                autoFocus={\n                  autoFocusOn.index === index &&\n                  autoFocusOn.innerList === false &&\n                  autoFocusOn.inputName === \"numOfSelectable\"\n                }\n                style={{ marginBottom: 25 }}\n              />\n              {e.optionsList.map((eInnerList, indexInnerList) => {\n                return (\n                  <View\n                    style={{\n                      flexDirection: \"row\",\n                      marginBottom: 25,\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <TextInput\n                      placeholder=\"Enter Option Label\"\n                      onChange={(e) => {\n                        const val = e.nativeEvent.text;\n                        const newOptionsList = structuredClone(newProduct);\n                        newOptionsList.options[index].optionsList[\n                          indexInnerList\n                        ].label = val;\n                        setautoFocusOn({\n                          index: index,\n                          inputName: \"label\",\n                          innerList: true,\n                          indexInnerList: indexInnerList,\n                          cursor: e.target.selectionStart,\n                          cursorEnd: e.target.selectionEnd,\n                        });\n                        // sessionStorage.setItem(\n                        //   \"scrollPosition\",\n                        //   window.pageYOffset\n                        // );\n                        setnewProduct(newOptionsList);\n                      }}\n                      onFocus={(e) => {\n                        e.target.selectionStart = autoFocusOn.cursor;\n                        e.target.selectionEnd = autoFocusOn.cursorEnd;\n                      }}\n                      value={eInnerList.label}\n                      autoFocus={\n                        autoFocusOn.index === index &&\n                        autoFocusOn.innerList === true &&\n                        autoFocusOn.inputName === \"label\" &&\n                        autoFocusOn.indexInnerList === indexInnerList\n                      }\n                    />\n                    <TextInput\n                      placeholder=\"Enter price increase\"\n                      onChange={(e) => {\n                        const val = e.nativeEvent.text;\n                        const newOptionsList = structuredClone(newProduct);\n                        newOptionsList.options[index].optionsList[\n                          indexInnerList\n                        ].priceIncrease = val;\n                        setautoFocusOn({\n                          index: index,\n                          inputName: \"priceIncrease\",\n                          innerList: true,\n                          indexInnerList: indexInnerList,\n                          cursor: e.target.selectionStart,\n                          cursorEnd: e.target.selectionEnd,\n                        });\n                        // sessionStorage.setItem(\n                        //   \"scrollPosition\",\n                        //   window.pageYOffset\n                        // );\n                        setnewProduct(newOptionsList);\n                      }}\n                      onFocus={(e) => {\n                        e.target.selectionStart = autoFocusOn.cursor;\n                        e.target.selectionEnd = autoFocusOn.cursorEnd;\n                      }}\n                      value={eInnerList.priceIncrease}\n                      autoFocus={\n                        autoFocusOn.index === index &&\n                        autoFocusOn.innerList === true &&\n                        autoFocusOn.inputName === \"priceIncrease\" &&\n                        autoFocusOn.indexInnerList === indexInnerList\n                      }\n                      style={{ marginLeft: 20, marginRight: 20 }}\n                    />\n                    <TouchableOpacity\n                      onPress={() => {\n                        const copy = structuredClone(newProduct);\n                        copy.options[index].optionsList.splice(\n                          indexInnerList,\n                          1\n                        );\n\n                        setnewProduct((prevState) => ({\n                          ...prevState,\n                          options: copy.options,\n                        }));\n\n                        setnewProduct((prevState) => ({\n                          ...prevState,\n                          options: copy.options,\n                        }));\n                      }}\n                    >\n                      <Text\n                        style={{\n                          fontWeight: \"700\",\n                          color: \"red\",\n                        }}\n                      >\n                        X\n                      </Text>\n                    </TouchableOpacity>\n                  </View>\n                );\n              })}\n              <Button\n                title=\"Add Option Choice\"\n                onPress={() => {\n                  const newOptionsList = [...newProduct.options];\n                  newOptionsList[index].optionsList.push({\n                    label: null,\n                    priceIncrease: null,\n                  });\n                  setnewProduct((prevState) => ({\n                    ...prevState,\n                    options: newOptionsList,\n                  }));\n                  setautoFocusOn({\n                    index: index,\n                    inputName: \"label\",\n                    innerList: true,\n                    indexInnerList:\n                      newOptionsList[index].optionsList.length - 1,\n                  });\n                  // sessionStorage.setItem(\"scrollPosition\", window.pageYOffset);\n                }}\n                style={{ marginBottom: 25 }}\n              />\n              {optionLbls.length > 1 && (\n                <View\n                  style={{\n                    flexDirection: \"row\",\n                    justifyContent: \"space-between\",\n                    marginBottom: 25,\n                  }}\n                >\n                  <DropDown\n                    label=\"Show if...\"\n                    options={optionLbls}\n                    setValue={(val) => {\n                      const newOptionsList = [...newProduct.options];\n                      newOptionsList[index].selectedCaseKey = val;\n                      setnewProduct((prevState) => ({\n                        ...prevState,\n                        options: newOptionsList,\n                      }));\n                      // sessionStorage.setItem(\n                      //   \"scrollPosition\",\n                      //   window.pageYOffset\n                      // );\n                      setautoFocusOn({\n                        index: null,\n                        inputName: null,\n                        innerList: null,\n                        indexInnerList: null,\n                      });\n                    }}\n                    value={e.selectedCaseKey}\n                    style={{ marginBottom: 25 }}\n                  />\n                  <Text>\"=\"</Text>\n                  <DropDown\n                    label=\"Show if...\"\n                    options={optionLblsValues}\n                    setValue={(val) => {\n                      const newOptionsList = [...newProduct.options];\n                      newOptionsList[index].selectedCaseValue = val;\n                      setnewProduct((prevState) => ({\n                        ...prevState,\n                        options: newOptionsList,\n                      }));\n                      // sessionStorage.setItem(\n                      //   \"scrollPosition\",\n                      //   window.pageYOffset\n                      // );\n\n                      setautoFocusOn({\n                        index: null,\n                        inputName: null,\n                        innerList: null,\n                        indexInnerList: null,\n                      });\n                    }}\n                    value={e.selectedCaseValue}\n                    style={{ marginBottom: 25 }}\n                  />\n                </View>\n              )}\n            </View>\n          );\n        })}\n        <Button\n          title=\"Add Product Option\"\n          onPress={() => {\n            // sessionStorage.setItem(\"scrollPosition\", window.pageYOffset);\n\n            setnewProduct((prevState) => ({\n              ...prevState,\n              options: [\n                ...prevState.options,\n                {\n                  label: null,\n                  optionsList: [],\n                  selectedCaseKey: null,\n                  selectedCaseValue: null,\n                  numOfSelectable: null,\n                },\n              ],\n            }));\n\n            // Not using -1 on length since this is before the new option is added to list\n            setautoFocusOn({\n              index: newProduct.options.length,\n              inputName: \"label\",\n              innerList: false,\n              indexInnerList: null,\n            });\n          }}\n          style={{ marginBottom: 25 }}\n        />\n      </View>\n    );\n  };\n\n  return (\n    <ScrollView\n      contentContainerStyle={{\n        width: \"93%\",\n        alignSelf: \"center\",\n        marginTop: 25,\n      }}\n    >\n      <View\n        style={{\n          flexDirection: \"row\",\n          padding: 20,\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n        }}\n      >\n        <TouchableOpacity onPress={() => setProductModal(false)}>\n          <Text style={{ marginBottom: 25, fontWeight: \"700\", color: \"red\" }}>\n            X\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => {\n            let copy = structuredClone(newProduct);\n            copy.name = copy.name + \" Copy\";\n            handleDataUpdate(copy);\n          }}\n        >\n          <Text style={{ marginBottom: 25, fontWeight: \"700\", color: \"red\" }}>\n            Copy\n          </Text>\n        </TouchableOpacity>\n        <Text style={{ marginBottom: 25 }}>AddProduct</Text>\n      </View>\n      <TextInput\n        placeholder=\"Enter Product Name\"\n        onChangeText={(val) => {\n          setnewProduct((prevState) => ({ ...prevState, name: val }));\n        }}\n        value={newProduct.name}\n        style={{ marginBottom: 25 }}\n      />\n      <TextInput\n        placeholder=\"Enter any other items that come with this\"\n        onChangeText={(val) => {\n          setnewProduct((prevState) => ({ ...prevState, description: val }));\n        }}\n        style={{ marginBottom: 25 }}\n        value={newProduct.description}\n      />\n      <TextInput\n        placeholder=\"Enter Product Price\"\n        onChangeText={(val) => {\n          setnewProduct((prevState) => ({ ...prevState, price: val }));\n        }}\n        style={{ marginBottom: 25 }}\n        value={newProduct.price}\n      />\n      <DropDown\n        label=\"Choose catagory\"\n        options={catalog.categories}\n        setValue={(val) => {\n          setnewProduct((prevState) => ({ ...prevState, catagory: val }));\n        }}\n        value={newProduct.catagory}\n        style={{ marginBottom: 25 }}\n      />\n      <OptionsAddingSection />\n      <Button\n        title=\"Add/Save Product\"\n        onPress={() => handleDataUpdate()}\n        style={{\n          marginBottom: 25,\n          marginTop: 25,\n          backgroundColor: \"lightgreen\",\n        }}\n      />\n    </ScrollView>\n  );\n};\n\nexport default AddProduct;\n\nconst styles = StyleSheet.create({});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}