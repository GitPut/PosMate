{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport React, { useRef, useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Accordian = function Accordian(_ref) {\n  var question = _ref.question,\n    answer = _ref.answer;\n  var animHeight = useRef(new Animated.Value(0)).current;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpen = _useState2[0],\n    setisOpen = _useState2[1];\n  var open = function open() {\n    Animated.timing(animHeight, {\n      toValue: 500,\n      duration: 300,\n      useNativeDriver: false\n    }).start();\n  };\n  var close = function close() {\n    Animated.timing(animHeight, {\n      toValue: 0,\n      duration: 300,\n      useNativeDriver: false\n    }).start();\n  };\n  return _jsxs(\"div\", {\n    className: \"faq-accordion\",\n    children: [_jsxs(\"div\", {\n      \"data-w-id\": \"da3cc578-29e4-e501-7e52-9db3ebfeacb6\",\n      className: \"faq-question\",\n      onClick: function onClick() {\n        if (isOpen) {\n          setisOpen(false);\n          close();\n        } else {\n          setisOpen(true);\n          open();\n        }\n      },\n      children: [_jsx(\"div\", {\n        className: \"text-size-medium text-weight-semibold\",\n        children: question\n      }), _jsx(\"div\", {\n        className: \"icon-1x1-small w-embed\",\n        children: _jsx(\"svg\", {\n          width: \"100%\",\n          height: \"100%\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: _jsx(\"path\", {\n            d: \"M15.8746 8.99999L11.9946 12.88L8.11461 8.99999C7.72461 8.60999 7.09461 8.60999 6.70461 8.99999C6.31461 9.38999 6.31461 10.02 6.70461 10.41L11.2946 15C11.6846 15.39 12.3146 15.39 12.7046 15L17.2946 10.41C17.6846 10.02 17.6846 9.38999 17.2946 8.99999C16.9046 8.61999 16.2646 8.60999 15.8746 8.99999Z\",\n            fill: \"currentColor\"\n          })\n        })\n      })]\n    }), _jsx(Animated.View, {\n      style: {\n        maxHeight: animHeight\n      },\n      children: _jsx(\"div\", {\n        className: \"faq-answer\",\n        style: {\n          width: \"100%\"\n        },\n        children: _jsx(\"div\", {\n          className: \"max-width-large\",\n          children: _jsx(\"div\", {\n            className: \"padding-vertical padding-medium\",\n            children: _jsx(\"p\", {\n              className: \"text-size-regular\",\n              children: answer\n            })\n          })\n        })\n      })\n    })]\n  });\n};\nexport default Accordian;","map":{"version":3,"names":["React","useRef","useState","Accordian","question","answer","animHeight","Animated","Value","current","isOpen","setisOpen","open","timing","toValue","duration","useNativeDriver","start","close","maxHeight","width"],"sources":["/Users/peterputros/Desktop/PosMate/components/multipurpose/Accordian.tsx"],"sourcesContent":["import { View, Text, Animated } from \"react-native\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nconst Accordian = ({question, answer}) => {\nconst animHeight = useRef(new Animated.Value(0)).current\n  const [isOpen, setisOpen] = useState(false)\n\n const open = () => {\n    // Will change animHeight value to 1 in 5 seconds\n    Animated.timing(animHeight, {\n      toValue: 500,\n      duration: 300,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  const close = () => {\n    // Will change animHeight value to 0 in 3 seconds\n    Animated.timing(animHeight, {\n      toValue: 0,\n      duration: 300,\n      useNativeDriver: false,\n    }).start();\n  };\n\n\n  return (\n   <div className=\"faq-accordion\">\n                        <div\n                          data-w-id=\"da3cc578-29e4-e501-7e52-9db3ebfeacb6\"\n                          className=\"faq-question\"\n                          onClick={() => {\n                            if(isOpen){\n                              setisOpen(false)\n                              close()\n                            }else {\n                              setisOpen(true)\n                              open()\n                            }\n                          }}\n                        >\n                          <div className=\"text-size-medium text-weight-semibold\">\n                           {question}\n                          </div>\n                          <div className=\"icon-1x1-small w-embed\">\n                            <svg\n                              width=\"100%\"\n                              height=\"100%\"\n                              viewBox=\"0 0 24 24\"\n                              fill=\"none\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                            >\n                              <path\n                                d=\"M15.8746 8.99999L11.9946 12.88L8.11461 8.99999C7.72461 8.60999 7.09461 8.60999 6.70461 8.99999C6.31461 9.38999 6.31461 10.02 6.70461 10.41L11.2946 15C11.6846 15.39 12.3146 15.39 12.7046 15L17.2946 10.41C17.6846 10.02 17.6846 9.38999 17.2946 8.99999C16.9046 8.61999 16.2646 8.60999 15.8746 8.99999Z\"\n                                fill=\"currentColor\"\n                              />\n                            </svg>\n                          </div>\n                        </div>\n                        <Animated.View style={{maxHeight: animHeight}}>\n                        <div\n                          className=\"faq-answer\"\n                          style={{ width: \"100%\"}}\n                        >\n                          <div className=\"max-width-large\">\n                            <div className=\"padding-vertical padding-medium\">\n                              <p className=\"text-size-regular\">\n                                {answer}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        </Animated.View>\n                      </div>\n  );\n}\n\nexport default Accordian"],"mappings":";;AACA,OAAOA,KAAK,IAAeC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAE3D,IAAMC,SAAS,GAAG,SAAZA,SAAS,OAA2B;EAAA,IAAtBC,QAAQ,QAARA,QAAQ;IAAEC,MAAM,QAANA,MAAM;EACpC,IAAMC,UAAU,GAAGL,MAAM,CAAC,IAAIM,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EACtD,gBAA4BP,QAAQ,CAAC,KAAK,CAAC;IAAA;IAApCQ,MAAM;IAAEC,SAAS;EAEzB,IAAMC,IAAI,GAAG,SAAPA,IAAI,GAAS;IAEhBL,QAAQ,CAACM,MAAM,CAACP,UAAU,EAAE;MAC1BQ,OAAO,EAAE,GAAG;MACZC,QAAQ,EAAE,GAAG;MACbC,eAAe,EAAE;IACnB,CAAC,CAAC,CAACC,KAAK,EAAE;EACZ,CAAC;EAED,IAAMC,KAAK,GAAG,SAARA,KAAK,GAAS;IAElBX,QAAQ,CAACM,MAAM,CAACP,UAAU,EAAE;MAC1BQ,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,GAAG;MACbC,eAAe,EAAE;IACnB,CAAC,CAAC,CAACC,KAAK,EAAE;EACZ,CAAC;EAGD,OACC;IAAK,SAAS,EAAC,eAAe;IAAA,WACT;MACE,aAAU,sCAAsC;MAChD,SAAS,EAAC,cAAc;MACxB,OAAO,EAAE,mBAAM;QACb,IAAGP,MAAM,EAAC;UACRC,SAAS,CAAC,KAAK,CAAC;UAChBO,KAAK,EAAE;QACT,CAAC,MAAK;UACJP,SAAS,CAAC,IAAI,CAAC;UACfC,IAAI,EAAE;QACR;MACF,CAAE;MAAA,WAEF;QAAK,SAAS,EAAC,uCAAuC;QAAA,UACpDR;MAAQ,EACJ,EACN;QAAK,SAAS,EAAC,wBAAwB;QAAA,UACrC;UACE,KAAK,EAAC,MAAM;UACZ,MAAM,EAAC,MAAM;UACb,OAAO,EAAC,WAAW;UACnB,IAAI,EAAC,MAAM;UACX,KAAK,EAAC,4BAA4B;UAAA,UAElC;YACE,CAAC,EAAC,2SAA2S;YAC7S,IAAI,EAAC;UAAc;QACnB;MACE,EACF;IAAA,EACF,EACN,KAAC,QAAQ,CAAC,IAAI;MAAC,KAAK,EAAE;QAACe,SAAS,EAAEb;MAAU,CAAE;MAAA,UAC9C;QACE,SAAS,EAAC,YAAY;QACtB,KAAK,EAAE;UAAEc,KAAK,EAAE;QAAM,CAAE;QAAA,UAExB;UAAK,SAAS,EAAC,iBAAiB;UAAA,UAC9B;YAAK,SAAS,EAAC,iCAAiC;YAAA,UAC9C;cAAG,SAAS,EAAC,mBAAmB;cAAA,UAC7Bf;YAAM;UACL;QACA;MACF;IACF,EACU;EAAA,EACZ;AAE5B,CAAC;AAED,eAAeF,SAAS"},"metadata":{},"sourceType":"module"}