{"ast":null,"code":"import React from \"react\";\nimport \"react-native-gesture-handler\";\nimport RouteManager from \"./navigation/RouteManager\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar App = function App() {\n  var originalConsoleWarn = console.warn.bind(console);\n  console.warn = function (msg) {\n    var warningsToHide = [\"BackHandler is not supported on web and should not be used\", 'shadow* style props are deprecated. Use \"boxShadow\".', \"You are loading @emotion/react when it is already loaded.\", \"style.resizeMode is deprecated. Please use props.resizeMode.\"\n    ];\n\n    var shouldHideWarning = warningsToHide.some(function (warningPattern) {\n      return msg.includes(warningPattern);\n    });\n    if (!shouldHideWarning) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      originalConsoleWarn.apply(void 0, [msg].concat(args));\n    }\n\n  };\n\n  return _jsx(RouteManager, {});\n};\nexport default App;","map":{"version":3,"names":["React","RouteManager","App","originalConsoleWarn","console","warn","bind","msg","warningsToHide","shouldHideWarning","some","warningPattern","includes","args"],"sources":["/Users/peterputros/Desktop/PosMate/App.tsx"],"sourcesContent":["import React from \"react\";\nimport \"react-native-gesture-handler\";\nimport RouteManager from \"navigation/RouteManager\";\n\nconst App = () => {\n  // Backup the original console.warn function\n  const originalConsoleWarn = console.warn.bind(console);\n\n  console.warn = (msg, ...args) => {\n    const warningsToHide = [\n      \"BackHandler is not supported on web and should not be used\",\n      'shadow* style props are deprecated. Use \"boxShadow\".',\n      \"You are loading @emotion/react when it is already loaded.\",\n      \"style.resizeMode is deprecated. Please use props.resizeMode.\",\n      // Add more patterns here as needed\n    ];\n\n    // Check if the message matches any of the patterns in warningsToHide\n    const shouldHideWarning = warningsToHide.some((warningPattern) =>\n      msg.includes(warningPattern)\n    );\n\n    if (!shouldHideWarning) {\n      // If the message does not match any pattern, pass it to the original console.warn\n      originalConsoleWarn(msg, ...args);\n    }\n\n    // If the message matches a pattern, it gets suppressed\n  };\n\n  return <RouteManager />;\n};\n\nexport default App;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,8BAA8B;AACrC,OAAOC,YAAY;AAAgC;AAEnD,IAAMC,GAAG,GAAG,SAANA,GAAG,GAAS;EAEhB,IAAMC,mBAAmB,GAAGC,OAAO,CAACC,IAAI,CAACC,IAAI,CAACF,OAAO,CAAC;EAEtDA,OAAO,CAACC,IAAI,GAAG,UAACE,GAAG,EAAc;IAC/B,IAAMC,cAAc,GAAG,CACrB,4DAA4D,EAC5D,sDAAsD,EACtD,2DAA2D,EAC3D;IAA8D,CAE/D;;IAGD,IAAMC,iBAAiB,GAAGD,cAAc,CAACE,IAAI,CAAC,UAACC,cAAc;MAAA,OAC3DJ,GAAG,CAACK,QAAQ,CAACD,cAAc,CAAC;IAAA,EAC7B;IAED,IAAI,CAACF,iBAAiB,EAAE;MAAA,kCAdFI,IAAI;QAAJA,IAAI;MAAA;MAgBxBV,mBAAmB,gBAACI,GAAG,SAAKM,IAAI,EAAC;IACnC;;EAGF,CAAC;;EAED,OAAO,KAAC,YAAY,KAAG;AACzB,CAAC;AAED,eAAeX,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}